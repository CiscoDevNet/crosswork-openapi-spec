{
  "swagger": "2.0",
  "info": {
    "title": "ietf-network-state",
    "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
    "version": "2018-02-26"
  },
  "basePath": "/crosswork/nbi/optima/v1/restconf",
  "tags": [
    {
      "name": "root",
      "description": "root resources"
    },
    {
      "name": "operations",
      "description": "operations resources"
    },
    {
      "name": "data",
      "description": "data resources"
    },
    {
      "name": "get",
      "description": "get resources"
    },
    {
      "name": "post",
      "description": "post resources"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/yang-data+json"
  ],
  "consumes": [
    "application/yang-data+json"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "root",
          "get"
        ],
        "summary": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "operationId": "root_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
            "schema": {
              "$ref": "#/definitions/root"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/operations": {
      "get": {
        "tags": [
          "operations",
          "get"
        ],
        "summary": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "operationId": "operations_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
            "schema": {
              "$ref": "#/definitions/operations"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/yang-library-version": {
      "get": {
        "tags": [
          "yang-library-version",
          "get"
        ],
        "summary": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "operationId": "yang_library_version_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
            "schema": {
              "$ref": "#/definitions/yang-library-version"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "operationId": "data_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
            "schema": {
              "$ref": "#/definitions/data"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "data",
          "post"
        ],
        "summary": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
        "operationId": "data_post",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/data-post"
          }
        ],
        "responses": {
          "201": {
            "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Serves as a top-level container for a list of networks.",
        "description": "Serves as a top-level container for a list of networks.",
        "operationId": "data_ietf_network_state_networks_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Serves as a top-level container for a list of networks.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information.",
        "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information.",
        "operationId": "data_ietf_network_state_networks_network_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information.",
        "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/network-types": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container.",
        "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_network_types_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_network-types"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/network-types/ietf-l3-unicast-topology-state:l3-unicast-topology": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The presence of the container node indicates L3 Unicast\ntopology",
        "description": "The presence of the container node indicates L3 Unicast\ntopology",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_network_types_ietf_l3_unicast_topology_state_l3_unicast_topology_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The presence of the container node indicates L3 Unicast\ntopology",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/network-types/ietf-l3-unicast-topology-state:l3-unicast-topology/cisco-crosswork-isis-topology:isis": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Presence of this node identifies the ISIS topology type.",
        "description": "Presence of this node identifies the ISIS topology type.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_network_types_ietf_l3_unicast_topology_state_l3_unicast_topology_cisco_crosswork_isis_topology_isis_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Presence of this node identifies the ISIS topology type.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology_cisco-crosswork-isis-topology_isis"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/network-types/ietf-l3-unicast-topology-state:l3-unicast-topology/cisco-crosswork-ospf-topology:ospf": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Presence of this node identifies the OSPF topology type.",
        "description": "Presence of this node identifies the OSPF topology type.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_network_types_ietf_l3_unicast_topology_state_l3_unicast_topology_cisco_crosswork_ospf_topology_ospf_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Presence of this node identifies the OSPF topology type.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology_cisco-crosswork-ospf-topology_ospf"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/network-types/ietf-l3-unicast-topology-state:l3-unicast-topology/ietf-sr-topology-state:sr-mpls": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Its presence identifies the SR topology type.",
        "description": "Its presence identifies the SR topology type.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_network_types_ietf_l3_unicast_topology_state_l3_unicast_topology_ietf_sr_topology_state_sr_mpls_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Its presence identifies the SR topology type.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology_ietf-sr-topology-state_sr-mpls"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/network-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Identifies a network.",
        "description": "Identifies a network.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_network_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Identifies a network.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_network-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/supporting-network": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "An underlay network, used to represent layered network\ntopologies.",
        "description": "An underlay network, used to represent layered network\ntopologies.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_supporting_network_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "An underlay network, used to represent layered network\ntopologies.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_supporting-network"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/supporting-network={supporting-network-network-ref}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "An underlay network, used to represent layered network\ntopologies.",
        "description": "An underlay network, used to represent layered network\ntopologies.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_supporting_network_supporting_network_network_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/supporting-network-network-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "An underlay network, used to represent layered network\ntopologies.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_supporting-network_supporting-network-network-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/supporting-network={supporting-network-network-ref}/network-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "References the underlay network.",
        "description": "References the underlay network.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_supporting_network_supporting_network_network_ref_network_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/supporting-network-network-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "References the underlay network.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_supporting-network_supporting-network-network-ref_network-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The inventory of nodes of this network.",
        "description": "The inventory of nodes of this network.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The inventory of nodes of this network.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The inventory of nodes of this network.",
        "description": "The inventory of nodes of this network.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The inventory of nodes of this network.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/node-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Uniquely identifies a node within the containing\nnetwork.",
        "description": "Uniquely identifies a node within the containing\nnetwork.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_node_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Uniquely identifies a node within the containing\nnetwork.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_node-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/supporting-node": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure.",
        "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_supporting_node_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/supporting-node={supporting-node-network-ref},{supporting-node-node-ref}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure.",
        "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_supporting_node_supporting_node_network_ref_supporting_node_node_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/supporting-node-network-ref"
          },
          {
            "$ref": "#/parameters/supporting-node-node-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node_supporting-node-network-ref_supporting-node-node-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/supporting-node={supporting-node-network-ref},{supporting-node-node-ref}/network-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "References the underlay network of which the\nunderlay node is a part.",
        "description": "References the underlay network of which the\nunderlay node is a part.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_supporting_node_supporting_node_network_ref_supporting_node_node_ref_network_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/supporting-node-network-ref"
          },
          {
            "$ref": "#/parameters/supporting-node-node-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "References the underlay network of which the\nunderlay node is a part.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node_supporting-node-network-ref_supporting-node-node-ref_network-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/supporting-node={supporting-node-network-ref},{supporting-node-node-ref}/node-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "References the underlay node itself.",
        "description": "References the underlay node itself.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_supporting_node_supporting_node_network_ref_supporting_node_node_ref_node_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/supporting-node-network-ref"
          },
          {
            "$ref": "#/parameters/supporting-node-node-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "References the underlay node itself.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node_supporting-node-network-ref_supporting-node-node-ref_node-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface.",
        "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface.",
        "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-network-topology-state:tp-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Termination point identifier.",
        "description": "Termination point identifier.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_network_topology_state_tp_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Termination point identifier.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_tp-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-network-topology-state:supporting-termination-point": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system.",
        "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_network_topology_state_supporting_termination_point_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-network-topology-state:supporting-termination-point={ietf-network-topology-state_supporting-termination-point-network-ref},{ietf-network-topology-state_supporting-termination-point-node-ref},{ietf-network-topology-state_supporting-termination-point-tp-ref}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system.",
        "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_network_topology_state_supporting_termination_point_ietf_network_topology_state_supporting_termination_point_network_ref_ietf_network_topology_state_supporting_termination_point_node_ref_ietf_network_topology_state_supporting_termination_point_tp_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-node-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-tp-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-network-topology-state:supporting-termination-point={ietf-network-topology-state_supporting-termination-point-network-ref},{ietf-network-topology-state_supporting-termination-point-node-ref},{ietf-network-topology-state_supporting-termination-point-tp-ref}/ietf-network-topology-state:network-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf identifies in which topology the\nsupporting termination point is present.",
        "description": "This leaf identifies in which topology the\nsupporting termination point is present.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_network_topology_state_supporting_termination_point_ietf_network_topology_state_supporting_termination_point_network_ref_ietf_network_topology_state_supporting_termination_point_node_ref_ietf_network_topology_state_supporting_termination_point_tp_ref_ietf_network_topology_state_network_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-node-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-tp-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf identifies in which topology the\nsupporting termination point is present.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref_ietf-network-topology-state_network-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-network-topology-state:supporting-termination-point={ietf-network-topology-state_supporting-termination-point-network-ref},{ietf-network-topology-state_supporting-termination-point-node-ref},{ietf-network-topology-state_supporting-termination-point-tp-ref}/ietf-network-topology-state:node-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf identifies in which node the supporting\ntermination point is present.",
        "description": "This leaf identifies in which node the supporting\ntermination point is present.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_network_topology_state_supporting_termination_point_ietf_network_topology_state_supporting_termination_point_network_ref_ietf_network_topology_state_supporting_termination_point_node_ref_ietf_network_topology_state_supporting_termination_point_tp_ref_ietf_network_topology_state_node_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-node-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-tp-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf identifies in which node the supporting\ntermination point is present.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref_ietf-network-topology-state_node-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-network-topology-state:supporting-termination-point={ietf-network-topology-state_supporting-termination-point-network-ref},{ietf-network-topology-state_supporting-termination-point-node-ref},{ietf-network-topology-state_supporting-termination-point-tp-ref}/ietf-network-topology-state:tp-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Reference to the underlay node (the underlay node must\nbe in a different topology).",
        "description": "Reference to the underlay node (the underlay node must\nbe in a different topology).",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_network_topology_state_supporting_termination_point_ietf_network_topology_state_supporting_termination_point_network_ref_ietf_network_topology_state_supporting_termination_point_node_ref_ietf_network_topology_state_supporting_termination_point_tp_ref_ietf_network_topology_state_tp_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-node-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-termination-point-tp-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the underlay node (the underlay node must\nbe in a different topology).",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref_ietf-network-topology-state_tp-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Contains termination point attributes",
        "description": "Contains termination point attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_l3_unicast_topology_state_l3_termination_point_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains termination point attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-l3-unicast-topology-state:l3-termination-point-attributes/ietf-l3-unicast-topology-state:ip-address": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "IPv4 or IPv6 address.",
        "description": "IPv4 or IPv6 address.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_l3_unicast_topology_state_l3_termination_point_attributes_ietf_l3_unicast_topology_state_ip_address_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "IPv4 or IPv6 address.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_ip-address"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-l3-unicast-topology-state:l3-termination-point-attributes/ietf-l3-unicast-topology-state:ip-address={ietf-l3-unicast-topology-state_ip-address-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "IPv4 or IPv6 address.",
        "description": "IPv4 or IPv6 address.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_l3_unicast_topology_state_l3_termination_point_attributes_ietf_l3_unicast_topology_state_ip_address_ietf_l3_unicast_topology_state_ip_address_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_ip-address-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "IPv4 or IPv6 address.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_ip-address_ietf-l3-unicast-topology-state_ip-address-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-l3-unicast-topology-state:l3-termination-point-attributes/ietf-l3-unicast-topology-state:unnumbered-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Unnumbered interface identifier.\nThe identifier will correspond to the ifIndex value\nof the interface, i.e., the ifIndex value of the\nifEntry that represents the interface in\nimplementations where the Interfaces Group MIB\n(RFC 2863) is supported.",
        "description": "Unnumbered interface identifier.\nThe identifier will correspond to the ifIndex value\nof the interface, i.e., the ifIndex value of the\nifEntry that represents the interface in\nimplementations where the Interfaces Group MIB\n(RFC 2863) is supported.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_l3_unicast_topology_state_l3_termination_point_attributes_ietf_l3_unicast_topology_state_unnumbered_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Unnumbered interface identifier.\nThe identifier will correspond to the ifIndex value\nof the interface, i.e., the ifIndex value of the\nifEntry that represents the interface in\nimplementations where the Interfaces Group MIB\n(RFC 2863) is supported.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_unnumbered-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-network-topology-state:termination-point={ietf-network-topology-state_termination-point-tp-id}/ietf-l3-unicast-topology-state:l3-termination-point-attributes/ietf-l3-unicast-topology-state:interface-name": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Name of the interface.  The name can (but does not\nhave to) correspond to an interface reference of a\ncontaining node's interface, i.e., the path name of a\ncorresponding interface data node on the containing\nnode reminiscent of data type interface-ref defined\nin RFC 8343. It should be noted that data type\ninterface-ref of RFC 8343 cannot be used directly,\nas this data type is used to reference an interface\nin a datastore of a single node in the network, not\nto uniquely reference interfaces across a network.",
        "description": "Name of the interface.  The name can (but does not\nhave to) correspond to an interface reference of a\ncontaining node's interface, i.e., the path name of a\ncorresponding interface data node on the containing\nnode reminiscent of data type interface-ref defined\nin RFC 8343. It should be noted that data type\ninterface-ref of RFC 8343 cannot be used directly,\nas this data type is used to reference an interface\nin a datastore of a single node in the network, not\nto uniquely reference interfaces across a network.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_network_topology_state_termination_point_ietf_network_topology_state_termination_point_tp_id_ietf_l3_unicast_topology_state_l3_termination_point_attributes_ietf_l3_unicast_topology_state_interface_name_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_termination-point-tp-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Name of the interface.  The name can (but does not\nhave to) correspond to an interface reference of a\ncontaining node's interface, i.e., the path name of a\ncorresponding interface data node on the containing\nnode reminiscent of data type interface-ref defined\nin RFC 8343. It should be noted that data type\ninterface-ref of RFC 8343 cannot be used directly,\nas this data type is used to reference an interface\nin a datastore of a single node in the network, not\nto uniquely reference interfaces across a network.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_interface-name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Contains node attributes",
        "description": "Contains node attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains node attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:name": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Node name",
        "description": "Node name",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_name_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Node name",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:flag": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Node flags",
        "description": "Node flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_flag_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Node flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_flag"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:flag={ietf-l3-unicast-topology-state_flag-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Node flags",
        "description": "Node flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_flag_ietf_l3_unicast_topology_state_flag_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_flag-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Node flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:router-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Router-id for the node",
        "description": "Router-id for the node",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_router_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Router-id for the node",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_router-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:router-id={ietf-l3-unicast-topology-state_router-id-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Router-id for the node",
        "description": "Router-id for the node",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_router_id_ietf_l3_unicast_topology_state_router_id_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_router-id-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Router-id for the node",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_router-id_ietf-l3-unicast-topology-state_router-id-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "A list of prefixes along with their attributes",
        "description": "A list of prefixes along with their attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prefixes along with their attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "A list of prefixes along with their attributes",
        "description": "A list of prefixes along with their attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prefixes along with their attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-l3-unicast-topology-state:prefix": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "IP prefix value",
        "description": "IP prefix value",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_l3_unicast_topology_state_prefix_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "IP prefix value",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_prefix"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-l3-unicast-topology-state:metric": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Prefix metric",
        "description": "Prefix metric",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_l3_unicast_topology_state_metric_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Prefix metric",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_metric"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-l3-unicast-topology-state:flag": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Prefix flags",
        "description": "Prefix flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_l3_unicast_topology_state_flag_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Prefix flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_flag"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-l3-unicast-topology-state:flag={ietf-l3-unicast-topology-state_flag-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Prefix flags",
        "description": "Prefix flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_l3_unicast_topology_state_flag_ietf_l3_unicast_topology_state_flag_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_flag-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Prefix flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Containing SR attributes for a prefix.",
        "description": "Containing SR attributes for a prefix.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Containing SR attributes for a prefix.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:value-type": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf defines how value must be interpreted.",
        "description": "This leaf defines how value must be interpreted.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_value_type_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf defines how value must be interpreted.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_value-type"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:start-sid": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Value associated with prefix. The value must be\ninterpreted in the context of value-type.",
        "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_start_sid_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_start-sid"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:range": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Indicates how many SIDs can be allocated.",
        "description": "Indicates how many SIDs can be allocated.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_range_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates how many SIDs can be allocated.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_range"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:algorithm": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Prefix-sid algorithm.",
        "description": "Prefix-sid algorithm.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_algorithm_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Prefix-sid algorithm.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_algorithm"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:last-hop-behavior": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Configure last hop behavior.",
        "description": "Configure last hop behavior.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_last_hop_behavior_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Configure last hop behavior.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_last-hop-behavior"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-local": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the SID is local.",
        "description": "'true' if the SID is local.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_local_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the SID is local.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-local"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-node": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address.",
        "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_node_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-node"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-l3-unicast-topology-state:prefix={ietf-l3-unicast-topology-state_prefix-prefix}/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-readvertisment": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution.",
        "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_l3_unicast_topology_state_prefix_ietf_l3_unicast_topology_state_prefix_prefix_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_readvertisment_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_prefix-prefix"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-readvertisment"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-isis-topology:isis-node-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS attributes for a specific node",
        "description": "ISIS attributes for a specific node",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_isis_topology_isis_node_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS attributes for a specific node",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-isis-topology:isis-node-attributes/cisco-crosswork-isis-topology:system-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS System ID, a 6 octet numerical value",
        "description": "ISIS System ID, a 6 octet numerical value",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_isis_topology_isis_node_attributes_cisco_crosswork_isis_topology_system_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS System ID, a 6 octet numerical value",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_system-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-isis-topology:isis-node-attributes/cisco-crosswork-isis-topology:area": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
        "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_isis_topology_isis_node_attributes_cisco_crosswork_isis_topology_area_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_area"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-isis-topology:isis-node-attributes/cisco-crosswork-isis-topology:area={cisco-crosswork-isis-topology_area-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
        "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_isis_topology_isis_node_attributes_cisco_crosswork_isis_topology_area_cisco_crosswork_isis_topology_area_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/cisco-crosswork-isis-topology_area-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_area_cisco-crosswork-isis-topology_area-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-isis-topology:isis-node-attributes/cisco-crosswork-isis-topology:level": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Level 1, Level 2 or Level 1 & 2",
        "description": "Level 1, Level 2 or Level 1 & 2",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_isis_topology_isis_node_attributes_cisco_crosswork_isis_topology_level_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Level 1, Level 2 or Level 1 & 2",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_level"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-ospf-topology:ospf-node-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Contains node's OSPF attributes",
        "description": "Contains node's OSPF attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_ospf_topology_ospf_node_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains node's OSPF attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-ospf-topology:ospf-node-attributes/cisco-crosswork-ospf-topology:ospf-router-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network",
        "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_ospf_topology_ospf_node_attributes_cisco_crosswork_ospf_topology_ospf_router_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes_cisco-crosswork-ospf-topology_ospf-router-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-ospf-topology:ospf-node-attributes/cisco-crosswork-ospf-topology:area-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
        "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_ospf_topology_ospf_node_attributes_cisco_crosswork_ospf_topology_area_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes_cisco-crosswork-ospf-topology_area-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/cisco-crosswork-ospf-topology:ospf-node-attributes/cisco-crosswork-ospf-topology:area-id={cisco-crosswork-ospf-topology_area-id-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
        "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_cisco_crosswork_ospf_topology_ospf_node_attributes_cisco_crosswork_ospf_topology_area_id_cisco_crosswork_ospf_topology_area_id_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/cisco-crosswork-ospf-topology_area-id-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes_cisco-crosswork-ospf-topology_area-id_cisco-crosswork-ospf-topology_area-id-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Containing SR attributes.",
        "description": "Containing SR attributes.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Containing SR attributes.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of global blocks to be advertised.",
        "description": "List of global blocks to be advertised.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of global blocks to be advertised.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb={ietf-sr-topology-state_srgb-lower-bound},{ietf-sr-topology-state_srgb-upper-bound}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of global blocks to be advertised.",
        "description": "List of global blocks to be advertised.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_ietf_sr_topology_state_srgb_lower_bound_ietf_sr_topology_state_srgb_upper_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of global blocks to be advertised.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb={ietf-sr-topology-state_srgb-lower-bound},{ietf-sr-topology-state_srgb-upper-bound}/ietf-sr-topology-state:lower-bound": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Lower value in the label range.",
        "description": "Lower value in the label range.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_ietf_sr_topology_state_srgb_lower_bound_ietf_sr_topology_state_srgb_upper_bound_ietf_sr_topology_state_lower_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Lower value in the label range.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_lower-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb={ietf-sr-topology-state_srgb-lower-bound},{ietf-sr-topology-state_srgb-upper-bound}/ietf-sr-topology-state:upper-bound": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Upper value in the label range.",
        "description": "Upper value in the label range.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_ietf_sr_topology_state_srgb_lower_bound_ietf_sr_topology_state_srgb_upper_bound_ietf_sr_topology_state_upper_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Upper value in the label range.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_upper-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srlb": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of SRLBs.",
        "description": "List of SRLBs.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srlb_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of SRLBs.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srlb={ietf-sr-topology-state_srlb-lower-bound},{ietf-sr-topology-state_srlb-upper-bound}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of SRLBs.",
        "description": "List of SRLBs.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srlb_ietf_sr_topology_state_srlb_lower_bound_ietf_sr_topology_state_srlb_upper_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srlb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srlb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of SRLBs.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb_ietf-sr-topology-state_srlb-lower-bound_ietf-sr-topology-state_srlb-upper-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srlb={ietf-sr-topology-state_srlb-lower-bound},{ietf-sr-topology-state_srlb-upper-bound}/ietf-sr-topology-state:lower-bound": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Lower value in the label range.",
        "description": "Lower value in the label range.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srlb_ietf_sr_topology_state_srlb_lower_bound_ietf_sr_topology_state_srlb_upper_bound_ietf_sr_topology_state_lower_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srlb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srlb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Lower value in the label range.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb_ietf-sr-topology-state_srlb-lower-bound_ietf-sr-topology-state_srlb-upper-bound_ietf-sr-topology-state_lower-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srlb={ietf-sr-topology-state_srlb-lower-bound},{ietf-sr-topology-state_srlb-upper-bound}/ietf-sr-topology-state:upper-bound": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Upper value in the label range.",
        "description": "Upper value in the label range.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srlb_ietf_sr_topology_state_srlb_lower_bound_ietf_sr_topology_state_srlb_upper_bound_ietf_sr_topology_state_upper_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srlb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srlb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Upper value in the label range.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb_ietf-sr-topology-state_srlb-lower-bound_ietf-sr-topology-state_srlb-upper-bound_ietf-sr-topology-state_upper-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:node-capabilities": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Shows the SR capability of the node.",
        "description": "Shows the SR capability of the node.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_node_capabilities_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Shows the SR capability of the node.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:node-capabilities/ietf-sr-topology-state:transport-planes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of supported transport planes.",
        "description": "List of supported transport planes.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_node_capabilities_ietf_sr_topology_state_transport_planes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported transport planes.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_transport-planes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:node-capabilities/ietf-sr-topology-state:transport-planes={ietf-sr-topology-state_transport-planes-transport-plane}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of supported transport planes.",
        "description": "List of supported transport planes.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_node_capabilities_ietf_sr_topology_state_transport_planes_ietf_sr_topology_state_transport_planes_transport_plane_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_transport-planes-transport-plane"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported transport planes.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_transport-planes_ietf-sr-topology-state_transport-planes-transport-plane"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:node-capabilities/ietf-sr-topology-state:transport-planes={ietf-sr-topology-state_transport-planes-transport-plane}/ietf-sr-topology-state:transport-plane": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Transport plane supported",
        "description": "Transport plane supported",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_node_capabilities_ietf_sr_topology_state_transport_planes_ietf_sr_topology_state_transport_planes_transport_plane_ietf_sr_topology_state_transport_plane_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_transport-planes-transport-plane"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Transport plane supported",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_transport-planes_ietf-sr-topology-state_transport-planes-transport-plane_ietf-sr-topology-state_transport-plane"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:node-capabilities/ietf-sr-topology-state:entropy-readable-label-depth": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Maximum label stack depth that a router can read.",
        "description": "Maximum label stack depth that a router can read.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_node_capabilities_ietf_sr_topology_state_entropy_readable_label_depth_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Maximum label stack depth that a router can read.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_entropy-readable-label-depth"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:msd": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Node MSD is the lowest MSD supported by the node.",
        "description": "Node MSD is the lowest MSD supported by the node.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_msd_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Node MSD is the lowest MSD supported by the node.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_msd"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Indicates the type of the information source.",
        "description": "Indicates the type of the information source.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates the type of the information source.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source-instance": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The name indicating the instance of the information\nsource.",
        "description": "The name indicating the instance of the information\nsource.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_instance_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The name indicating the instance of the information\nsource.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-instance"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source-state": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The container contains state attributes related to\nthe information source.",
        "description": "The container contains state attributes related to\nthe information source.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_state_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The container contains state attributes related to\nthe information source.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/node={node-node-id}/ietf-l3-unicast-topology-state:l3-node-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source-state/ietf-sr-topology-state:credibility-preference": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable.",
        "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_node_node_node_id_ietf_l3_unicast_topology_state_l3_node_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_state_ietf_sr_topology_state_credibility_preference_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/node-node-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state_ietf-sr-topology-state_credibility-preference"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link.",
        "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link.",
        "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:source": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This container holds the logical source of a particular\nlink.",
        "description": "This container holds the logical source of a particular\nlink.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_source_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This container holds the logical source of a particular\nlink.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_source"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:source/ietf-network-topology-state:source-node": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Source node identifier.  Must be in the same topology.",
        "description": "Source node identifier.  Must be in the same topology.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_source_ietf_network_topology_state_source_node_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Source node identifier.  Must be in the same topology.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_source_ietf-network-topology-state_source-node"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:source/ietf-network-topology-state:source-tp": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This termination point is located within the source node\nand terminates the link.",
        "description": "This termination point is located within the source node\nand terminates the link.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_source_ietf_network_topology_state_source_tp_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This termination point is located within the source node\nand terminates the link.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_source_ietf-network-topology-state_source-tp"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:destination": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This container holds the logical destination of a\nparticular link.",
        "description": "This container holds the logical destination of a\nparticular link.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_destination_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This container holds the logical destination of a\nparticular link.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_destination"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:destination/ietf-network-topology-state:dest-node": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Destination node identifier.  Must be in the same\nnetwork.",
        "description": "Destination node identifier.  Must be in the same\nnetwork.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_destination_ietf_network_topology_state_dest_node_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Destination node identifier.  Must be in the same\nnetwork.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_destination_ietf-network-topology-state_dest-node"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:destination/ietf-network-topology-state:dest-tp": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This termination point is located within the\ndestination node and terminates the link.",
        "description": "This termination point is located within the\ndestination node and terminates the link.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_destination_ietf_network_topology_state_dest_tp_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This termination point is located within the\ndestination node and terminates the link.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_destination_ietf-network-topology-state_dest-tp"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:link-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs.",
        "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_link_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_link-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:supporting-link": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Identifies the link or links on which this link depends.",
        "description": "Identifies the link or links on which this link depends.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_supporting_link_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Identifies the link or links on which this link depends.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:supporting-link={ietf-network-topology-state_supporting-link-network-ref},{ietf-network-topology-state_supporting-link-link-ref}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Identifies the link or links on which this link depends.",
        "description": "Identifies the link or links on which this link depends.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_supporting_link_ietf_network_topology_state_supporting_link_network_ref_ietf_network_topology_state_supporting_link_link_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-link-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-link-link-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Identifies the link or links on which this link depends.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link_ietf-network-topology-state_supporting-link-network-ref_ietf-network-topology-state_supporting-link-link-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:supporting-link={ietf-network-topology-state_supporting-link-network-ref},{ietf-network-topology-state_supporting-link-link-ref}/ietf-network-topology-state:network-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf identifies in which underlay topology\nthe supporting link is present.",
        "description": "This leaf identifies in which underlay topology\nthe supporting link is present.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_supporting_link_ietf_network_topology_state_supporting_link_network_ref_ietf_network_topology_state_supporting_link_link_ref_ietf_network_topology_state_network_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-link-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-link-link-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf identifies in which underlay topology\nthe supporting link is present.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link_ietf-network-topology-state_supporting-link-network-ref_ietf-network-topology-state_supporting-link-link-ref_ietf-network-topology-state_network-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-network-topology-state:supporting-link={ietf-network-topology-state_supporting-link-network-ref},{ietf-network-topology-state_supporting-link-link-ref}/ietf-network-topology-state:link-ref": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed.",
        "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_network_topology_state_supporting_link_ietf_network_topology_state_supporting_link_network_ref_ietf_network_topology_state_supporting_link_link_ref_ietf_network_topology_state_link_ref_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-link-network-ref"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_supporting-link-link-ref"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link_ietf-network-topology-state_supporting-link-network-ref_ietf-network-topology-state_supporting-link-link-ref_ietf-network-topology-state_link-ref"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Contains link attributes",
        "description": "Contains link attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains link attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-l3-unicast-topology-state:name": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Link Name",
        "description": "Link Name",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_l3_unicast_topology_state_name_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Link Name",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-l3-unicast-topology-state:flag": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Link flags",
        "description": "Link flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_l3_unicast_topology_state_flag_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Link flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_flag"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-l3-unicast-topology-state:flag={ietf-l3-unicast-topology-state_flag-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Link flags",
        "description": "Link flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_l3_unicast_topology_state_flag_ietf_l3_unicast_topology_state_flag_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_flag-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Link flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-l3-unicast-topology-state:metric1": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Link Metric 1",
        "description": "Link Metric 1",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_l3_unicast_topology_state_metric1_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Link Metric 1",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_metric1"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-l3-unicast-topology-state:metric2": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Link Metric 2",
        "description": "Link Metric 2",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_l3_unicast_topology_state_metric2_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Link Metric 2",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_metric2"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-isis-topology:isis-link-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS link/ adjacency attributes",
        "description": "ISIS link/ adjacency attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_isis_topology_isis_link_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS link/ adjacency attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-isis-topology:isis-link-attributes/cisco-crosswork-isis-topology:net": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS Network Entity Title which identifies an instance of ISIS",
        "description": "ISIS Network Entity Title which identifies an instance of ISIS",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_isis_topology_isis_link_attributes_cisco_crosswork_isis_topology_net_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS Network Entity Title which identifies an instance of ISIS",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_net"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-isis-topology:isis-link-attributes/cisco-crosswork-isis-topology:net/cisco-crosswork-isis-topology:system-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS System ID which is a 6 octet numerical value",
        "description": "ISIS System ID which is a 6 octet numerical value",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_isis_topology_isis_link_attributes_cisco_crosswork_isis_topology_net_cisco_crosswork_isis_topology_system_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS System ID which is a 6 octet numerical value",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_net_cisco-crosswork-isis-topology_system-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-isis-topology:isis-link-attributes/cisco-crosswork-isis-topology:net/cisco-crosswork-isis-topology:area": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS Area address. Numerical value of 1 to 13 octets",
        "description": "ISIS Area address. Numerical value of 1 to 13 octets",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_isis_topology_isis_link_attributes_cisco_crosswork_isis_topology_net_cisco_crosswork_isis_topology_area_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS Area address. Numerical value of 1 to 13 octets",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_net_cisco-crosswork-isis-topology_area"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-isis-topology:isis-link-attributes/cisco-crosswork-isis-topology:level": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS level of the link/ adjacency",
        "description": "ISIS level of the link/ adjacency",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_isis_topology_isis_link_attributes_cisco_crosswork_isis_topology_level_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS level of the link/ adjacency",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_level"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-ospf-topology:ospf-link-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Containing OSPF link attributes",
        "description": "Containing OSPF link attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_ospf_topology_ospf_link_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Containing OSPF link attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-ospf-topology_ospf-link-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-ospf-topology:ospf-link-attributes/cisco-crosswork-ospf-topology:ospf-router-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "OSPF router ID, which is an IPv4 address,\nof the local host",
        "description": "OSPF router ID, which is an IPv4 address,\nof the local host",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_ospf_topology_ospf_link_attributes_cisco_crosswork_ospf_topology_ospf_router_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "OSPF router ID, which is an IPv4 address,\nof the local host",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-ospf-topology_ospf-link-attributes_cisco-crosswork-ospf-topology_ospf-router-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/cisco-crosswork-ospf-topology:ospf-link-attributes/cisco-crosswork-ospf-topology:area-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "OSPF area ID, represented as an IPv4 address value",
        "description": "OSPF area ID, represented as an IPv4 address value",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_cisco_crosswork_ospf_topology_ospf_link_attributes_cisco_crosswork_ospf_topology_area_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "OSPF area ID, represented as an IPv4 address value",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-ospf-topology_ospf-link-attributes_cisco-crosswork-ospf-topology_area-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Containing SR attributes.",
        "description": "Containing SR attributes.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Containing SR attributes.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:value-type": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf defines how value must be interpreted.",
        "description": "This leaf defines how value must be interpreted.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_value_type_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf defines how value must be interpreted.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_value-type"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:sid": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context.",
        "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_sid_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_sid"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:advertise-protection": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "If set, the Adj-SID refers to an\nadjacency being protected.",
        "description": "If set, the Adj-SID refers to an\nadjacency being protected.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_advertise_protection_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "If set, the Adj-SID refers to an\nadjacency being protected.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_advertise-protection"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-local": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the SID is local.",
        "description": "'true' if the SID is local.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_local_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the SID is local.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-local"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:msd": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "SID depth of the interface associated with the link.",
        "description": "SID depth of the interface associated with the link.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_msd_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "SID depth of the interface associated with the link.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_msd"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:address-family": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "This leaf defines the F-Flag (Address-Family flag) of the\nSID.",
        "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_address_family_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_address-family"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-backup": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the SID is a backup.",
        "description": "'true' if the SID is a backup.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_backup_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the SID is a backup.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-backup"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-part-of-set": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the SID is part of a set.",
        "description": "'true' if the SID is part of a set.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_part_of_set_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the SID is part of a set.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-part-of-set"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-persistent": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if the SID is persistently allocated.",
        "description": "'true' if the SID is persistently allocated.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_persistent_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if the SID is persistently allocated.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-persistent"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:is-on-lan": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "'true' if on a lan.",
        "description": "'true' if on a lan.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_is_on_lan_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "'true' if on a lan.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-on-lan"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Indicates the type of the information source.",
        "description": "Indicates the type of the information source.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates the type of the information source.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source-instance": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The name indicating the instance of the information\nsource.",
        "description": "The name indicating the instance of the information\nsource.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_instance_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The name indicating the instance of the information\nsource.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-instance"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source-state": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The container contains state attributes related to\nthe information source.",
        "description": "The container contains state attributes related to\nthe information source.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_state_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The container contains state attributes related to\nthe information source.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-network-topology-state:link={ietf-network-topology-state_link-link-id}/ietf-l3-unicast-topology-state:l3-link-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:information-source-state/ietf-sr-topology-state:credibility-preference": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable.",
        "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_network_topology_state_link_ietf_network_topology_state_link_link_id_ietf_l3_unicast_topology_state_l3_link_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_information_source_state_ietf_sr_topology_state_credibility_preference_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-network-topology-state_link-link-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state_ietf-sr-topology-state_credibility-preference"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Contains topology attributes",
        "description": "Contains topology attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains topology attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-l3-unicast-topology-state:name": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Name of the topology",
        "description": "Name of the topology",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_l3_unicast_topology_state_name_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Name of the topology",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-l3-unicast-topology-state_name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-l3-unicast-topology-state:flag": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Topology flags",
        "description": "Topology flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_l3_unicast_topology_state_flag_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Topology flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-l3-unicast-topology-state_flag"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-l3-unicast-topology-state:flag={ietf-l3-unicast-topology-state_flag-id}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Topology flags",
        "description": "Topology flags",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_l3_unicast_topology_state_flag_ietf_l3_unicast_topology_state_flag_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-l3-unicast-topology-state_flag-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Topology flags",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/cisco-crosswork-isis-topology:isis-topology-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks??",
        "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks??",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_cisco_crosswork_isis_topology_isis_topology_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks??",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-isis-topology_isis-topology-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/cisco-crosswork-isis-topology:isis-topology-attributes/cisco-crosswork-isis-topology:area": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "ISIS Area address. Numerical value of 1 to 13 octets",
        "description": "ISIS Area address. Numerical value of 1 to 13 octets",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_cisco_crosswork_isis_topology_isis_topology_attributes_cisco_crosswork_isis_topology_area_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "ISIS Area address. Numerical value of 1 to 13 octets",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-isis-topology_isis-topology-attributes_cisco-crosswork-isis-topology_area"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/cisco-crosswork-ospf-topology:ospf-topology-attributes": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "OSPF topology attributes",
        "description": "OSPF topology attributes",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_cisco_crosswork_ospf_topology_ospf_topology_attributes_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "OSPF topology attributes",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-ospf-topology_ospf-topology-attributes"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/cisco-crosswork-ospf-topology:ospf-topology-attributes/cisco-crosswork-ospf-topology:area-id": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains??",
        "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains??",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_cisco_crosswork_ospf_topology_ospf_topology_attributes_cisco_crosswork_ospf_topology_area_id_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains??",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-ospf-topology_ospf-topology-attributes_cisco-crosswork-ospf-topology_area-id"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-sr-topology-state:sr": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Containing SR attributes.",
        "description": "Containing SR attributes.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_sr_topology_state_sr_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Containing SR attributes.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of global blocks to be advertised.",
        "description": "List of global blocks to be advertised.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of global blocks to be advertised.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb={ietf-sr-topology-state_srgb-lower-bound},{ietf-sr-topology-state_srgb-upper-bound}": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "List of global blocks to be advertised.",
        "description": "List of global blocks to be advertised.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_ietf_sr_topology_state_srgb_lower_bound_ietf_sr_topology_state_srgb_upper_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "List of global blocks to be advertised.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb={ietf-sr-topology-state_srgb-lower-bound},{ietf-sr-topology-state_srgb-upper-bound}/ietf-sr-topology-state:lower-bound": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Lower value in the label range.",
        "description": "Lower value in the label range.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_ietf_sr_topology_state_srgb_lower_bound_ietf_sr_topology_state_srgb_upper_bound_ietf_sr_topology_state_lower_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Lower value in the label range.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_lower-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/data/ietf-network-state:networks/network={network-network-id}/ietf-l3-unicast-topology-state:l3-topology-attributes/ietf-sr-topology-state:sr/ietf-sr-topology-state:srgb={ietf-sr-topology-state_srgb-lower-bound},{ietf-sr-topology-state_srgb-upper-bound}/ietf-sr-topology-state:upper-bound": {
      "get": {
        "tags": [
          "data",
          "get"
        ],
        "summary": "Upper value in the label range.",
        "description": "Upper value in the label range.",
        "operationId": "data_ietf_network_state_networks_network_network_network_id_ietf_l3_unicast_topology_state_l3_topology_attributes_ietf_sr_topology_state_sr_ietf_sr_topology_state_srgb_ietf_sr_topology_state_srgb_lower_bound_ietf_sr_topology_state_srgb_upper_bound_ietf_sr_topology_state_upper_bound_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/network-network-id"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-lower-bound"
          },
          {
            "$ref": "#/parameters/ietf-sr-topology-state_srgb-upper-bound"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "Upper value in the label range.",
            "schema": {
              "$ref": "#/definitions/data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_upper-bound"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "parameters": {
    "content": {
      "name": "content",
      "in": "query",
      "description": "controlling descendant nodes in response",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "config",
      "enum": [
        "config",
        "nonconfig",
        "all"
      ]
    },
    "depth": {
      "name": "depth",
      "in": "query",
      "description": "limit the depth of nodes in response",
      "required": false,
      "type": "integer",
      "format": "uint16"
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "optionally identify specific data nodes in response",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "filter": {
      "name": "filter",
      "in": "query",
      "description": "xpath expression to filter data nodes in response",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "with-defaults": {
      "name": "with-defaults",
      "in": "query",
      "description": "controlling default values in response",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "report-all",
      "enum": [
        "report-all",
        "trim",
        "explicit",
        "report-all-tagged"
      ]
    },
    "insert": {
      "name": "insert",
      "in": "query",
      "description": "controlling the order when adding new list elements",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "first",
      "enum": [
        "first",
        "last",
        "before",
        "after"
      ]
    },
    "point": {
      "name": "point",
      "in": "query",
      "description": "used to specify the insertion point",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "supporting-node-node-ref": {
      "name": "supporting-node-node-ref",
      "in": "path",
      "description": "References the underlay node itself.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "supporting-node-network-ref": {
      "name": "supporting-node-network-ref",
      "in": "path",
      "description": "References the underlay network of which the\nunderlay node is a part.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "supporting-network-network-ref": {
      "name": "supporting-network-network-ref",
      "in": "path",
      "description": "References the underlay network.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "node-node-id": {
      "name": "node-node-id",
      "in": "path",
      "description": "Uniquely identifies a node within the containing\nnetwork.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "network-network-id": {
      "name": "network-network-id",
      "in": "path",
      "description": "Identifies a network.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "ietf-sr-topology-state_transport-planes-transport-plane": {
      "name": "ietf-sr-topology-state_transport-planes-transport-plane",
      "in": "path",
      "description": "Transport plane supported",
      "required": true,
      "type": "string",
      "format": "identityref"
    },
    "ietf-sr-topology-state_srlb-upper-bound": {
      "name": "ietf-sr-topology-state_srlb-upper-bound",
      "in": "path",
      "description": "Upper value in the label range.",
      "required": true,
      "type": "integer",
      "format": "uint32"
    },
    "ietf-sr-topology-state_srlb-lower-bound": {
      "name": "ietf-sr-topology-state_srlb-lower-bound",
      "in": "path",
      "description": "Lower value in the label range.",
      "required": true,
      "type": "integer",
      "format": "uint32"
    },
    "ietf-sr-topology-state_srgb-upper-bound": {
      "name": "ietf-sr-topology-state_srgb-upper-bound",
      "in": "path",
      "description": "Upper value in the label range.",
      "required": true,
      "type": "integer",
      "format": "uint32"
    },
    "ietf-sr-topology-state_srgb-lower-bound": {
      "name": "ietf-sr-topology-state_srgb-lower-bound",
      "in": "path",
      "description": "Lower value in the label range.",
      "required": true,
      "type": "integer",
      "format": "uint32"
    },
    "ietf-network-topology-state_termination-point-tp-id": {
      "name": "ietf-network-topology-state_termination-point-tp-id",
      "in": "path",
      "description": "Termination point identifier.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "ietf-network-topology-state_supporting-termination-point-tp-ref": {
      "name": "ietf-network-topology-state_supporting-termination-point-tp-ref",
      "in": "path",
      "description": "Reference to the underlay node (the underlay node must\nbe in a different topology).",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "ietf-network-topology-state_supporting-termination-point-node-ref": {
      "name": "ietf-network-topology-state_supporting-termination-point-node-ref",
      "in": "path",
      "description": "This leaf identifies in which node the supporting\ntermination point is present.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "ietf-network-topology-state_supporting-termination-point-network-ref": {
      "name": "ietf-network-topology-state_supporting-termination-point-network-ref",
      "in": "path",
      "description": "This leaf identifies in which topology the\nsupporting termination point is present.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "ietf-network-topology-state_supporting-link-network-ref": {
      "name": "ietf-network-topology-state_supporting-link-network-ref",
      "in": "path",
      "description": "This leaf identifies in which underlay topology\nthe supporting link is present.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "ietf-network-topology-state_supporting-link-link-ref": {
      "name": "ietf-network-topology-state_supporting-link-link-ref",
      "in": "path",
      "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "ietf-network-topology-state_link-link-id": {
      "name": "ietf-network-topology-state_link-link-id",
      "in": "path",
      "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "ietf-l3-unicast-topology-state_router-id-id": {
      "name": "ietf-l3-unicast-topology-state_router-id-id",
      "in": "path",
      "description": "Router-id for the node",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "ietf-l3-unicast-topology-state_prefix-prefix": {
      "name": "ietf-l3-unicast-topology-state_prefix-prefix",
      "in": "path",
      "description": "IP prefix value",
      "required": true,
      "type": "string",
      "format": "union"
    },
    "ietf-l3-unicast-topology-state_ip-address-id": {
      "name": "ietf-l3-unicast-topology-state_ip-address-id",
      "in": "path",
      "description": "IPv4 or IPv6 address.",
      "required": true,
      "type": "string",
      "format": "union"
    },
    "ietf-l3-unicast-topology-state_flag-id": {
      "name": "ietf-l3-unicast-topology-state_flag-id",
      "in": "path",
      "description": "Node flags",
      "required": true,
      "type": "string",
      "format": "identityref"
    },
    "data-post": {
      "name": "data",
      "in": "body",
      "description": "This module defines a common base data model for a collection\nof nodes in a network.  Node definitions are further used\nin network topologies and inventories.  It represents\ninformation that either (1) is learned and automatically\npopulated or (2) results from applying network information\nthat has been configured per the 'ietf-network' data model,\nmirroring the corresponding data nodes in this data model.\nThe data model mirrors 'ietf-network' but contains only\nread-only state data.  The data model is not needed when the\nunderlying implementation infrastructure supports the Network\nManagement Datastore Architecture (NMDA).\nCopyright (c) 2018 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(https://trustee.ietf.org/license-info).\nThis version of this YANG module is part of RFC 8345;\nsee the RFC itself for full legal notices.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data-post"
      }
    },
    "cisco-crosswork-ospf-topology_area-id-id": {
      "name": "cisco-crosswork-ospf-topology_area-id-id",
      "in": "path",
      "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network??",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "cisco-crosswork-isis-topology_area-id": {
      "name": "cisco-crosswork-isis-topology_area-id",
      "in": "path",
      "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network??",
      "required": true,
      "type": "string",
      "format": "string"
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "201": {
      "description": "Created"
    },
    "204": {
      "description": "No Content"
    },
    "400": {
      "description": "Bad Request"
    },
    "401": {
      "description": "Unauthorized"
    },
    "404": {
      "description": "Not Found"
    },
    "405": {
      "description": "Method Not Allowed"
    },
    "409": {
      "description": "Conflict"
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "yang-library-version": {
      "type": "object",
      "properties": {
        "ietf-restconf:yang-library-version": {
          "type": "object",
          "description": "This leaf identifies the revision date of the 'ietf-yang-library' YANG module that is implemented by this server. See RESTCONF RFC 8040 for further information.",
          "x-yang": {
            "type": "leaf"
          },
          "properties": {
          }
        }
      }
    },
    "root": {
      "type": "object",
      "properties": {
        "ietf-restconf:restconf": {
          "type": "object",
          "x-yang": {
            "type": "root"
          },
          "description": "This is the RESTCONF root resource for the RESTCONF datastore and operation resources. See RESTCONF RFC 8040 for further information.",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
              }
            },
            "operations": {
              "type": "object",
              "properties": {
              }
            },
            "yang-library-version": {
              "type": "string"
            }
          }
        }
      }
    },
    "operations": {
      "type": "object",
      "properties": {
        "ietf-restconf:operations": {
          "type": "object",
          "x-yang": {
            "type": "operations"
          },
          "description": "This resource is a container that provides access to the data-model-specific RPC operations supported by the server. See RESTCONF RFC 8040 for further information.",
          "properties": {

          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_supporting-network_supporting-network-network-ref_network-ref": {
      "type": "object",
      "properties": {
        "ietf-network-state:network-ref": {
          "description": "References the underlay network. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_supporting-network_supporting-network-network-ref": {
      "type": "object",
      "properties": {
        "ietf-network-state:supporting-network": {
          "type": "array",
          "description": "An underlay network, used to represent layered network\ntopologies. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "network-ref": {
                "description": "References the underlay network. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_supporting-network": {
      "type": "object",
      "properties": {
        "ietf-network-state:supporting-network": {
          "type": "array",
          "description": "An underlay network, used to represent layered network\ntopologies. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "network-ref": {
                "description": "References the underlay network. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node_supporting-node-network-ref_supporting-node-node-ref_node-ref": {
      "type": "object",
      "properties": {
        "ietf-network-state:node-ref": {
          "description": "References the underlay node itself. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node_supporting-node-network-ref_supporting-node-node-ref_network-ref": {
      "type": "object",
      "properties": {
        "ietf-network-state:network-ref": {
          "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node_supporting-node-network-ref_supporting-node-node-ref": {
      "type": "object",
      "properties": {
        "ietf-network-state:supporting-node": {
          "type": "array",
          "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "network-ref": {
                "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "node-ref": {
                "description": "References the underlay node itself. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_supporting-node": {
      "type": "object",
      "properties": {
        "ietf-network-state:supporting-node": {
          "type": "array",
          "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "network-ref": {
                "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "node-ref": {
                "description": "References the underlay node itself. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_node-id": {
      "type": "object",
      "properties": {
        "ietf-network-state:node-id": {
          "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_tp-id": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:tp-id": {
          "description": "Termination point identifier. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref_ietf-network-topology-state_tp-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:tp-ref": {
          "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref_ietf-network-topology-state_node-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:node-ref": {
          "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref_ietf-network-topology-state_network-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:network-ref": {
          "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point_ietf-network-topology-state_supporting-termination-point-network-ref_ietf-network-topology-state_supporting-termination-point-node-ref_ietf-network-topology-state_supporting-termination-point-tp-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:supporting-termination-point": {
          "type": "array",
          "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:network-ref": {
                "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "ietf-network-topology-state:node-ref": {
                "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "ietf-network-topology-state:tp-ref": {
                "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-network-topology-state_supporting-termination-point": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:supporting-termination-point": {
          "type": "array",
          "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:network-ref": {
                "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "ietf-network-topology-state:node-ref": {
                "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "ietf-network-topology-state:tp-ref": {
                "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_unnumbered-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:unnumbered-id": {
          "description": "Unnumbered interface identifier.\nThe identifier will correspond to the ifIndex value\nof the interface, i.e., the ifIndex value of the\nifEntry that represents the interface in\nimplementations where the Interfaces Group MIB\n(RFC 2863) is supported. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_ip-address_ietf-l3-unicast-topology-state_ip-address-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:ip-address": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "IPv4 or IPv6 address. (leaf-list)",
            "type": "string",
            "format": "union"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_ip-address": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:ip-address": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "IPv4 or IPv6 address. (leaf-list)",
            "type": "string",
            "format": "union"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes_ietf-l3-unicast-topology-state_interface-name": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:interface-name": {
          "description": "Name of the interface.  The name can (but does not\nhave to) correspond to an interface reference of a\ncontaining node's interface, i.e., the path name of a\ncorresponding interface data node on the containing\nnode reminiscent of data type interface-ref defined\nin RFC 8343. It should be noted that data type\ninterface-ref of RFC 8343 cannot be used directly,\nas this data type is used to reference an interface\nin a datastore of a single node in the network, not\nto uniquely reference interfaces across a network. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id_ietf-l3-unicast-topology-state_l3-termination-point-attributes": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
          "description": "Contains termination point attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-l3-unicast-topology-state:ip-address": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "IPv4 or IPv6 address. (leaf-list)",
                "type": "string",
                "format": "union"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point_ietf-network-topology-state_termination-point-tp-id": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:termination-point": {
          "type": "array",
          "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:tp-id": {
                "description": "Termination point identifier. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "ietf-network-topology-state:supporting-termination-point": {
                "type": "array",
                "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:network-ref": {
                      "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "ietf-network-topology-state:node-ref": {
                      "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "ietf-network-topology-state:tp-ref": {
                      "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                "description": "Contains termination point attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:ip-address": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "IPv4 or IPv6 address. (leaf-list)",
                      "type": "string",
                      "format": "union"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-network-topology-state_termination-point": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:termination-point": {
          "type": "array",
          "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:tp-id": {
                "description": "Termination point identifier. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "ietf-network-topology-state:supporting-termination-point": {
                "type": "array",
                "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:network-ref": {
                      "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "ietf-network-topology-state:node-ref": {
                      "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "ietf-network-topology-state:tp-ref": {
                      "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                "description": "Contains termination point attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:ip-address": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "IPv4 or IPv6 address. (leaf-list)",
                      "type": "string",
                      "format": "union"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb_ietf-sr-topology-state_srlb-lower-bound_ietf-sr-topology-state_srlb-upper-bound_ietf-sr-topology-state_upper-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:upper-bound": {
          "description": "Upper value in the label range. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb_ietf-sr-topology-state_srlb-lower-bound_ietf-sr-topology-state_srlb-upper-bound_ietf-sr-topology-state_lower-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:lower-bound": {
          "description": "Lower value in the label range. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb_ietf-sr-topology-state_srlb-lower-bound_ietf-sr-topology-state_srlb-upper-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:srlb": {
          "type": "array",
          "description": "List of SRLBs. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:lower-bound": {
                "description": "Lower value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-sr-topology-state:upper-bound": {
                "description": "Upper value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srlb": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:srlb": {
          "type": "array",
          "description": "List of SRLBs. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:lower-bound": {
                "description": "Lower value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-sr-topology-state:upper-bound": {
                "description": "Upper value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_upper-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:upper-bound": {
          "description": "Upper value in the label range. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_lower-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:lower-bound": {
          "description": "Lower value in the label range. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:srgb": {
          "type": "array",
          "description": "List of global blocks to be advertised. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:lower-bound": {
                "description": "Lower value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-sr-topology-state:upper-bound": {
                "description": "Upper value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:srgb": {
          "type": "array",
          "description": "List of global blocks to be advertised. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:lower-bound": {
                "description": "Lower value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-sr-topology-state:upper-bound": {
                "description": "Upper value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_transport-planes_ietf-sr-topology-state_transport-planes-transport-plane_ietf-sr-topology-state_transport-plane": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:transport-plane": {
          "description": "Transport plane supported (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_transport-planes_ietf-sr-topology-state_transport-planes-transport-plane": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:transport-planes": {
          "type": "array",
          "description": "List of supported transport planes. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:transport-plane": {
                "description": "Transport plane supported (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_transport-planes": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:transport-planes": {
          "type": "array",
          "description": "List of supported transport planes. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:transport-plane": {
                "description": "Transport plane supported (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities_ietf-sr-topology-state_entropy-readable-label-depth": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:entropy-readable-label-depth": {
          "description": "Maximum label stack depth that a router can read. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "byte"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_node-capabilities": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:node-capabilities": {
          "description": "Shows the SR capability of the node. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-sr-topology-state:transport-planes": {
              "type": "array",
              "description": "List of supported transport planes. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ietf-sr-topology-state:transport-plane": {
                    "description": "Transport plane supported (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  }
                }
              }
            },
            "ietf-sr-topology-state:entropy-readable-label-depth": {
              "description": "Maximum label stack depth that a router can read. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "byte"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_msd": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:msd": {
          "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "byte"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state_ietf-sr-topology-state_credibility-preference": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:credibility-preference": {
          "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:information-source-state": {
          "description": "The container contains state attributes related to\nthe information source. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-sr-topology-state:credibility-preference": {
              "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint16"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-instance": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:information-source-instance": {
          "description": "The name indicating the instance of the information\nsource. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:information-source": {
          "description": "Indicates the type of the information source. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "unknown",
          "enum": [
            "unknown",
            "locally-configured",
            "ospfv2",
            "ospfv3",
            "isis",
            "bgp-ls",
            "system-processed",
            "other"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-sr-topology-state_sr": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:sr": {
          "description": "Containing SR attributes. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-sr-topology-state:srgb": {
              "type": "array",
              "description": "List of global blocks to be advertised. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ietf-sr-topology-state:lower-bound": {
                    "description": "Lower value in the label range. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:upper-bound": {
                    "description": "Upper value in the label range. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  }
                }
              }
            },
            "ietf-sr-topology-state:srlb": {
              "type": "array",
              "description": "List of SRLBs. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ietf-sr-topology-state:lower-bound": {
                    "description": "Lower value in the label range. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:upper-bound": {
                    "description": "Upper value in the label range. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  }
                }
              }
            },
            "ietf-sr-topology-state:node-capabilities": {
              "description": "Shows the SR capability of the node. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "ietf-sr-topology-state:transport-planes": {
                  "type": "array",
                  "description": "List of supported transport planes. (list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "ietf-sr-topology-state:transport-plane": {
                        "description": "Transport plane supported (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "identityref"
                      }
                    }
                  }
                },
                "ietf-sr-topology-state:entropy-readable-label-depth": {
                  "description": "Maximum label stack depth that a router can read. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "byte"
                }
              }
            },
            "ietf-sr-topology-state:msd": {
              "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "byte"
            },
            "ietf-sr-topology-state:information-source": {
              "description": "Indicates the type of the information source. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "unknown",
              "enum": [
                "unknown",
                "locally-configured",
                "ospfv2",
                "ospfv3",
                "isis",
                "bgp-ls",
                "system-processed",
                "other"
              ]
            },
            "ietf-sr-topology-state:information-source-instance": {
              "description": "The name indicating the instance of the information\nsource. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "ietf-sr-topology-state:information-source-state": {
              "description": "The container contains state attributes related to\nthe information source. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "ietf-sr-topology-state:credibility-preference": {
                  "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint16"
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_router-id_ietf-l3-unicast-topology-state_router-id-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:router-id": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Router-id for the node (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_router-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:router-id": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Router-id for the node (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_value-type": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:value-type": {
          "description": "This leaf defines how value must be interpreted. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "index",
          "enum": [
            "index",
            "absolute"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_start-sid": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:start-sid": {
          "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_range": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:range": {
          "description": "Indicates how many SIDs can be allocated. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_last-hop-behavior": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:last-hop-behavior": {
          "description": "Configure last hop behavior. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "explicit-null",
          "enum": [
            "explicit-null",
            "no-php",
            "php"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-readvertisment": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-readvertisment": {
          "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-node": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-node": {
          "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-local": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-local": {
          "description": "'true' if the SID is local. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr_ietf-sr-topology-state_algorithm": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:algorithm": {
          "description": "Prefix-sid algorithm. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-sr-topology-state_sr": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:sr": {
          "description": "Containing SR attributes for a prefix. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "ietf-sr-topology-state:value-type": {
              "description": "This leaf defines how value must be interpreted. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "index",
              "enum": [
                "index",
                "absolute"
              ]
            },
            "ietf-sr-topology-state:start-sid": {
              "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint32"
            },
            "ietf-sr-topology-state:range": {
              "description": "Indicates how many SIDs can be allocated. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint32"
            },
            "ietf-sr-topology-state:algorithm": {
              "description": "Prefix-sid algorithm. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "identityref"
            },
            "ietf-sr-topology-state:last-hop-behavior": {
              "description": "Configure last hop behavior. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "explicit-null",
              "enum": [
                "explicit-null",
                "no-php",
                "php"
              ]
            },
            "ietf-sr-topology-state:is-local": {
              "description": "'true' if the SID is local. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:is-node": {
              "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:is-readvertisment": {
              "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_prefix": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:prefix": {
          "description": "IP prefix value (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "union"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_metric": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:metric": {
          "description": "Prefix metric (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Prefix flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix_ietf-l3-unicast-topology-state_flag": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Prefix flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix_ietf-l3-unicast-topology-state_prefix-prefix": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:prefix": {
          "type": "array",
          "description": "A list of prefixes along with their attributes (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-l3-unicast-topology-state:prefix": {
                "description": "IP prefix value (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "union"
              },
              "ietf-l3-unicast-topology-state:metric": {
                "description": "Prefix metric (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-l3-unicast-topology-state:flag": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "Prefix flags (leaf-list)",
                  "type": "string",
                  "format": "identityref"
                }
              },
              "ietf-sr-topology-state:sr": {
                "description": "Containing SR attributes for a prefix. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "ietf-sr-topology-state:value-type": {
                    "description": "This leaf defines how value must be interpreted. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "index",
                    "enum": [
                      "index",
                      "absolute"
                    ]
                  },
                  "ietf-sr-topology-state:start-sid": {
                    "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:range": {
                    "description": "Indicates how many SIDs can be allocated. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:algorithm": {
                    "description": "Prefix-sid algorithm. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "ietf-sr-topology-state:last-hop-behavior": {
                    "description": "Configure last hop behavior. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "explicit-null",
                    "enum": [
                      "explicit-null",
                      "no-php",
                      "php"
                    ]
                  },
                  "ietf-sr-topology-state:is-local": {
                    "description": "'true' if the SID is local. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "ietf-sr-topology-state:is-node": {
                    "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "ietf-sr-topology-state:is-readvertisment": {
                    "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_prefix": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:prefix": {
          "type": "array",
          "description": "A list of prefixes along with their attributes (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-l3-unicast-topology-state:prefix": {
                "description": "IP prefix value (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "union"
              },
              "ietf-l3-unicast-topology-state:metric": {
                "description": "Prefix metric (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-l3-unicast-topology-state:flag": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "Prefix flags (leaf-list)",
                  "type": "string",
                  "format": "identityref"
                }
              },
              "ietf-sr-topology-state:sr": {
                "description": "Containing SR attributes for a prefix. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "ietf-sr-topology-state:value-type": {
                    "description": "This leaf defines how value must be interpreted. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "index",
                    "enum": [
                      "index",
                      "absolute"
                    ]
                  },
                  "ietf-sr-topology-state:start-sid": {
                    "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:range": {
                    "description": "Indicates how many SIDs can be allocated. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:algorithm": {
                    "description": "Prefix-sid algorithm. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "ietf-sr-topology-state:last-hop-behavior": {
                    "description": "Configure last hop behavior. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "explicit-null",
                    "enum": [
                      "explicit-null",
                      "no-php",
                      "php"
                    ]
                  },
                  "ietf-sr-topology-state:is-local": {
                    "description": "'true' if the SID is local. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "ietf-sr-topology-state:is-node": {
                    "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "ietf-sr-topology-state:is-readvertisment": {
                    "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_name": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:name": {
          "description": "Node name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Node flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_ietf-l3-unicast-topology-state_flag": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Node flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes_cisco-crosswork-ospf-topology_ospf-router-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:ospf-router-id": {
          "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes_cisco-crosswork-ospf-topology_area-id_cisco-crosswork-ospf-topology_area-id-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:area-id": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes_cisco-crosswork-ospf-topology_area-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:area-id": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-ospf-topology_ospf-node-attributes": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:ospf-node-attributes": {
          "description": "Contains node's OSPF attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-ospf-topology:ospf-router-id": {
              "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "cisco-crosswork-ospf-topology:area-id": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_system-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:system-id": {
          "description": "ISIS System ID, a 6 octet numerical value (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_level": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:level": {
          "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "level-1",
          "enum": [
            "level-1",
            "level-2",
            "level-all"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_area_cisco-crosswork-isis-topology_area-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:area": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes_cisco-crosswork-isis-topology_area": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:area": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes_cisco-crosswork-isis-topology_isis-node-attributes": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:isis-node-attributes": {
          "description": "ISIS attributes for a specific node (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-isis-topology:system-id": {
              "description": "ISIS System ID, a 6 octet numerical value (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "cisco-crosswork-isis-topology:area": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "cisco-crosswork-isis-topology:level": {
              "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "level-1",
              "enum": [
                "level-1",
                "level-2",
                "level-all"
              ]
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id_ietf-l3-unicast-topology-state_l3-node-attributes": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:l3-node-attributes": {
          "description": "Contains node attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-l3-unicast-topology-state:name": {
              "description": "Node name (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "ietf-l3-unicast-topology-state:flag": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "Node flags (leaf-list)",
                "type": "string",
                "format": "identityref"
              }
            },
            "ietf-l3-unicast-topology-state:router-id": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "Router-id for the node (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "ietf-l3-unicast-topology-state:prefix": {
              "type": "array",
              "description": "A list of prefixes along with their attributes (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ietf-l3-unicast-topology-state:prefix": {
                    "description": "IP prefix value (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "union"
                  },
                  "ietf-l3-unicast-topology-state:metric": {
                    "description": "Prefix metric (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Prefix flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes for a prefix. (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "ietf-sr-topology-state:value-type": {
                        "description": "This leaf defines how value must be interpreted. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "index",
                        "enum": [
                          "index",
                          "absolute"
                        ]
                      },
                      "ietf-sr-topology-state:start-sid": {
                        "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:range": {
                        "description": "Indicates how many SIDs can be allocated. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:algorithm": {
                        "description": "Prefix-sid algorithm. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "identityref"
                      },
                      "ietf-sr-topology-state:last-hop-behavior": {
                        "description": "Configure last hop behavior. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "explicit-null",
                        "enum": [
                          "explicit-null",
                          "no-php",
                          "php"
                        ]
                      },
                      "ietf-sr-topology-state:is-local": {
                        "description": "'true' if the SID is local. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-node": {
                        "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-readvertisment": {
                        "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "cisco-crosswork-isis-topology:isis-node-attributes": {
              "description": "ISIS attributes for a specific node (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-isis-topology:system-id": {
                  "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "cisco-crosswork-isis-topology:area": {
                  "type": "array",
                  "x-yang": {
                    "type": "leaf-list"
                  },
                  "items": {
                    "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                    "type": "string",
                    "format": "string"
                  }
                },
                "cisco-crosswork-isis-topology:level": {
                  "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "level-1",
                  "enum": [
                    "level-1",
                    "level-2",
                    "level-all"
                  ]
                }
              }
            },
            "cisco-crosswork-ospf-topology:ospf-node-attributes": {
              "description": "Contains node's OSPF attributes (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-ospf-topology:ospf-router-id": {
                  "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "cisco-crosswork-ospf-topology:area-id": {
                  "type": "array",
                  "x-yang": {
                    "type": "leaf-list"
                  },
                  "items": {
                    "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "ietf-sr-topology-state:sr": {
              "description": "Containing SR attributes. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "ietf-sr-topology-state:srgb": {
                  "type": "array",
                  "description": "List of global blocks to be advertised. (list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "ietf-sr-topology-state:lower-bound": {
                        "description": "Lower value in the label range. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:upper-bound": {
                        "description": "Upper value in the label range. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      }
                    }
                  }
                },
                "ietf-sr-topology-state:srlb": {
                  "type": "array",
                  "description": "List of SRLBs. (list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "ietf-sr-topology-state:lower-bound": {
                        "description": "Lower value in the label range. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:upper-bound": {
                        "description": "Upper value in the label range. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      }
                    }
                  }
                },
                "ietf-sr-topology-state:node-capabilities": {
                  "description": "Shows the SR capability of the node. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "ietf-sr-topology-state:transport-planes": {
                      "type": "array",
                      "description": "List of supported transport planes. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-sr-topology-state:transport-plane": {
                            "description": "Transport plane supported (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "identityref"
                          }
                        }
                      }
                    },
                    "ietf-sr-topology-state:entropy-readable-label-depth": {
                      "description": "Maximum label stack depth that a router can read. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "byte"
                    }
                  }
                },
                "ietf-sr-topology-state:msd": {
                  "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "byte"
                },
                "ietf-sr-topology-state:information-source": {
                  "description": "Indicates the type of the information source. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "unknown",
                  "enum": [
                    "unknown",
                    "locally-configured",
                    "ospfv2",
                    "ospfv3",
                    "isis",
                    "bgp-ls",
                    "system-processed",
                    "other"
                  ]
                },
                "ietf-sr-topology-state:information-source-instance": {
                  "description": "The name indicating the instance of the information\nsource. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "ietf-sr-topology-state:information-source-state": {
                  "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "ietf-sr-topology-state:credibility-preference": {
                      "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node_node-node-id": {
      "type": "object",
      "properties": {
        "ietf-network-state:node": {
          "type": "array",
          "description": "The inventory of nodes of this network. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "node-id": {
                "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "supporting-node": {
                "type": "array",
                "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "network-ref": {
                      "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "node-ref": {
                      "description": "References the underlay node itself. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "ietf-network-topology-state:termination-point": {
                "type": "array",
                "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:tp-id": {
                      "description": "Termination point identifier. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "ietf-network-topology-state:supporting-termination-point": {
                      "type": "array",
                      "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-network-topology-state:network-ref": {
                            "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "ietf-network-topology-state:node-ref": {
                            "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "ietf-network-topology-state:tp-ref": {
                            "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          }
                        }
                      }
                    },
                    "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                      "description": "Contains termination point attributes (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-l3-unicast-topology-state:ip-address": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "IPv4 or IPv6 address. (leaf-list)",
                            "type": "string",
                            "format": "union"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-node-attributes": {
                "description": "Contains node attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:name": {
                    "description": "Node name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Node flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "ietf-l3-unicast-topology-state:router-id": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Router-id for the node (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ietf-l3-unicast-topology-state:prefix": {
                    "type": "array",
                    "description": "A list of prefixes along with their attributes (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "ietf-l3-unicast-topology-state:prefix": {
                          "description": "IP prefix value (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "union"
                        },
                        "ietf-l3-unicast-topology-state:metric": {
                          "description": "Prefix metric (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "ietf-l3-unicast-topology-state:flag": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Prefix flags (leaf-list)",
                            "type": "string",
                            "format": "identityref"
                          }
                        },
                        "ietf-sr-topology-state:sr": {
                          "description": "Containing SR attributes for a prefix. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "ietf-sr-topology-state:value-type": {
                              "description": "This leaf defines how value must be interpreted. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "index",
                              "enum": [
                                "index",
                                "absolute"
                              ]
                            },
                            "ietf-sr-topology-state:start-sid": {
                              "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:range": {
                              "description": "Indicates how many SIDs can be allocated. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:algorithm": {
                              "description": "Prefix-sid algorithm. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "ietf-sr-topology-state:last-hop-behavior": {
                              "description": "Configure last hop behavior. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "explicit-null",
                              "enum": [
                                "explicit-null",
                                "no-php",
                                "php"
                              ]
                            },
                            "ietf-sr-topology-state:is-local": {
                              "description": "'true' if the SID is local. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-node": {
                              "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-readvertisment": {
                              "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "cisco-crosswork-isis-topology:isis-node-attributes": {
                    "description": "ISIS attributes for a specific node (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:system-id": {
                        "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "cisco-crosswork-isis-topology:area": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                          "type": "string",
                          "format": "string"
                        }
                      },
                      "cisco-crosswork-isis-topology:level": {
                        "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "level-1",
                        "enum": [
                          "level-1",
                          "level-2",
                          "level-all"
                        ]
                      }
                    }
                  },
                  "cisco-crosswork-ospf-topology:ospf-node-attributes": {
                    "description": "Contains node's OSPF attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-ospf-topology:ospf-router-id": {
                        "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "cisco-crosswork-ospf-topology:area-id": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-sr-topology-state:srgb": {
                        "type": "array",
                        "description": "List of global blocks to be advertised. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-topology-state:lower-bound": {
                              "description": "Lower value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:upper-bound": {
                              "description": "Upper value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        }
                      },
                      "ietf-sr-topology-state:srlb": {
                        "type": "array",
                        "description": "List of SRLBs. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-topology-state:lower-bound": {
                              "description": "Lower value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:upper-bound": {
                              "description": "Upper value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        }
                      },
                      "ietf-sr-topology-state:node-capabilities": {
                        "description": "Shows the SR capability of the node. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:transport-planes": {
                            "type": "array",
                            "description": "List of supported transport planes. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "ietf-sr-topology-state:transport-plane": {
                                  "description": "Transport plane supported (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "identityref"
                                }
                              }
                            }
                          },
                          "ietf-sr-topology-state:entropy-readable-label-depth": {
                            "description": "Maximum label stack depth that a router can read. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "byte"
                          }
                        }
                      },
                      "ietf-sr-topology-state:msd": {
                        "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "byte"
                      },
                      "ietf-sr-topology-state:information-source": {
                        "description": "Indicates the type of the information source. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "unknown",
                        "enum": [
                          "unknown",
                          "locally-configured",
                          "ospfv2",
                          "ospfv3",
                          "isis",
                          "bgp-ls",
                          "system-processed",
                          "other"
                        ]
                      },
                      "ietf-sr-topology-state:information-source-instance": {
                        "description": "The name indicating the instance of the information\nsource. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "ietf-sr-topology-state:information-source-state": {
                        "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:credibility-preference": {
                            "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_node": {
      "type": "object",
      "properties": {
        "ietf-network-state:node": {
          "type": "array",
          "description": "The inventory of nodes of this network. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "node-id": {
                "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "supporting-node": {
                "type": "array",
                "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "network-ref": {
                      "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "node-ref": {
                      "description": "References the underlay node itself. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "ietf-network-topology-state:termination-point": {
                "type": "array",
                "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:tp-id": {
                      "description": "Termination point identifier. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "ietf-network-topology-state:supporting-termination-point": {
                      "type": "array",
                      "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-network-topology-state:network-ref": {
                            "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "ietf-network-topology-state:node-ref": {
                            "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "ietf-network-topology-state:tp-ref": {
                            "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          }
                        }
                      }
                    },
                    "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                      "description": "Contains termination point attributes (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-l3-unicast-topology-state:ip-address": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "IPv4 or IPv6 address. (leaf-list)",
                            "type": "string",
                            "format": "union"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-node-attributes": {
                "description": "Contains node attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:name": {
                    "description": "Node name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Node flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "ietf-l3-unicast-topology-state:router-id": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Router-id for the node (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ietf-l3-unicast-topology-state:prefix": {
                    "type": "array",
                    "description": "A list of prefixes along with their attributes (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "ietf-l3-unicast-topology-state:prefix": {
                          "description": "IP prefix value (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "union"
                        },
                        "ietf-l3-unicast-topology-state:metric": {
                          "description": "Prefix metric (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "ietf-l3-unicast-topology-state:flag": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Prefix flags (leaf-list)",
                            "type": "string",
                            "format": "identityref"
                          }
                        },
                        "ietf-sr-topology-state:sr": {
                          "description": "Containing SR attributes for a prefix. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "ietf-sr-topology-state:value-type": {
                              "description": "This leaf defines how value must be interpreted. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "index",
                              "enum": [
                                "index",
                                "absolute"
                              ]
                            },
                            "ietf-sr-topology-state:start-sid": {
                              "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:range": {
                              "description": "Indicates how many SIDs can be allocated. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:algorithm": {
                              "description": "Prefix-sid algorithm. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "ietf-sr-topology-state:last-hop-behavior": {
                              "description": "Configure last hop behavior. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "explicit-null",
                              "enum": [
                                "explicit-null",
                                "no-php",
                                "php"
                              ]
                            },
                            "ietf-sr-topology-state:is-local": {
                              "description": "'true' if the SID is local. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-node": {
                              "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-readvertisment": {
                              "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "cisco-crosswork-isis-topology:isis-node-attributes": {
                    "description": "ISIS attributes for a specific node (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:system-id": {
                        "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "cisco-crosswork-isis-topology:area": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                          "type": "string",
                          "format": "string"
                        }
                      },
                      "cisco-crosswork-isis-topology:level": {
                        "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "level-1",
                        "enum": [
                          "level-1",
                          "level-2",
                          "level-all"
                        ]
                      }
                    }
                  },
                  "cisco-crosswork-ospf-topology:ospf-node-attributes": {
                    "description": "Contains node's OSPF attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-ospf-topology:ospf-router-id": {
                        "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "cisco-crosswork-ospf-topology:area-id": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-sr-topology-state:srgb": {
                        "type": "array",
                        "description": "List of global blocks to be advertised. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-topology-state:lower-bound": {
                              "description": "Lower value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:upper-bound": {
                              "description": "Upper value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        }
                      },
                      "ietf-sr-topology-state:srlb": {
                        "type": "array",
                        "description": "List of SRLBs. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-topology-state:lower-bound": {
                              "description": "Lower value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:upper-bound": {
                              "description": "Upper value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        }
                      },
                      "ietf-sr-topology-state:node-capabilities": {
                        "description": "Shows the SR capability of the node. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:transport-planes": {
                            "type": "array",
                            "description": "List of supported transport planes. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "ietf-sr-topology-state:transport-plane": {
                                  "description": "Transport plane supported (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "identityref"
                                }
                              }
                            }
                          },
                          "ietf-sr-topology-state:entropy-readable-label-depth": {
                            "description": "Maximum label stack depth that a router can read. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "byte"
                          }
                        }
                      },
                      "ietf-sr-topology-state:msd": {
                        "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "byte"
                      },
                      "ietf-sr-topology-state:information-source": {
                        "description": "Indicates the type of the information source. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "unknown",
                        "enum": [
                          "unknown",
                          "locally-configured",
                          "ospfv2",
                          "ospfv3",
                          "isis",
                          "bgp-ls",
                          "system-processed",
                          "other"
                        ]
                      },
                      "ietf-sr-topology-state:information-source-instance": {
                        "description": "The name indicating the instance of the information\nsource. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "ietf-sr-topology-state:information-source-state": {
                        "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:credibility-preference": {
                            "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology_ietf-sr-topology-state_sr-mpls": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:sr-mpls": {
          "description": "Its presence identifies the SR topology type. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology_cisco-crosswork-ospf-topology_ospf": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:ospf": {
          "description": "Presence of this node identifies the OSPF topology type. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology_cisco-crosswork-isis-topology_isis": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:isis": {
          "description": "Presence of this node identifies the ISIS topology type. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_network-types_ietf-l3-unicast-topology-state_l3-unicast-topology": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:l3-unicast-topology": {
          "description": "The presence of the container node indicates L3 Unicast\ntopology (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "cisco-crosswork-isis-topology:isis": {
              "description": "Presence of this node identifies the ISIS topology type. (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
              }
            },
            "cisco-crosswork-ospf-topology:ospf": {
              "description": "Presence of this node identifies the OSPF topology type. (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
              }
            },
            "ietf-sr-topology-state:sr-mpls": {
              "description": "Its presence identifies the SR topology type. (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_network-types": {
      "type": "object",
      "properties": {
        "ietf-network-state:network-types": {
          "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-l3-unicast-topology-state:l3-unicast-topology": {
              "description": "The presence of the container node indicates L3 Unicast\ntopology (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "cisco-crosswork-isis-topology:isis": {
                  "description": "Presence of this node identifies the ISIS topology type. (presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "true"
                  },
                  "properties": {
                  }
                },
                "cisco-crosswork-ospf-topology:ospf": {
                  "description": "Presence of this node identifies the OSPF topology type. (presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "true"
                  },
                  "properties": {
                  }
                },
                "ietf-sr-topology-state:sr-mpls": {
                  "description": "Its presence identifies the SR topology type. (presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "true"
                  },
                  "properties": {
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_network-id": {
      "type": "object",
      "properties": {
        "ietf-network-state:network-id": {
          "description": "Identifies a network. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link_ietf-network-topology-state_supporting-link-network-ref_ietf-network-topology-state_supporting-link-link-ref_ietf-network-topology-state_network-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:network-ref": {
          "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link_ietf-network-topology-state_supporting-link-network-ref_ietf-network-topology-state_supporting-link-link-ref_ietf-network-topology-state_link-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:link-ref": {
          "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link_ietf-network-topology-state_supporting-link-network-ref_ietf-network-topology-state_supporting-link-link-ref": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:supporting-link": {
          "type": "array",
          "description": "Identifies the link or links on which this link depends. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:network-ref": {
                "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "ietf-network-topology-state:link-ref": {
                "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_supporting-link": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:supporting-link": {
          "type": "array",
          "description": "Identifies the link or links on which this link depends. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:network-ref": {
                "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "ietf-network-topology-state:link-ref": {
                "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_source_ietf-network-topology-state_source-tp": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:source-tp": {
          "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_source_ietf-network-topology-state_source-node": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:source-node": {
          "description": "Source node identifier.  Must be in the same topology. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_source": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:source": {
          "description": "This container holds the logical source of a particular\nlink. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-network-topology-state:source-node": {
              "description": "Source node identifier.  Must be in the same topology. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "ietf-network-topology-state:source-tp": {
              "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_link-id": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:link-id": {
          "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_destination_ietf-network-topology-state_dest-tp": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:dest-tp": {
          "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_destination_ietf-network-topology-state_dest-node": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:dest-node": {
          "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-network-topology-state_destination": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:destination": {
          "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-network-topology-state:dest-node": {
              "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "ietf-network-topology-state:dest-tp": {
              "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_value-type": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:value-type": {
          "description": "This leaf defines how value must be interpreted. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "index",
          "enum": [
            "index",
            "absolute"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_sid": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:sid": {
          "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_msd": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:msd": {
          "description": "SID depth of the interface associated with the link. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "byte"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-persistent": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-persistent": {
          "description": "'true' if the SID is persistently allocated. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-part-of-set": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-part-of-set": {
          "description": "'true' if the SID is part of a set. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-on-lan": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-on-lan": {
          "description": "'true' if on a lan. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-local": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-local": {
          "description": "'true' if the SID is local. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_is-backup": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:is-backup": {
          "description": "'true' if the SID is a backup. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state_ietf-sr-topology-state_credibility-preference": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:credibility-preference": {
          "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-state": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:information-source-state": {
          "description": "The container contains state attributes related to\nthe information source. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-sr-topology-state:credibility-preference": {
              "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint16"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source-instance": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:information-source-instance": {
          "description": "The name indicating the instance of the information\nsource. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_information-source": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:information-source": {
          "description": "Indicates the type of the information source. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "unknown",
          "enum": [
            "unknown",
            "locally-configured",
            "ospfv2",
            "ospfv3",
            "isis",
            "bgp-ls",
            "system-processed",
            "other"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_advertise-protection": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:advertise-protection": {
          "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "single",
          "enum": [
            "single",
            "dual"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_address-family": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:address-family": {
          "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "ipv4",
          "enum": [
            "ipv4",
            "ipv6"
          ]
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-sr-topology-state_sr": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:sr": {
          "description": "Containing SR attributes. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "ietf-sr-topology-state:value-type": {
              "description": "This leaf defines how value must be interpreted. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "index",
              "enum": [
                "index",
                "absolute"
              ]
            },
            "ietf-sr-topology-state:sid": {
              "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint32"
            },
            "ietf-sr-topology-state:advertise-protection": {
              "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "single",
              "enum": [
                "single",
                "dual"
              ]
            },
            "ietf-sr-topology-state:is-local": {
              "description": "'true' if the SID is local. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:msd": {
              "description": "SID depth of the interface associated with the link. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "byte"
            },
            "ietf-sr-topology-state:address-family": {
              "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "ipv4",
              "enum": [
                "ipv4",
                "ipv6"
              ]
            },
            "ietf-sr-topology-state:is-backup": {
              "description": "'true' if the SID is a backup. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:is-part-of-set": {
              "description": "'true' if the SID is part of a set. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:is-persistent": {
              "description": "'true' if the SID is persistently allocated. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:is-on-lan": {
              "description": "'true' if on a lan. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "ietf-sr-topology-state:information-source": {
              "description": "Indicates the type of the information source. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "unknown",
              "enum": [
                "unknown",
                "locally-configured",
                "ospfv2",
                "ospfv3",
                "isis",
                "bgp-ls",
                "system-processed",
                "other"
              ]
            },
            "ietf-sr-topology-state:information-source-instance": {
              "description": "The name indicating the instance of the information\nsource. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "ietf-sr-topology-state:information-source-state": {
              "description": "The container contains state attributes related to\nthe information source. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "ietf-sr-topology-state:credibility-preference": {
                  "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint16"
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_name": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:name": {
          "description": "Link Name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_metric2": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:metric2": {
          "description": "Link Metric 2 (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_metric1": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:metric1": {
          "description": "Link Metric 1 (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Link flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_ietf-l3-unicast-topology-state_flag": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Link flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-ospf-topology_ospf-link-attributes_cisco-crosswork-ospf-topology_ospf-router-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:ospf-router-id": {
          "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-ospf-topology_ospf-link-attributes_cisco-crosswork-ospf-topology_area-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:area-id": {
          "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-ospf-topology_ospf-link-attributes": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:ospf-link-attributes": {
          "description": "Containing OSPF link attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-ospf-topology:ospf-router-id": {
              "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "cisco-crosswork-ospf-topology:area-id": {
              "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_net_cisco-crosswork-isis-topology_system-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:system-id": {
          "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_net_cisco-crosswork-isis-topology_area": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:area": {
          "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_net": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:net": {
          "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-isis-topology:system-id": {
              "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "cisco-crosswork-isis-topology:area": {
              "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes_cisco-crosswork-isis-topology_level": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:level": {
          "description": "ISIS level of the link/ adjacency (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "byte"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes_cisco-crosswork-isis-topology_isis-link-attributes": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:isis-link-attributes": {
          "description": "ISIS link/ adjacency attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-isis-topology:net": {
              "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-isis-topology:system-id": {
                  "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "cisco-crosswork-isis-topology:area": {
                  "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                }
              }
            },
            "cisco-crosswork-isis-topology:level": {
              "description": "ISIS level of the link/ adjacency (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "byte"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id_ietf-l3-unicast-topology-state_l3-link-attributes": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:l3-link-attributes": {
          "description": "Contains link attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-l3-unicast-topology-state:name": {
              "description": "Link Name (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "ietf-l3-unicast-topology-state:flag": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "Link flags (leaf-list)",
                "type": "string",
                "format": "identityref"
              }
            },
            "ietf-l3-unicast-topology-state:metric1": {
              "description": "Link Metric 1 (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint64"
            },
            "ietf-l3-unicast-topology-state:metric2": {
              "description": "Link Metric 2 (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint64"
            },
            "cisco-crosswork-isis-topology:isis-link-attributes": {
              "description": "ISIS link/ adjacency attributes (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-isis-topology:net": {
                  "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "cisco-crosswork-isis-topology:system-id": {
                      "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "cisco-crosswork-isis-topology:area": {
                      "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                },
                "cisco-crosswork-isis-topology:level": {
                  "description": "ISIS level of the link/ adjacency (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "byte"
                }
              }
            },
            "cisco-crosswork-ospf-topology:ospf-link-attributes": {
              "description": "Containing OSPF link attributes (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-ospf-topology:ospf-router-id": {
                  "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "cisco-crosswork-ospf-topology:area-id": {
                  "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                }
              }
            },
            "ietf-sr-topology-state:sr": {
              "description": "Containing SR attributes. (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "ietf-sr-topology-state:value-type": {
                  "description": "This leaf defines how value must be interpreted. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "index",
                  "enum": [
                    "index",
                    "absolute"
                  ]
                },
                "ietf-sr-topology-state:sid": {
                  "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint32"
                },
                "ietf-sr-topology-state:advertise-protection": {
                  "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "single",
                  "enum": [
                    "single",
                    "dual"
                  ]
                },
                "ietf-sr-topology-state:is-local": {
                  "description": "'true' if the SID is local. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "ietf-sr-topology-state:msd": {
                  "description": "SID depth of the interface associated with the link. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "byte"
                },
                "ietf-sr-topology-state:address-family": {
                  "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "ipv4",
                  "enum": [
                    "ipv4",
                    "ipv6"
                  ]
                },
                "ietf-sr-topology-state:is-backup": {
                  "description": "'true' if the SID is a backup. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "ietf-sr-topology-state:is-part-of-set": {
                  "description": "'true' if the SID is part of a set. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "ietf-sr-topology-state:is-persistent": {
                  "description": "'true' if the SID is persistently allocated. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "ietf-sr-topology-state:is-on-lan": {
                  "description": "'true' if on a lan. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "ietf-sr-topology-state:information-source": {
                  "description": "Indicates the type of the information source. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "unknown",
                  "enum": [
                    "unknown",
                    "locally-configured",
                    "ospfv2",
                    "ospfv3",
                    "isis",
                    "bgp-ls",
                    "system-processed",
                    "other"
                  ]
                },
                "ietf-sr-topology-state:information-source-instance": {
                  "description": "The name indicating the instance of the information\nsource. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "ietf-sr-topology-state:information-source-state": {
                  "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "ietf-sr-topology-state:credibility-preference": {
                      "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link_ietf-network-topology-state_link-link-id": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:link": {
          "type": "array",
          "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:source": {
                "description": "This container holds the logical source of a particular\nlink. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-network-topology-state:source-node": {
                    "description": "Source node identifier.  Must be in the same topology. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "ietf-network-topology-state:source-tp": {
                    "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  }
                }
              },
              "ietf-network-topology-state:destination": {
                "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-network-topology-state:dest-node": {
                    "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "ietf-network-topology-state:dest-tp": {
                    "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  }
                }
              },
              "ietf-network-topology-state:link-id": {
                "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "ietf-network-topology-state:supporting-link": {
                "type": "array",
                "description": "Identifies the link or links on which this link depends. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:network-ref": {
                      "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "ietf-network-topology-state:link-ref": {
                      "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-link-attributes": {
                "description": "Contains link attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:name": {
                    "description": "Link Name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Link flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "ietf-l3-unicast-topology-state:metric1": {
                    "description": "Link Metric 1 (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "ietf-l3-unicast-topology-state:metric2": {
                    "description": "Link Metric 2 (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "cisco-crosswork-isis-topology:isis-link-attributes": {
                    "description": "ISIS link/ adjacency attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:net": {
                        "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "cisco-crosswork-isis-topology:system-id": {
                            "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "cisco-crosswork-isis-topology:area": {
                            "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      },
                      "cisco-crosswork-isis-topology:level": {
                        "description": "ISIS level of the link/ adjacency (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "byte"
                      }
                    }
                  },
                  "cisco-crosswork-ospf-topology:ospf-link-attributes": {
                    "description": "Containing OSPF link attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-ospf-topology:ospf-router-id": {
                        "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "cisco-crosswork-ospf-topology:area-id": {
                        "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes. (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "ietf-sr-topology-state:value-type": {
                        "description": "This leaf defines how value must be interpreted. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "index",
                        "enum": [
                          "index",
                          "absolute"
                        ]
                      },
                      "ietf-sr-topology-state:sid": {
                        "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:advertise-protection": {
                        "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "single",
                        "enum": [
                          "single",
                          "dual"
                        ]
                      },
                      "ietf-sr-topology-state:is-local": {
                        "description": "'true' if the SID is local. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:msd": {
                        "description": "SID depth of the interface associated with the link. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "byte"
                      },
                      "ietf-sr-topology-state:address-family": {
                        "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "ipv4",
                        "enum": [
                          "ipv4",
                          "ipv6"
                        ]
                      },
                      "ietf-sr-topology-state:is-backup": {
                        "description": "'true' if the SID is a backup. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-part-of-set": {
                        "description": "'true' if the SID is part of a set. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-persistent": {
                        "description": "'true' if the SID is persistently allocated. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-on-lan": {
                        "description": "'true' if on a lan. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:information-source": {
                        "description": "Indicates the type of the information source. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "unknown",
                        "enum": [
                          "unknown",
                          "locally-configured",
                          "ospfv2",
                          "ospfv3",
                          "isis",
                          "bgp-ls",
                          "system-processed",
                          "other"
                        ]
                      },
                      "ietf-sr-topology-state:information-source-instance": {
                        "description": "The name indicating the instance of the information\nsource. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "ietf-sr-topology-state:information-source-state": {
                        "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:credibility-preference": {
                            "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-network-topology-state_link": {
      "type": "object",
      "properties": {
        "ietf-network-topology-state:link": {
          "type": "array",
          "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-network-topology-state:source": {
                "description": "This container holds the logical source of a particular\nlink. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-network-topology-state:source-node": {
                    "description": "Source node identifier.  Must be in the same topology. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "ietf-network-topology-state:source-tp": {
                    "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  }
                }
              },
              "ietf-network-topology-state:destination": {
                "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-network-topology-state:dest-node": {
                    "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "ietf-network-topology-state:dest-tp": {
                    "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  }
                }
              },
              "ietf-network-topology-state:link-id": {
                "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "ietf-network-topology-state:supporting-link": {
                "type": "array",
                "description": "Identifies the link or links on which this link depends. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:network-ref": {
                      "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "ietf-network-topology-state:link-ref": {
                      "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-link-attributes": {
                "description": "Contains link attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:name": {
                    "description": "Link Name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Link flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "ietf-l3-unicast-topology-state:metric1": {
                    "description": "Link Metric 1 (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "ietf-l3-unicast-topology-state:metric2": {
                    "description": "Link Metric 2 (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "cisco-crosswork-isis-topology:isis-link-attributes": {
                    "description": "ISIS link/ adjacency attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:net": {
                        "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "cisco-crosswork-isis-topology:system-id": {
                            "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "cisco-crosswork-isis-topology:area": {
                            "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      },
                      "cisco-crosswork-isis-topology:level": {
                        "description": "ISIS level of the link/ adjacency (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "byte"
                      }
                    }
                  },
                  "cisco-crosswork-ospf-topology:ospf-link-attributes": {
                    "description": "Containing OSPF link attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-ospf-topology:ospf-router-id": {
                        "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "cisco-crosswork-ospf-topology:area-id": {
                        "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes. (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "ietf-sr-topology-state:value-type": {
                        "description": "This leaf defines how value must be interpreted. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "index",
                        "enum": [
                          "index",
                          "absolute"
                        ]
                      },
                      "ietf-sr-topology-state:sid": {
                        "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:advertise-protection": {
                        "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "single",
                        "enum": [
                          "single",
                          "dual"
                        ]
                      },
                      "ietf-sr-topology-state:is-local": {
                        "description": "'true' if the SID is local. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:msd": {
                        "description": "SID depth of the interface associated with the link. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "byte"
                      },
                      "ietf-sr-topology-state:address-family": {
                        "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "ipv4",
                        "enum": [
                          "ipv4",
                          "ipv6"
                        ]
                      },
                      "ietf-sr-topology-state:is-backup": {
                        "description": "'true' if the SID is a backup. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-part-of-set": {
                        "description": "'true' if the SID is part of a set. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-persistent": {
                        "description": "'true' if the SID is persistently allocated. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:is-on-lan": {
                        "description": "'true' if on a lan. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "boolean"
                      },
                      "ietf-sr-topology-state:information-source": {
                        "description": "Indicates the type of the information source. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "unknown",
                        "enum": [
                          "unknown",
                          "locally-configured",
                          "ospfv2",
                          "ospfv3",
                          "isis",
                          "bgp-ls",
                          "system-processed",
                          "other"
                        ]
                      },
                      "ietf-sr-topology-state:information-source-instance": {
                        "description": "The name indicating the instance of the information\nsource. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "ietf-sr-topology-state:information-source-state": {
                        "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:credibility-preference": {
                            "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_upper-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:upper-bound": {
          "description": "Upper value in the label range. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound_ietf-sr-topology-state_lower-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:lower-bound": {
          "description": "Lower value in the label range. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb_ietf-sr-topology-state_srgb-lower-bound_ietf-sr-topology-state_srgb-upper-bound": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:srgb": {
          "type": "array",
          "description": "List of global blocks to be advertised. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:lower-bound": {
                "description": "Lower value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-sr-topology-state:upper-bound": {
                "description": "Upper value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr_ietf-sr-topology-state_srgb": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:srgb": {
          "type": "array",
          "description": "List of global blocks to be advertised. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "ietf-sr-topology-state:lower-bound": {
                "description": "Lower value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ietf-sr-topology-state:upper-bound": {
                "description": "Upper value in the label range. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-sr-topology-state_sr": {
      "type": "object",
      "properties": {
        "ietf-sr-topology-state:sr": {
          "description": "Containing SR attributes. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-sr-topology-state:srgb": {
              "type": "array",
              "description": "List of global blocks to be advertised. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ietf-sr-topology-state:lower-bound": {
                    "description": "Lower value in the label range. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "ietf-sr-topology-state:upper-bound": {
                    "description": "Upper value in the label range. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-l3-unicast-topology-state_name": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:name": {
          "description": "Name of the topology (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-l3-unicast-topology-state_flag_ietf-l3-unicast-topology-state_flag-id": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Topology flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_ietf-l3-unicast-topology-state_flag": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:flag": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Topology flags (leaf-list)",
            "type": "string",
            "format": "identityref"
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-ospf-topology_ospf-topology-attributes_cisco-crosswork-ospf-topology_area-id": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:area-id": {
          "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-ospf-topology_ospf-topology-attributes": {
      "type": "object",
      "properties": {
        "cisco-crosswork-ospf-topology:ospf-topology-attributes": {
          "description": "OSPF topology attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-ospf-topology:area-id": {
              "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-isis-topology_isis-topology-attributes_cisco-crosswork-isis-topology_area": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:area": {
          "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes_cisco-crosswork-isis-topology_isis-topology-attributes": {
      "type": "object",
      "properties": {
        "cisco-crosswork-isis-topology:isis-topology-attributes": {
          "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks?? (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "cisco-crosswork-isis-topology:area": {
              "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id_ietf-l3-unicast-topology-state_l3-topology-attributes": {
      "type": "object",
      "properties": {
        "ietf-l3-unicast-topology-state:l3-topology-attributes": {
          "description": "Contains topology attributes (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "ietf-l3-unicast-topology-state:name": {
              "description": "Name of the topology (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "ietf-l3-unicast-topology-state:flag": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "Topology flags (leaf-list)",
                "type": "string",
                "format": "identityref"
              }
            },
            "cisco-crosswork-isis-topology:isis-topology-attributes": {
              "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks?? (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-isis-topology:area": {
                  "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                }
              }
            },
            "cisco-crosswork-ospf-topology:ospf-topology-attributes": {
              "description": "OSPF topology attributes (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "cisco-crosswork-ospf-topology:area-id": {
                  "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                }
              }
            },
            "ietf-sr-topology-state:sr": {
              "description": "Containing SR attributes. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "ietf-sr-topology-state:srgb": {
                  "type": "array",
                  "description": "List of global blocks to be advertised. (list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "ietf-sr-topology-state:lower-bound": {
                        "description": "Lower value in the label range. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      },
                      "ietf-sr-topology-state:upper-bound": {
                        "description": "Upper value in the label range. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network_network-network-id": {
      "type": "object",
      "properties": {
        "ietf-network-state:network": {
          "type": "array",
          "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "network-types": {
                "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:l3-unicast-topology": {
                    "description": "The presence of the container node indicates L3 Unicast\ntopology (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:isis": {
                        "description": "Presence of this node identifies the ISIS topology type. (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                        }
                      },
                      "cisco-crosswork-ospf-topology:ospf": {
                        "description": "Presence of this node identifies the OSPF topology type. (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                        }
                      },
                      "ietf-sr-topology-state:sr-mpls": {
                        "description": "Its presence identifies the SR topology type. (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                        }
                      }
                    }
                  }
                }
              },
              "network-id": {
                "description": "Identifies a network. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "supporting-network": {
                "type": "array",
                "description": "An underlay network, used to represent layered network\ntopologies. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "network-ref": {
                      "description": "References the underlay network. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "node": {
                "type": "array",
                "description": "The inventory of nodes of this network. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "node-id": {
                      "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "supporting-node": {
                      "type": "array",
                      "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "network-ref": {
                            "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "node-ref": {
                            "description": "References the underlay node itself. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          }
                        }
                      }
                    },
                    "ietf-network-topology-state:termination-point": {
                      "type": "array",
                      "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-network-topology-state:tp-id": {
                            "description": "Termination point identifier. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "ietf-network-topology-state:supporting-termination-point": {
                            "type": "array",
                            "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "ietf-network-topology-state:network-ref": {
                                  "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "ietf-network-topology-state:node-ref": {
                                  "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "ietf-network-topology-state:tp-ref": {
                                  "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                }
                              }
                            }
                          },
                          "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                            "description": "Contains termination point attributes (non-presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "false"
                            },
                            "properties": {
                              "ietf-l3-unicast-topology-state:ip-address": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "IPv4 or IPv6 address. (leaf-list)",
                                  "type": "string",
                                  "format": "union"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "ietf-l3-unicast-topology-state:l3-node-attributes": {
                      "description": "Contains node attributes (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-l3-unicast-topology-state:name": {
                          "description": "Node name (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "ietf-l3-unicast-topology-state:flag": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Node flags (leaf-list)",
                            "type": "string",
                            "format": "identityref"
                          }
                        },
                        "ietf-l3-unicast-topology-state:router-id": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Router-id for the node (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ietf-l3-unicast-topology-state:prefix": {
                          "type": "array",
                          "description": "A list of prefixes along with their attributes (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "ietf-l3-unicast-topology-state:prefix": {
                                "description": "IP prefix value (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "union"
                              },
                              "ietf-l3-unicast-topology-state:metric": {
                                "description": "Prefix metric (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint32"
                              },
                              "ietf-l3-unicast-topology-state:flag": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "Prefix flags (leaf-list)",
                                  "type": "string",
                                  "format": "identityref"
                                }
                              },
                              "ietf-sr-topology-state:sr": {
                                "description": "Containing SR attributes for a prefix. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "ietf-sr-topology-state:value-type": {
                                    "description": "This leaf defines how value must be interpreted. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "index",
                                    "enum": [
                                      "index",
                                      "absolute"
                                    ]
                                  },
                                  "ietf-sr-topology-state:start-sid": {
                                    "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:range": {
                                    "description": "Indicates how many SIDs can be allocated. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:algorithm": {
                                    "description": "Prefix-sid algorithm. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "identityref"
                                  },
                                  "ietf-sr-topology-state:last-hop-behavior": {
                                    "description": "Configure last hop behavior. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "explicit-null",
                                    "enum": [
                                      "explicit-null",
                                      "no-php",
                                      "php"
                                    ]
                                  },
                                  "ietf-sr-topology-state:is-local": {
                                    "description": "'true' if the SID is local. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  },
                                  "ietf-sr-topology-state:is-node": {
                                    "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  },
                                  "ietf-sr-topology-state:is-readvertisment": {
                                    "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "cisco-crosswork-isis-topology:isis-node-attributes": {
                          "description": "ISIS attributes for a specific node (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-isis-topology:system-id": {
                              "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "cisco-crosswork-isis-topology:area": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "cisco-crosswork-isis-topology:level": {
                              "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "level-1",
                              "enum": [
                                "level-1",
                                "level-2",
                                "level-all"
                              ]
                            }
                          }
                        },
                        "cisco-crosswork-ospf-topology:ospf-node-attributes": {
                          "description": "Contains node's OSPF attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-ospf-topology:ospf-router-id": {
                              "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "cisco-crosswork-ospf-topology:area-id": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "ietf-sr-topology-state:sr": {
                          "description": "Containing SR attributes. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-sr-topology-state:srgb": {
                              "type": "array",
                              "description": "List of global blocks to be advertised. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ietf-sr-topology-state:lower-bound": {
                                    "description": "Lower value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:upper-bound": {
                                    "description": "Upper value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  }
                                }
                              }
                            },
                            "ietf-sr-topology-state:srlb": {
                              "type": "array",
                              "description": "List of SRLBs. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ietf-sr-topology-state:lower-bound": {
                                    "description": "Lower value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:upper-bound": {
                                    "description": "Upper value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  }
                                }
                              }
                            },
                            "ietf-sr-topology-state:node-capabilities": {
                              "description": "Shows the SR capability of the node. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:transport-planes": {
                                  "type": "array",
                                  "description": "List of supported transport planes. (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ietf-sr-topology-state:transport-plane": {
                                        "description": "Transport plane supported (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "identityref"
                                      }
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:entropy-readable-label-depth": {
                                  "description": "Maximum label stack depth that a router can read. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                }
                              }
                            },
                            "ietf-sr-topology-state:msd": {
                              "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "byte"
                            },
                            "ietf-sr-topology-state:information-source": {
                              "description": "Indicates the type of the information source. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "unknown",
                              "enum": [
                                "unknown",
                                "locally-configured",
                                "ospfv2",
                                "ospfv3",
                                "isis",
                                "bgp-ls",
                                "system-processed",
                                "other"
                              ]
                            },
                            "ietf-sr-topology-state:information-source-instance": {
                              "description": "The name indicating the instance of the information\nsource. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-sr-topology-state:information-source-state": {
                              "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:credibility-preference": {
                                  "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "ietf-network-topology-state:link": {
                "type": "array",
                "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:source": {
                      "description": "This container holds the logical source of a particular\nlink. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-network-topology-state:source-node": {
                          "description": "Source node identifier.  Must be in the same topology. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "ietf-network-topology-state:source-tp": {
                          "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    },
                    "ietf-network-topology-state:destination": {
                      "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-network-topology-state:dest-node": {
                          "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "ietf-network-topology-state:dest-tp": {
                          "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    },
                    "ietf-network-topology-state:link-id": {
                      "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "ietf-network-topology-state:supporting-link": {
                      "type": "array",
                      "description": "Identifies the link or links on which this link depends. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-network-topology-state:network-ref": {
                            "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "ietf-network-topology-state:link-ref": {
                            "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          }
                        }
                      }
                    },
                    "ietf-l3-unicast-topology-state:l3-link-attributes": {
                      "description": "Contains link attributes (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-l3-unicast-topology-state:name": {
                          "description": "Link Name (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "ietf-l3-unicast-topology-state:flag": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Link flags (leaf-list)",
                            "type": "string",
                            "format": "identityref"
                          }
                        },
                        "ietf-l3-unicast-topology-state:metric1": {
                          "description": "Link Metric 1 (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint64"
                        },
                        "ietf-l3-unicast-topology-state:metric2": {
                          "description": "Link Metric 2 (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint64"
                        },
                        "cisco-crosswork-isis-topology:isis-link-attributes": {
                          "description": "ISIS link/ adjacency attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-isis-topology:net": {
                              "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-isis-topology:system-id": {
                                  "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-isis-topology:area": {
                                  "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            },
                            "cisco-crosswork-isis-topology:level": {
                              "description": "ISIS level of the link/ adjacency (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "byte"
                            }
                          }
                        },
                        "cisco-crosswork-ospf-topology:ospf-link-attributes": {
                          "description": "Containing OSPF link attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-ospf-topology:ospf-router-id": {
                              "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "cisco-crosswork-ospf-topology:area-id": {
                              "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        },
                        "ietf-sr-topology-state:sr": {
                          "description": "Containing SR attributes. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "ietf-sr-topology-state:value-type": {
                              "description": "This leaf defines how value must be interpreted. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "index",
                              "enum": [
                                "index",
                                "absolute"
                              ]
                            },
                            "ietf-sr-topology-state:sid": {
                              "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:advertise-protection": {
                              "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "single",
                              "enum": [
                                "single",
                                "dual"
                              ]
                            },
                            "ietf-sr-topology-state:is-local": {
                              "description": "'true' if the SID is local. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:msd": {
                              "description": "SID depth of the interface associated with the link. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "byte"
                            },
                            "ietf-sr-topology-state:address-family": {
                              "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "ipv4",
                              "enum": [
                                "ipv4",
                                "ipv6"
                              ]
                            },
                            "ietf-sr-topology-state:is-backup": {
                              "description": "'true' if the SID is a backup. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-part-of-set": {
                              "description": "'true' if the SID is part of a set. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-persistent": {
                              "description": "'true' if the SID is persistently allocated. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-on-lan": {
                              "description": "'true' if on a lan. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:information-source": {
                              "description": "Indicates the type of the information source. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "unknown",
                              "enum": [
                                "unknown",
                                "locally-configured",
                                "ospfv2",
                                "ospfv3",
                                "isis",
                                "bgp-ls",
                                "system-processed",
                                "other"
                              ]
                            },
                            "ietf-sr-topology-state:information-source-instance": {
                              "description": "The name indicating the instance of the information\nsource. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-sr-topology-state:information-source-state": {
                              "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:credibility-preference": {
                                  "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-topology-attributes": {
                "description": "Contains topology attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:name": {
                    "description": "Name of the topology (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Topology flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "cisco-crosswork-isis-topology:isis-topology-attributes": {
                    "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks?? (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:area": {
                        "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "cisco-crosswork-ospf-topology:ospf-topology-attributes": {
                    "description": "OSPF topology attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-ospf-topology:area-id": {
                        "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-sr-topology-state:srgb": {
                        "type": "array",
                        "description": "List of global blocks to be advertised. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-topology-state:lower-bound": {
                              "description": "Lower value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:upper-bound": {
                              "description": "Upper value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks_network": {
      "type": "object",
      "properties": {
        "ietf-network-state:network": {
          "type": "array",
          "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "network-types": {
                "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:l3-unicast-topology": {
                    "description": "The presence of the container node indicates L3 Unicast\ntopology (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:isis": {
                        "description": "Presence of this node identifies the ISIS topology type. (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                        }
                      },
                      "cisco-crosswork-ospf-topology:ospf": {
                        "description": "Presence of this node identifies the OSPF topology type. (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                        }
                      },
                      "ietf-sr-topology-state:sr-mpls": {
                        "description": "Its presence identifies the SR topology type. (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                        }
                      }
                    }
                  }
                }
              },
              "network-id": {
                "description": "Identifies a network. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "supporting-network": {
                "type": "array",
                "description": "An underlay network, used to represent layered network\ntopologies. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "network-ref": {
                      "description": "References the underlay network. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "node": {
                "type": "array",
                "description": "The inventory of nodes of this network. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "node-id": {
                      "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "supporting-node": {
                      "type": "array",
                      "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "network-ref": {
                            "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "node-ref": {
                            "description": "References the underlay node itself. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          }
                        }
                      }
                    },
                    "ietf-network-topology-state:termination-point": {
                      "type": "array",
                      "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-network-topology-state:tp-id": {
                            "description": "Termination point identifier. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "ietf-network-topology-state:supporting-termination-point": {
                            "type": "array",
                            "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "ietf-network-topology-state:network-ref": {
                                  "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "ietf-network-topology-state:node-ref": {
                                  "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "ietf-network-topology-state:tp-ref": {
                                  "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                }
                              }
                            }
                          },
                          "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                            "description": "Contains termination point attributes (non-presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "false"
                            },
                            "properties": {
                              "ietf-l3-unicast-topology-state:ip-address": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "IPv4 or IPv6 address. (leaf-list)",
                                  "type": "string",
                                  "format": "union"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "ietf-l3-unicast-topology-state:l3-node-attributes": {
                      "description": "Contains node attributes (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-l3-unicast-topology-state:name": {
                          "description": "Node name (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "ietf-l3-unicast-topology-state:flag": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Node flags (leaf-list)",
                            "type": "string",
                            "format": "identityref"
                          }
                        },
                        "ietf-l3-unicast-topology-state:router-id": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Router-id for the node (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ietf-l3-unicast-topology-state:prefix": {
                          "type": "array",
                          "description": "A list of prefixes along with their attributes (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "ietf-l3-unicast-topology-state:prefix": {
                                "description": "IP prefix value (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "union"
                              },
                              "ietf-l3-unicast-topology-state:metric": {
                                "description": "Prefix metric (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint32"
                              },
                              "ietf-l3-unicast-topology-state:flag": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "Prefix flags (leaf-list)",
                                  "type": "string",
                                  "format": "identityref"
                                }
                              },
                              "ietf-sr-topology-state:sr": {
                                "description": "Containing SR attributes for a prefix. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "ietf-sr-topology-state:value-type": {
                                    "description": "This leaf defines how value must be interpreted. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "index",
                                    "enum": [
                                      "index",
                                      "absolute"
                                    ]
                                  },
                                  "ietf-sr-topology-state:start-sid": {
                                    "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:range": {
                                    "description": "Indicates how many SIDs can be allocated. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:algorithm": {
                                    "description": "Prefix-sid algorithm. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "identityref"
                                  },
                                  "ietf-sr-topology-state:last-hop-behavior": {
                                    "description": "Configure last hop behavior. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "explicit-null",
                                    "enum": [
                                      "explicit-null",
                                      "no-php",
                                      "php"
                                    ]
                                  },
                                  "ietf-sr-topology-state:is-local": {
                                    "description": "'true' if the SID is local. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  },
                                  "ietf-sr-topology-state:is-node": {
                                    "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  },
                                  "ietf-sr-topology-state:is-readvertisment": {
                                    "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "cisco-crosswork-isis-topology:isis-node-attributes": {
                          "description": "ISIS attributes for a specific node (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-isis-topology:system-id": {
                              "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "cisco-crosswork-isis-topology:area": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "cisco-crosswork-isis-topology:level": {
                              "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "level-1",
                              "enum": [
                                "level-1",
                                "level-2",
                                "level-all"
                              ]
                            }
                          }
                        },
                        "cisco-crosswork-ospf-topology:ospf-node-attributes": {
                          "description": "Contains node's OSPF attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-ospf-topology:ospf-router-id": {
                              "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "cisco-crosswork-ospf-topology:area-id": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "ietf-sr-topology-state:sr": {
                          "description": "Containing SR attributes. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-sr-topology-state:srgb": {
                              "type": "array",
                              "description": "List of global blocks to be advertised. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ietf-sr-topology-state:lower-bound": {
                                    "description": "Lower value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:upper-bound": {
                                    "description": "Upper value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  }
                                }
                              }
                            },
                            "ietf-sr-topology-state:srlb": {
                              "type": "array",
                              "description": "List of SRLBs. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ietf-sr-topology-state:lower-bound": {
                                    "description": "Lower value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-sr-topology-state:upper-bound": {
                                    "description": "Upper value in the label range. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  }
                                }
                              }
                            },
                            "ietf-sr-topology-state:node-capabilities": {
                              "description": "Shows the SR capability of the node. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:transport-planes": {
                                  "type": "array",
                                  "description": "List of supported transport planes. (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ietf-sr-topology-state:transport-plane": {
                                        "description": "Transport plane supported (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "identityref"
                                      }
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:entropy-readable-label-depth": {
                                  "description": "Maximum label stack depth that a router can read. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                }
                              }
                            },
                            "ietf-sr-topology-state:msd": {
                              "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "byte"
                            },
                            "ietf-sr-topology-state:information-source": {
                              "description": "Indicates the type of the information source. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "unknown",
                              "enum": [
                                "unknown",
                                "locally-configured",
                                "ospfv2",
                                "ospfv3",
                                "isis",
                                "bgp-ls",
                                "system-processed",
                                "other"
                              ]
                            },
                            "ietf-sr-topology-state:information-source-instance": {
                              "description": "The name indicating the instance of the information\nsource. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-sr-topology-state:information-source-state": {
                              "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:credibility-preference": {
                                  "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "ietf-network-topology-state:link": {
                "type": "array",
                "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology-state:source": {
                      "description": "This container holds the logical source of a particular\nlink. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-network-topology-state:source-node": {
                          "description": "Source node identifier.  Must be in the same topology. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "ietf-network-topology-state:source-tp": {
                          "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    },
                    "ietf-network-topology-state:destination": {
                      "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-network-topology-state:dest-node": {
                          "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "ietf-network-topology-state:dest-tp": {
                          "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    },
                    "ietf-network-topology-state:link-id": {
                      "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "ietf-network-topology-state:supporting-link": {
                      "type": "array",
                      "description": "Identifies the link or links on which this link depends. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "ietf-network-topology-state:network-ref": {
                            "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "ietf-network-topology-state:link-ref": {
                            "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          }
                        }
                      }
                    },
                    "ietf-l3-unicast-topology-state:l3-link-attributes": {
                      "description": "Contains link attributes (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "ietf-l3-unicast-topology-state:name": {
                          "description": "Link Name (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "ietf-l3-unicast-topology-state:flag": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "Link flags (leaf-list)",
                            "type": "string",
                            "format": "identityref"
                          }
                        },
                        "ietf-l3-unicast-topology-state:metric1": {
                          "description": "Link Metric 1 (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint64"
                        },
                        "ietf-l3-unicast-topology-state:metric2": {
                          "description": "Link Metric 2 (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint64"
                        },
                        "cisco-crosswork-isis-topology:isis-link-attributes": {
                          "description": "ISIS link/ adjacency attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-isis-topology:net": {
                              "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-isis-topology:system-id": {
                                  "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-isis-topology:area": {
                                  "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            },
                            "cisco-crosswork-isis-topology:level": {
                              "description": "ISIS level of the link/ adjacency (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "byte"
                            }
                          }
                        },
                        "cisco-crosswork-ospf-topology:ospf-link-attributes": {
                          "description": "Containing OSPF link attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "cisco-crosswork-ospf-topology:ospf-router-id": {
                              "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "cisco-crosswork-ospf-topology:area-id": {
                              "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        },
                        "ietf-sr-topology-state:sr": {
                          "description": "Containing SR attributes. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "ietf-sr-topology-state:value-type": {
                              "description": "This leaf defines how value must be interpreted. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "index",
                              "enum": [
                                "index",
                                "absolute"
                              ]
                            },
                            "ietf-sr-topology-state:sid": {
                              "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:advertise-protection": {
                              "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "single",
                              "enum": [
                                "single",
                                "dual"
                              ]
                            },
                            "ietf-sr-topology-state:is-local": {
                              "description": "'true' if the SID is local. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:msd": {
                              "description": "SID depth of the interface associated with the link. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "byte"
                            },
                            "ietf-sr-topology-state:address-family": {
                              "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "ipv4",
                              "enum": [
                                "ipv4",
                                "ipv6"
                              ]
                            },
                            "ietf-sr-topology-state:is-backup": {
                              "description": "'true' if the SID is a backup. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-part-of-set": {
                              "description": "'true' if the SID is part of a set. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-persistent": {
                              "description": "'true' if the SID is persistently allocated. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:is-on-lan": {
                              "description": "'true' if on a lan. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "ietf-sr-topology-state:information-source": {
                              "description": "Indicates the type of the information source. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "unknown",
                              "enum": [
                                "unknown",
                                "locally-configured",
                                "ospfv2",
                                "ospfv3",
                                "isis",
                                "bgp-ls",
                                "system-processed",
                                "other"
                              ]
                            },
                            "ietf-sr-topology-state:information-source-instance": {
                              "description": "The name indicating the instance of the information\nsource. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-sr-topology-state:information-source-state": {
                              "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:credibility-preference": {
                                  "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "ietf-l3-unicast-topology-state:l3-topology-attributes": {
                "description": "Contains topology attributes (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "ietf-l3-unicast-topology-state:name": {
                    "description": "Name of the topology (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "ietf-l3-unicast-topology-state:flag": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "Topology flags (leaf-list)",
                      "type": "string",
                      "format": "identityref"
                    }
                  },
                  "cisco-crosswork-isis-topology:isis-topology-attributes": {
                    "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks?? (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-isis-topology:area": {
                        "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "cisco-crosswork-ospf-topology:ospf-topology-attributes": {
                    "description": "OSPF topology attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "cisco-crosswork-ospf-topology:area-id": {
                        "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "ietf-sr-topology-state:sr": {
                    "description": "Containing SR attributes. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-sr-topology-state:srgb": {
                        "type": "array",
                        "description": "List of global blocks to be advertised. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-topology-state:lower-bound": {
                              "description": "Lower value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "ietf-sr-topology-state:upper-bound": {
                              "description": "Upper value in the label range. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_ietf-network-state_networks": {
      "type": "object",
      "properties": {
        "ietf-network-state:networks": {
          "description": "Serves as a top-level container for a list of networks. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "network": {
              "type": "array",
              "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "network-types": {
                    "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-l3-unicast-topology-state:l3-unicast-topology": {
                        "description": "The presence of the container node indicates L3 Unicast\ntopology (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                          "cisco-crosswork-isis-topology:isis": {
                            "description": "Presence of this node identifies the ISIS topology type. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                            }
                          },
                          "cisco-crosswork-ospf-topology:ospf": {
                            "description": "Presence of this node identifies the OSPF topology type. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                            }
                          },
                          "ietf-sr-topology-state:sr-mpls": {
                            "description": "Its presence identifies the SR topology type. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                            }
                          }
                        }
                      }
                    }
                  },
                  "network-id": {
                    "description": "Identifies a network. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "supporting-network": {
                    "type": "array",
                    "description": "An underlay network, used to represent layered network\ntopologies. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "network-ref": {
                          "description": "References the underlay network. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    }
                  },
                  "node": {
                    "type": "array",
                    "description": "The inventory of nodes of this network. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "supporting-node": {
                          "type": "array",
                          "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "network-ref": {
                                "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "node-ref": {
                                "description": "References the underlay node itself. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              }
                            }
                          }
                        },
                        "ietf-network-topology-state:termination-point": {
                          "type": "array",
                          "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "ietf-network-topology-state:tp-id": {
                                "description": "Termination point identifier. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "ietf-network-topology-state:supporting-termination-point": {
                                "type": "array",
                                "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "ietf-network-topology-state:network-ref": {
                                      "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "ietf-network-topology-state:node-ref": {
                                      "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "ietf-network-topology-state:tp-ref": {
                                      "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    }
                                  }
                                }
                              },
                              "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                                "description": "Contains termination point attributes (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "ietf-l3-unicast-topology-state:ip-address": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "IPv4 or IPv6 address. (leaf-list)",
                                      "type": "string",
                                      "format": "union"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "ietf-l3-unicast-topology-state:l3-node-attributes": {
                          "description": "Contains node attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-l3-unicast-topology-state:name": {
                              "description": "Node name (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-l3-unicast-topology-state:flag": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "Node flags (leaf-list)",
                                "type": "string",
                                "format": "identityref"
                              }
                            },
                            "ietf-l3-unicast-topology-state:router-id": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "Router-id for the node (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "ietf-l3-unicast-topology-state:prefix": {
                              "type": "array",
                              "description": "A list of prefixes along with their attributes (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ietf-l3-unicast-topology-state:prefix": {
                                    "description": "IP prefix value (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "union"
                                  },
                                  "ietf-l3-unicast-topology-state:metric": {
                                    "description": "Prefix metric (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-l3-unicast-topology-state:flag": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "Prefix flags (leaf-list)",
                                      "type": "string",
                                      "format": "identityref"
                                    }
                                  },
                                  "ietf-sr-topology-state:sr": {
                                    "description": "Containing SR attributes for a prefix. (presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "true"
                                    },
                                    "properties": {
                                      "ietf-sr-topology-state:value-type": {
                                        "description": "This leaf defines how value must be interpreted. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "index",
                                        "enum": [
                                          "index",
                                          "absolute"
                                        ]
                                      },
                                      "ietf-sr-topology-state:start-sid": {
                                        "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:range": {
                                        "description": "Indicates how many SIDs can be allocated. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:algorithm": {
                                        "description": "Prefix-sid algorithm. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "identityref"
                                      },
                                      "ietf-sr-topology-state:last-hop-behavior": {
                                        "description": "Configure last hop behavior. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "explicit-null",
                                        "enum": [
                                          "explicit-null",
                                          "no-php",
                                          "php"
                                        ]
                                      },
                                      "ietf-sr-topology-state:is-local": {
                                        "description": "'true' if the SID is local. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "boolean"
                                      },
                                      "ietf-sr-topology-state:is-node": {
                                        "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "boolean"
                                      },
                                      "ietf-sr-topology-state:is-readvertisment": {
                                        "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "boolean"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "cisco-crosswork-isis-topology:isis-node-attributes": {
                              "description": "ISIS attributes for a specific node (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-isis-topology:system-id": {
                                  "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-isis-topology:area": {
                                  "type": "array",
                                  "x-yang": {
                                    "type": "leaf-list"
                                  },
                                  "items": {
                                    "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                                    "type": "string",
                                    "format": "string"
                                  }
                                },
                                "cisco-crosswork-isis-topology:level": {
                                  "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "level-1",
                                  "enum": [
                                    "level-1",
                                    "level-2",
                                    "level-all"
                                  ]
                                }
                              }
                            },
                            "cisco-crosswork-ospf-topology:ospf-node-attributes": {
                              "description": "Contains node's OSPF attributes (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-ospf-topology:ospf-router-id": {
                                  "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-ospf-topology:area-id": {
                                  "type": "array",
                                  "x-yang": {
                                    "type": "leaf-list"
                                  },
                                  "items": {
                                    "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            },
                            "ietf-sr-topology-state:sr": {
                              "description": "Containing SR attributes. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:srgb": {
                                  "type": "array",
                                  "description": "List of global blocks to be advertised. (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ietf-sr-topology-state:lower-bound": {
                                        "description": "Lower value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:upper-bound": {
                                        "description": "Upper value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      }
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:srlb": {
                                  "type": "array",
                                  "description": "List of SRLBs. (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ietf-sr-topology-state:lower-bound": {
                                        "description": "Lower value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:upper-bound": {
                                        "description": "Upper value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      }
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:node-capabilities": {
                                  "description": "Shows the SR capability of the node. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "ietf-sr-topology-state:transport-planes": {
                                      "type": "array",
                                      "description": "List of supported transport planes. (list)",
                                      "x-yang": {
                                        "type": "list"
                                      },
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "ietf-sr-topology-state:transport-plane": {
                                            "description": "Transport plane supported (leaf)",
                                            "x-yang": {
                                              "type": "leaf"
                                            },
                                            "type": "string",
                                            "format": "identityref"
                                          }
                                        }
                                      }
                                    },
                                    "ietf-sr-topology-state:entropy-readable-label-depth": {
                                      "description": "Maximum label stack depth that a router can read. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "byte"
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:msd": {
                                  "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                },
                                "ietf-sr-topology-state:information-source": {
                                  "description": "Indicates the type of the information source. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "unknown",
                                  "enum": [
                                    "unknown",
                                    "locally-configured",
                                    "ospfv2",
                                    "ospfv3",
                                    "isis",
                                    "bgp-ls",
                                    "system-processed",
                                    "other"
                                  ]
                                },
                                "ietf-sr-topology-state:information-source-instance": {
                                  "description": "The name indicating the instance of the information\nsource. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "ietf-sr-topology-state:information-source-state": {
                                  "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "ietf-sr-topology-state:credibility-preference": {
                                      "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "uint16"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ietf-network-topology-state:link": {
                    "type": "array",
                    "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "ietf-network-topology-state:source": {
                          "description": "This container holds the logical source of a particular\nlink. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-network-topology-state:source-node": {
                              "description": "Source node identifier.  Must be in the same topology. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            },
                            "ietf-network-topology-state:source-tp": {
                              "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            }
                          }
                        },
                        "ietf-network-topology-state:destination": {
                          "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-network-topology-state:dest-node": {
                              "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            },
                            "ietf-network-topology-state:dest-tp": {
                              "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            }
                          }
                        },
                        "ietf-network-topology-state:link-id": {
                          "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "ietf-network-topology-state:supporting-link": {
                          "type": "array",
                          "description": "Identifies the link or links on which this link depends. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "ietf-network-topology-state:network-ref": {
                                "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "ietf-network-topology-state:link-ref": {
                                "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              }
                            }
                          }
                        },
                        "ietf-l3-unicast-topology-state:l3-link-attributes": {
                          "description": "Contains link attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-l3-unicast-topology-state:name": {
                              "description": "Link Name (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-l3-unicast-topology-state:flag": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "Link flags (leaf-list)",
                                "type": "string",
                                "format": "identityref"
                              }
                            },
                            "ietf-l3-unicast-topology-state:metric1": {
                              "description": "Link Metric 1 (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            },
                            "ietf-l3-unicast-topology-state:metric2": {
                              "description": "Link Metric 2 (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            },
                            "cisco-crosswork-isis-topology:isis-link-attributes": {
                              "description": "ISIS link/ adjacency attributes (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-isis-topology:net": {
                                  "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "cisco-crosswork-isis-topology:system-id": {
                                      "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "cisco-crosswork-isis-topology:area": {
                                      "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                },
                                "cisco-crosswork-isis-topology:level": {
                                  "description": "ISIS level of the link/ adjacency (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                }
                              }
                            },
                            "cisco-crosswork-ospf-topology:ospf-link-attributes": {
                              "description": "Containing OSPF link attributes (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-ospf-topology:ospf-router-id": {
                                  "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-ospf-topology:area-id": {
                                  "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            },
                            "ietf-sr-topology-state:sr": {
                              "description": "Containing SR attributes. (presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "true"
                              },
                              "properties": {
                                "ietf-sr-topology-state:value-type": {
                                  "description": "This leaf defines how value must be interpreted. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "index",
                                  "enum": [
                                    "index",
                                    "absolute"
                                  ]
                                },
                                "ietf-sr-topology-state:sid": {
                                  "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint32"
                                },
                                "ietf-sr-topology-state:advertise-protection": {
                                  "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "single",
                                  "enum": [
                                    "single",
                                    "dual"
                                  ]
                                },
                                "ietf-sr-topology-state:is-local": {
                                  "description": "'true' if the SID is local. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:msd": {
                                  "description": "SID depth of the interface associated with the link. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                },
                                "ietf-sr-topology-state:address-family": {
                                  "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "ipv4",
                                  "enum": [
                                    "ipv4",
                                    "ipv6"
                                  ]
                                },
                                "ietf-sr-topology-state:is-backup": {
                                  "description": "'true' if the SID is a backup. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:is-part-of-set": {
                                  "description": "'true' if the SID is part of a set. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:is-persistent": {
                                  "description": "'true' if the SID is persistently allocated. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:is-on-lan": {
                                  "description": "'true' if on a lan. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:information-source": {
                                  "description": "Indicates the type of the information source. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "unknown",
                                  "enum": [
                                    "unknown",
                                    "locally-configured",
                                    "ospfv2",
                                    "ospfv3",
                                    "isis",
                                    "bgp-ls",
                                    "system-processed",
                                    "other"
                                  ]
                                },
                                "ietf-sr-topology-state:information-source-instance": {
                                  "description": "The name indicating the instance of the information\nsource. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "ietf-sr-topology-state:information-source-state": {
                                  "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "ietf-sr-topology-state:credibility-preference": {
                                      "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "uint16"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ietf-l3-unicast-topology-state:l3-topology-attributes": {
                    "description": "Contains topology attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-l3-unicast-topology-state:name": {
                        "description": "Name of the topology (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "ietf-l3-unicast-topology-state:flag": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "Topology flags (leaf-list)",
                          "type": "string",
                          "format": "identityref"
                        }
                      },
                      "cisco-crosswork-isis-topology:isis-topology-attributes": {
                        "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks?? (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "cisco-crosswork-isis-topology:area": {
                            "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      },
                      "cisco-crosswork-ospf-topology:ospf-topology-attributes": {
                        "description": "OSPF topology attributes (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "cisco-crosswork-ospf-topology:area-id": {
                            "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      },
                      "ietf-sr-topology-state:sr": {
                        "description": "Containing SR attributes. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:srgb": {
                            "type": "array",
                            "description": "List of global blocks to be advertised. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "ietf-sr-topology-state:lower-bound": {
                                  "description": "Lower value in the label range. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint32"
                                },
                                "ietf-sr-topology-state:upper-bound": {
                                  "description": "Upper value in the label range. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint32"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data-post": {
      "type": "object",
      "properties": {
        "ietf-network-state:networks": {
          "description": "Serves as a top-level container for a list of networks. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "network": {
              "type": "array",
              "description": "Describes a network.\nA network typically contains an inventory of nodes,\ntopological information (augmented through the\nnetwork-topology data model), and layering information. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "network-types": {
                    "description": "Serves as an augmentation target.\nThe network type is indicated through corresponding\npresence containers augmented into this container. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-l3-unicast-topology-state:l3-unicast-topology": {
                        "description": "The presence of the container node indicates L3 Unicast\ntopology (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                          "cisco-crosswork-isis-topology:isis": {
                            "description": "Presence of this node identifies the ISIS topology type. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                            }
                          },
                          "cisco-crosswork-ospf-topology:ospf": {
                            "description": "Presence of this node identifies the OSPF topology type. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                            }
                          },
                          "ietf-sr-topology-state:sr-mpls": {
                            "description": "Its presence identifies the SR topology type. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                            }
                          }
                        }
                      }
                    }
                  },
                  "network-id": {
                    "description": "Identifies a network. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "supporting-network": {
                    "type": "array",
                    "description": "An underlay network, used to represent layered network\ntopologies. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "network-ref": {
                          "description": "References the underlay network. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    }
                  },
                  "node": {
                    "type": "array",
                    "description": "The inventory of nodes of this network. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "description": "Uniquely identifies a node within the containing\nnetwork. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "supporting-node": {
                          "type": "array",
                          "description": "Represents another node that is in an underlay network\nand that supports this node.  Used to represent layering\nstructure. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "network-ref": {
                                "description": "References the underlay network of which the\nunderlay node is a part. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "node-ref": {
                                "description": "References the underlay node itself. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              }
                            }
                          }
                        },
                        "ietf-network-topology-state:termination-point": {
                          "type": "array",
                          "description": "A termination point can terminate a link.\nDepending on the type of topology, a termination point\ncould, for example, refer to a port or an interface. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "ietf-network-topology-state:tp-id": {
                                "description": "Termination point identifier. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "ietf-network-topology-state:supporting-termination-point": {
                                "type": "array",
                                "description": "This list identifies any termination points on which a\ngiven termination point depends or onto which it maps.\nThose termination points will themselves be contained\nin a supporting node.  This dependency information can be\ninferred from the dependencies between links.  Therefore,\nthis item is not separately configurable.  Hence, no\ncorresponding constraint needs to be articulated.\nThe corresponding information is simply provided by the\nimplementing system. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "ietf-network-topology-state:network-ref": {
                                      "description": "This leaf identifies in which topology the\nsupporting termination point is present. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "ietf-network-topology-state:node-ref": {
                                      "description": "This leaf identifies in which node the supporting\ntermination point is present. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "ietf-network-topology-state:tp-ref": {
                                      "description": "Reference to the underlay node (the underlay node must\nbe in a different topology). (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    }
                                  }
                                }
                              },
                              "ietf-l3-unicast-topology-state:l3-termination-point-attributes": {
                                "description": "Contains termination point attributes (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "ietf-l3-unicast-topology-state:ip-address": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "IPv4 or IPv6 address. (leaf-list)",
                                      "type": "string",
                                      "format": "union"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "ietf-l3-unicast-topology-state:l3-node-attributes": {
                          "description": "Contains node attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-l3-unicast-topology-state:name": {
                              "description": "Node name (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-l3-unicast-topology-state:flag": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "Node flags (leaf-list)",
                                "type": "string",
                                "format": "identityref"
                              }
                            },
                            "ietf-l3-unicast-topology-state:router-id": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "Router-id for the node (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "ietf-l3-unicast-topology-state:prefix": {
                              "type": "array",
                              "description": "A list of prefixes along with their attributes (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ietf-l3-unicast-topology-state:prefix": {
                                    "description": "IP prefix value (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "union"
                                  },
                                  "ietf-l3-unicast-topology-state:metric": {
                                    "description": "Prefix metric (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "ietf-l3-unicast-topology-state:flag": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "Prefix flags (leaf-list)",
                                      "type": "string",
                                      "format": "identityref"
                                    }
                                  },
                                  "ietf-sr-topology-state:sr": {
                                    "description": "Containing SR attributes for a prefix. (presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "true"
                                    },
                                    "properties": {
                                      "ietf-sr-topology-state:value-type": {
                                        "description": "This leaf defines how value must be interpreted. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "index",
                                        "enum": [
                                          "index",
                                          "absolute"
                                        ]
                                      },
                                      "ietf-sr-topology-state:start-sid": {
                                        "description": "Value associated with prefix. The value must be\ninterpreted in the context of value-type. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:range": {
                                        "description": "Indicates how many SIDs can be allocated. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:algorithm": {
                                        "description": "Prefix-sid algorithm. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "identityref"
                                      },
                                      "ietf-sr-topology-state:last-hop-behavior": {
                                        "description": "Configure last hop behavior. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "explicit-null",
                                        "enum": [
                                          "explicit-null",
                                          "no-php",
                                          "php"
                                        ]
                                      },
                                      "ietf-sr-topology-state:is-local": {
                                        "description": "'true' if the SID is local. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "boolean"
                                      },
                                      "ietf-sr-topology-state:is-node": {
                                        "description": "'true' if the Prefix-SID refers to the router identified\n by the prefix.  Typically, the leaf 'is-node' (N-Flag)\n is set on Prefix-SIDs attached to a router loopback\n address. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "boolean"
                                      },
                                      "ietf-sr-topology-state:is-readvertisment": {
                                        "description": "'true' if the prefix to which this Prefix-SID is attached,\n has been propagated by the router from another\n topology by redistribution. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "boolean"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "cisco-crosswork-isis-topology:isis-node-attributes": {
                              "description": "ISIS attributes for a specific node (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-isis-topology:system-id": {
                                  "description": "ISIS System ID, a 6 octet numerical value (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-isis-topology:area": {
                                  "type": "array",
                                  "x-yang": {
                                    "type": "leaf-list"
                                  },
                                  "items": {
                                    "description": "List of Area addresses.\n*** Should we return only a single Area address corresponding\nto the current network?? (leaf-list)",
                                    "type": "string",
                                    "format": "string"
                                  }
                                },
                                "cisco-crosswork-isis-topology:level": {
                                  "description": "Level 1, Level 2 or Level 1 & 2 (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "level-1",
                                  "enum": [
                                    "level-1",
                                    "level-2",
                                    "level-all"
                                  ]
                                }
                              }
                            },
                            "cisco-crosswork-ospf-topology:ospf-node-attributes": {
                              "description": "Contains node's OSPF attributes (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-ospf-topology:ospf-router-id": {
                                  "description": "OSPF router ID, which is an IPv4 address.\n*** Note, only one router-ID is reported, corresponwing\nto the IGP domain of the current network (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-ospf-topology:area-id": {
                                  "type": "array",
                                  "x-yang": {
                                    "type": "leaf-list"
                                  },
                                  "items": {
                                    "description": "List of OSPF area IDs, each represented as an IPv4 address value\n*** Should we report all Areas or just the one corresponwing to\nthe network?? (leaf-list)",
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            },
                            "ietf-sr-topology-state:sr": {
                              "description": "Containing SR attributes. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "ietf-sr-topology-state:srgb": {
                                  "type": "array",
                                  "description": "List of global blocks to be advertised. (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ietf-sr-topology-state:lower-bound": {
                                        "description": "Lower value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:upper-bound": {
                                        "description": "Upper value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      }
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:srlb": {
                                  "type": "array",
                                  "description": "List of SRLBs. (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ietf-sr-topology-state:lower-bound": {
                                        "description": "Lower value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      },
                                      "ietf-sr-topology-state:upper-bound": {
                                        "description": "Upper value in the label range. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint32"
                                      }
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:node-capabilities": {
                                  "description": "Shows the SR capability of the node. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "ietf-sr-topology-state:transport-planes": {
                                      "type": "array",
                                      "description": "List of supported transport planes. (list)",
                                      "x-yang": {
                                        "type": "list"
                                      },
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "ietf-sr-topology-state:transport-plane": {
                                            "description": "Transport plane supported (leaf)",
                                            "x-yang": {
                                              "type": "leaf"
                                            },
                                            "type": "string",
                                            "format": "identityref"
                                          }
                                        }
                                      }
                                    },
                                    "ietf-sr-topology-state:entropy-readable-label-depth": {
                                      "description": "Maximum label stack depth that a router can read. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "byte"
                                    }
                                  }
                                },
                                "ietf-sr-topology-state:msd": {
                                  "description": "Node MSD is the lowest MSD supported by the node. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                },
                                "ietf-sr-topology-state:information-source": {
                                  "description": "Indicates the type of the information source. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "unknown",
                                  "enum": [
                                    "unknown",
                                    "locally-configured",
                                    "ospfv2",
                                    "ospfv3",
                                    "isis",
                                    "bgp-ls",
                                    "system-processed",
                                    "other"
                                  ]
                                },
                                "ietf-sr-topology-state:information-source-instance": {
                                  "description": "The name indicating the instance of the information\nsource. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "ietf-sr-topology-state:information-source-state": {
                                  "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "ietf-sr-topology-state:credibility-preference": {
                                      "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "uint16"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ietf-network-topology-state:link": {
                    "type": "array",
                    "description": "A network link connects a local (source) node and\na remote (destination) node via a set of the respective\nnode's termination points.  It is possible to have several\nlinks between the same source and destination nodes.\nLikewise, a link could potentially be re-homed between\ntermination points.  Therefore, in order to ensure that we\nwould always know to distinguish between links, every link\nis identified by a dedicated link identifier.  Note that a\nlink models a point-to-point link, not a multipoint link. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "ietf-network-topology-state:source": {
                          "description": "This container holds the logical source of a particular\nlink. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-network-topology-state:source-node": {
                              "description": "Source node identifier.  Must be in the same topology. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            },
                            "ietf-network-topology-state:source-tp": {
                              "description": "This termination point is located within the source node\nand terminates the link. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            }
                          }
                        },
                        "ietf-network-topology-state:destination": {
                          "description": "This container holds the logical destination of a\nparticular link. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-network-topology-state:dest-node": {
                              "description": "Destination node identifier.  Must be in the same\nnetwork. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            },
                            "ietf-network-topology-state:dest-tp": {
                              "description": "This termination point is located within the\ndestination node and terminates the link. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            }
                          }
                        },
                        "ietf-network-topology-state:link-id": {
                          "description": "The identifier of a link in the topology.\nA link is specific to a topology to which it belongs. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "ietf-network-topology-state:supporting-link": {
                          "type": "array",
                          "description": "Identifies the link or links on which this link depends. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "ietf-network-topology-state:network-ref": {
                                "description": "This leaf identifies in which underlay topology\nthe supporting link is present. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "ietf-network-topology-state:link-ref": {
                                "description": "This leaf identifies a link that is a part\nof this link's underlay.  Reference loops in which\na link identifies itself as its underlay, either\ndirectly or transitively, are not allowed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              }
                            }
                          }
                        },
                        "ietf-l3-unicast-topology-state:l3-link-attributes": {
                          "description": "Contains link attributes (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "ietf-l3-unicast-topology-state:name": {
                              "description": "Link Name (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "ietf-l3-unicast-topology-state:flag": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "Link flags (leaf-list)",
                                "type": "string",
                                "format": "identityref"
                              }
                            },
                            "ietf-l3-unicast-topology-state:metric1": {
                              "description": "Link Metric 1 (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            },
                            "ietf-l3-unicast-topology-state:metric2": {
                              "description": "Link Metric 2 (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            },
                            "cisco-crosswork-isis-topology:isis-link-attributes": {
                              "description": "ISIS link/ adjacency attributes (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-isis-topology:net": {
                                  "description": "ISIS Network Entity Title which identifies an instance of ISIS (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "cisco-crosswork-isis-topology:system-id": {
                                      "description": "ISIS System ID which is a 6 octet numerical value (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "cisco-crosswork-isis-topology:area": {
                                      "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                },
                                "cisco-crosswork-isis-topology:level": {
                                  "description": "ISIS level of the link/ adjacency (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                }
                              }
                            },
                            "cisco-crosswork-ospf-topology:ospf-link-attributes": {
                              "description": "Containing OSPF link attributes (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "cisco-crosswork-ospf-topology:ospf-router-id": {
                                  "description": "OSPF router ID, which is an IPv4 address,\nof the local host (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "cisco-crosswork-ospf-topology:area-id": {
                                  "description": "OSPF area ID, represented as an IPv4 address value (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            },
                            "ietf-sr-topology-state:sr": {
                              "description": "Containing SR attributes. (presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "true"
                              },
                              "properties": {
                                "ietf-sr-topology-state:value-type": {
                                  "description": "This leaf defines how value must be interpreted. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "index",
                                  "enum": [
                                    "index",
                                    "absolute"
                                  ]
                                },
                                "ietf-sr-topology-state:sid": {
                                  "description": "Adjacency SID, which can be either IGP-Adjacency SID\nor BGP PeerAdj SID, depending on the context. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint32"
                                },
                                "ietf-sr-topology-state:advertise-protection": {
                                  "description": "If set, the Adj-SID refers to an\nadjacency being protected. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "single",
                                  "enum": [
                                    "single",
                                    "dual"
                                  ]
                                },
                                "ietf-sr-topology-state:is-local": {
                                  "description": "'true' if the SID is local. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:msd": {
                                  "description": "SID depth of the interface associated with the link. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "byte"
                                },
                                "ietf-sr-topology-state:address-family": {
                                  "description": "This leaf defines the F-Flag (Address-Family flag) of the\nSID. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "ipv4",
                                  "enum": [
                                    "ipv4",
                                    "ipv6"
                                  ]
                                },
                                "ietf-sr-topology-state:is-backup": {
                                  "description": "'true' if the SID is a backup. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:is-part-of-set": {
                                  "description": "'true' if the SID is part of a set. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:is-persistent": {
                                  "description": "'true' if the SID is persistently allocated. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:is-on-lan": {
                                  "description": "'true' if on a lan. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "boolean"
                                },
                                "ietf-sr-topology-state:information-source": {
                                  "description": "Indicates the type of the information source. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "unknown",
                                  "enum": [
                                    "unknown",
                                    "locally-configured",
                                    "ospfv2",
                                    "ospfv3",
                                    "isis",
                                    "bgp-ls",
                                    "system-processed",
                                    "other"
                                  ]
                                },
                                "ietf-sr-topology-state:information-source-instance": {
                                  "description": "The name indicating the instance of the information\nsource. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "ietf-sr-topology-state:information-source-state": {
                                  "description": "The container contains state attributes related to\nthe information source. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "ietf-sr-topology-state:credibility-preference": {
                                      "description": "The preference value to calculate the traffic\nengineering database credibility value used for\ntie-break selection between different\ninformation-source values.\nHigher value is more preferable. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "uint16"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ietf-l3-unicast-topology-state:l3-topology-attributes": {
                    "description": "Contains topology attributes (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "ietf-l3-unicast-topology-state:name": {
                        "description": "Name of the topology (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "ietf-l3-unicast-topology-state:flag": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "Topology flags (leaf-list)",
                          "type": "string",
                          "format": "identityref"
                        }
                      },
                      "cisco-crosswork-isis-topology:isis-topology-attributes": {
                        "description": "Contains ISIS topology attributes.\n*** Contains a single Area address, which means each nw:ietf-network\nmust contain a single ISIS Area. is this what we want??\n*** How do we identify areas from different ISIS domains??\n*** What would the behavior be for a query asking for all ietf-networks?? (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "cisco-crosswork-isis-topology:area": {
                            "description": "ISIS Area address. Numerical value of 1 to 13 octets (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      },
                      "cisco-crosswork-ospf-topology:ospf-topology-attributes": {
                        "description": "OSPF topology attributes (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "cisco-crosswork-ospf-topology:area-id": {
                            "description": "OSPF area ID, represented as an IPv4 address value.\n*** Contains a single Area ID, which means each ietf-network\nmust contain a single OSPF Area. is this what we want??\n*** How do we identify areas from different OSPF domains?? (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      },
                      "ietf-sr-topology-state:sr": {
                        "description": "Containing SR attributes. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "ietf-sr-topology-state:srgb": {
                            "type": "array",
                            "description": "List of global blocks to be advertised. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "ietf-sr-topology-state:lower-bound": {
                                  "description": "Lower value in the label range. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint32"
                                },
                                "ietf-sr-topology-state:upper-bound": {
                                  "description": "Upper value in the label range. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint32"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data": {
      "type": "object",
      "properties": {
        "ietf-restconf:data": {
          "type": "object",
          "description": "This resource represents the combined configuration and state data resources that can be accessed by a client and cannot be created or deleted by the client. See RESTCONF RFC 8040 for further information.",
          "x-yang": {
            "type": "datastore"
          },
          "properties": {
          }
        }
      }
    }
  }
}
