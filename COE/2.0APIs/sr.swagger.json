{
  "swagger": "2.0",
  "info": {
    "title": "Segment Routing Policy Details",
    "description": "This module defines a Data Model for reporting operational state of\n Segment Routing Policies.\n\nCopyright (c) 2019 by Cisco Systems, Inc.\nAll rights reserved.",
    "version": "2019-10-20",
    "contact": {
      "name": "Crosswork Team, Cisco",
      "email": "support@cisco.com"
    },
    "license": {
      "name": "Cisco Software License Agreement",
      "url": "http://www.cisco.com/public/sw-license-agreement.html"
    }
  },
  "basePath": "/crosswork/nbi/optima/v1/restconf",
  "tags": [{
    "name": "data",
    "description": "data resources"
  }],
  "schemes": [
    "https"
  ],
  "produces": [
    "application/yang-data+json"
  ],
  "consumes": [
    "application/yang-data+json"
  ],
  "paths": {
    "/data/cisco-crosswork-segment-routing-policy:sr-policies": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "",
        "description": "Retrieve all SR Policies for the network.",
        "operationId": "data_cisco_crosswork_segment_routing_policy_sr_policies_get",
        "produces": [
          "application/yang-data+json"
        ],
        "responses": {
          "200": {
            "description": "Container of MPLS Segment Routing Policies",
            "schema": {
              "$ref": "#/definitions/data_cisco-crosswork-segment-routing-policy_sr-policies"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [{
          "basicAuth": []
        }]
      }
    },
    "/data/cisco-crosswork-segment-routing-policy:sr-policies/policy={policy-headend},{policy-endpoint},{policy-color}": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "",
        "description": "Retrieve the SR Policy that matches the given Headend, Endpoint, and Color values. The headend and endpoint values are IP addresses.",
        "operationId": "data_cisco_crosswork_segment_routing_policy_sr_policies_policy_policy_headend_policy_endpoint_policy_color_get",
        "produces": [
          "application/yang-data+json"
        ],
        "parameters": [{
            "$ref": "#/parameters/policy-headend"
          },
          {
            "$ref": "#/parameters/policy-endpoint"
          },
          {
            "$ref": "#/parameters/policy-color"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/data_cisco-crosswork-segment-routing-policy_sr-policies_policy_policy-headend_policy-endpoint_policy-color"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [{
          "basicAuth": []
        }]
      }
    }
  },
  "parameters": {
    "content": {
      "name": "content",
      "in": "query",
      "description": "controlling descendant nodes in response",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "config",
      "enum": [
        "config",
        "nonconfig",
        "all"
      ]
    },
    "depth": {
      "name": "depth",
      "in": "query",
      "description": "limit the depth of nodes in response",
      "required": false,
      "type": "integer",
      "format": "uint16"
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "optionally identify specific data nodes in response",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "filter": {
      "name": "filter",
      "in": "query",
      "description": "xpath expression to filter data nodes in response",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "with-defaults": {
      "name": "with-defaults",
      "in": "query",
      "description": "controlling default values in response",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "report-all",
      "enum": [
        "report-all",
        "trim",
        "explicit",
        "report-all-tagged"
      ]
    },
    "insert": {
      "name": "insert",
      "in": "query",
      "description": "controlling the order when adding new list elements",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "first",
      "enum": [
        "first",
        "last",
        "before",
        "after"
      ]
    },
    "point": {
      "name": "point",
      "in": "query",
      "description": "used to specify the insertion point",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "policy-headend": {
      "name": "policy-headend",
      "in": "path",
      "description": "Policy head end IP address",
      "required": true,
      "type": "string",
      "format": "union"
    },
    "policy-endpoint": {
      "name": "policy-endpoint",
      "in": "path",
      "description": "Policy end point IP address",
      "required": true,
      "type": "string",
      "format": "union"
    },
    "policy-color": {
      "name": "policy-color",
      "in": "path",
      "description": "Color associated with the policy",
      "required": true,
      "type": "integer",
      "format": "uint32"
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "201": {
      "description": "Created"
    },
    "204": {
      "description": "No Content"
    },
    "400": {
      "description": "Bad Request"
    },
    "401": {
      "description": "Unauthorized"
    },
    "404": {
      "description": "Not Found"
    },
    "405": {
      "description": "Method Not Allowed"
    },
    "409": {
      "description": "Conflict"
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "data_cisco-crosswork-segment-routing-policy_sr-policies_policy_policy-headend_policy-endpoint_policy-color": {
      "type": "object",
      "properties": {
        "cisco-crosswork-segment-routing-policy:policy": {
          "type": "array",
          "description": "(list)",
          "items": {
            "type": "object",
            "properties": {
              "headend": {
                "description": "Policy head end IP address (leaf)",
                "type": "string",
                "format": "union"
              },
              "endpoint": {
                "description": "Policy end point IP address (leaf)",
                "type": "string",
                "format": "union"
              },
              "color": {
                "description": "Color associated with the policy (leaf)",
                "type": "integer",
                "format": "uint32"
              },
              "description": {
                "description": "Policy description (leaf)",
                "type": "string",
                "format": "string"
              },
              "admin-state": {
                "description": "Administrative state of the policy (leaf)",
                "type": "string",
                "format": "enumeration",
                "default": "UP",
                "enum": [
                  "UP",
                  "DOWN"
                ]
              },
              "oper-state": {
                "description": "Operational state of the policy (leaf)",
                "type": "string",
                "format": "enumeration",
                "default": "UP",
                "enum": [
                  "UP",
                  "DOWN"
                ]
              },
              "sr-policy-type": {
                "description": "The Crosswork SR Policy type for this policy (leaf)",
                "type": "string",
                "format": "enumeration",
                "default": "CW-CONFIGURED",
                "enum": [
                  "CW-CONFIGURED",
                  "CW-CONFIGURED-BW",
                  "CW-TACTICAL-TE",
                  "OTHER"
                ]
              },
              "policy-details": {
                "description": "SR Policy details (non-presence)",
                "type": "object",
                "properties": {
                  "binding-sid": {
                    "description": "Binding SID assigned to the policy\n*** Or is BSID associated with a path? (leaf)",
                    "type": "integer",
                    "format": "uint32"
                  },
                  "msd": {
                    "description": "Maximum SID Depth\n*** Should this be associated with a path or is it more of a\nheadend property? (leaf)",
                    "type": "integer",
                    "format": "uint32"
                  },
                  "pce-controlled": {
                    "description": "If true, policy can be re-optimized by PCE (leaf)",
                    "type": "string",
                    "format": "boolean"
                  },
                  "delegated-pce": {
                    "description": "IPv4 or IPv6 address of the delegated PCE (leaf)",
                    "type": "string",
                    "format": "union"
                  },
                  "sub-delegated-pce": {
                    "description": "IPv4 or IPv6 address of the sub-delegated PCE (leaf)",
                    "type": "string",
                    "format": "union"
                  },
                  "pcc-address": {
                    "description": "IPv4 or IPv6 address of PCC (Path Compute Client) (leaf)",
                    "type": "string",
                    "format": "union"
                  },
                  "pcep-info": {
                    "description": "PCEP connection details (non-presence)",
                    "type": "object",
                    "properties": {
                      "pcep-id": {
                        "description": "PCE protocol identifier (leaf)",
                        "type": "integer",
                        "format": "uint32"
                      },
                      "pcep-flag-d": {
                        "description": "PCEP LSP delegation flag (leaf)",
                        "type": "string",
                        "format": "boolean"
                      },
                      "pcep-flag-s": {
                        "description": "PCEP LSP state-sync flag (leaf)",
                        "type": "string",
                        "format": "boolean"
                      },
                      "pcep-flag-r": {
                        "description": "PCEP LSP remove flag (leaf)",
                        "type": "string",
                        "format": "boolean"
                      },
                      "pcep-flag-a": {
                        "description": "PCEP LSP admin flag (leaf)",
                        "type": "string",
                        "format": "boolean"
                      },
                      "pcep-flag-o": {
                        "description": "PCEP LSP operation flag (leaf)",
                        "type": "integer",
                        "format": "byte"
                      },
                      "pcep-flag-c": {
                        "description": "PCEP LSP initiated flag (leaf)",
                        "type": "integer",
                        "format": "byte"
                      }
                    }
                  },
                  "path": {
                    "type": "array",
                    "description": "List of paths associated with the policy (list)",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path-name": {
                          "description": "Path Name\n*** Is there also an ID (equivalent of LSP ID) to identify a path? (leaf)",
                          "type": "string",
                          "format": "string"
                        },
                        "path-type": {
                          "description": "Path type (explicit or dynamic) (leaf)",
                          "type": "string",
                          "format": "enumeration",
                          "default": "PT-UNKNOWN",
                          "enum": [
                            "PT-UNKNOWN",
                            "PT-EXPLICIT",
                            "PT-DYNAMIC"
                          ]
                        },
                        "preference": {
                          "description": "Configured Preference for this path (leaf)",
                          "type": "integer",
                          "format": "uint16"
                        },
                        "optimization-metric": {
                          "description": "(non-presence)",
                          "type": "object",
                          "properties": {
                            "metric-type": {
                              "description": "Metric type to optimize for this path (leaf)",
                              "type": "string",
                              "format": "enumeration",
                              "default": "IGP-METRIC",
                              "enum": [
                                "IGP-METRIC",
                                "TE-METRIC",
                                "DELAY",
                                "HOP-COUNT"
                              ]
                            },
                            "metric-value": {
                              "description": "Cumulative metric value for the path (leaf)",
                              "type": "integer",
                              "format": "uint32"
                            }
                          }
                        },
                        "constraints": {
                          "description": "(non-presence)",
                          "type": "object",
                          "properties": {
                            "affinity": {
                              "description": "Affinity information (non-presence)",
                              "type": "object",
                              "properties": {
                                "exclude-any": {
                                  "description": "Exclude-any attribute flags (leaf)",
                                  "type": "integer",
                                  "format": "uint32"
                                },
                                "include-any": {
                                  "description": "Include-any attribute flags (leaf)",
                                  "type": "integer",
                                  "format": "uint32"
                                },
                                "include-all": {
                                  "description": "Include-all attribute flags (leaf)",
                                  "type": "integer",
                                  "format": "uint32"
                                }
                              }
                            },
                            "association-info": {
                              "description": "Association (Disjoint Group) information (non-presence)",
                              "type": "object",
                              "properties": {
                                "assoc-source": {
                                  "description": "Association Source (leaf)",
                                  "type": "string",
                                  "format": "union"
                                },
                                "assoc-type": {
                                  "description": "Association Type (leaf)",
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "LINK-DISJOINTNESS",
                                  "enum": [
                                    "LINK-DISJOINTNESS",
                                    "NODE-DISJOINTNESS",
                                    "SRLG-DISJOINTNESS",
                                    "SRLG-NODE-DISJOINTNESS"
                                  ]
                                },
                                "assoc-id": {
                                  "description": "Association ID (Disjoint Group ID) (leaf)",
                                  "type": "integer",
                                  "format": "uint32"
                                }
                              }
                            },
                            "bandwidth-mbps": {
                              "description": "Requested bandwidth in mega-bits-per-sec (leaf)",
                              "type": "integer",
                              "format": "uint64"
                            },
                            "unprotected-only-flag": {
                              "description": "If true, path must include unprotected SIDs only, else\nprotected SIDs should be preferred (leaf)",
                              "type": "string",
                              "format": "boolean"
                            }
                          }
                        },
                        "computed-time": {
                          "description": "Time stamp when the path was computed (leaf)",
                          "type": "integer",
                          "format": "uint64"
                        },
                        "profile-id": {
                          "description": "Associates this path with a forwarding profile on the router/ device (leaf)",
                          "type": "integer",
                          "format": "uint32"
                        },
                        "hop": {
                          "type": "array",
                          "description": "Segment/ Hop list for this path (list)",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "SID type (leaf)",
                                "type": "string",
                                "format": "enumeration",
                                "default": "IPV4-NODE-SID",
                                "enum": [
                                  "IPV4-NODE-SID",
                                  "IPV4-ADJ-SID",
                                  "IPV6-NODE-SID",
                                  "IPV6-ADJ-SID"
                                ]
                              },
                              "label": {
                                "description": "MPLS label (20 bits) (leaf)",
                                "type": "integer",
                                "format": "uint32"
                              },
                              "local-ip-addr": {
                                "description": "Local IPv4 or IPv6 address. If type is a Node SID, this will be\nthe node's IP address, usually associated with a loopback interface (leaf)",
                                "type": "string",
                                "format": "union"
                              },
                              "remote-ip-addr": {
                                "description": "The remote IPv4 or IPv6 address if type is an adjacency SID, else n/a (leaf)",
                                "type": "string",
                                "format": "union"
                              },
                              "protected-flag": {
                                "description": "If true, the SID is protected (leaf)",
                                "type": "string",
                                "format": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-crosswork-segment-routing-policy_sr-policies": {
      "type": "object",
      "properties": {
        "cisco-crosswork-segment-routing-policy:sr-policies": {
          "description": "Container of MPLS Segment Routing Policies (non-presence)",
          "type": "object",
          "properties": {
            "policy": {
              "type": "array",
              "description": "(list)",
              "items": {
                "type": "object",
                "properties": {
                  "headend": {
                    "description": "Policy head end IP address (leaf)",
                    "type": "string",
                    "format": "union"
                  },
                  "endpoint": {
                    "description": "Policy end point IP address (leaf)",
                    "type": "string",
                    "format": "union"
                  },
                  "color": {
                    "description": "Color associated with the policy (leaf)",
                    "type": "integer",
                    "format": "uint32"
                  },
                  "description": {
                    "description": "Policy description (leaf)",
                    "type": "string",
                    "format": "string"
                  },
                  "admin-state": {
                    "description": "Administrative state of the policy (leaf)",
                    "type": "string",
                    "format": "enumeration",
                    "default": "UP",
                    "enum": [
                      "UP",
                      "DOWN"
                    ]
                  },
                  "oper-state": {
                    "description": "Operational state of the policy (leaf)",
                    "type": "string",
                    "format": "enumeration",
                    "default": "UP",
                    "enum": [
                      "UP",
                      "DOWN"
                    ]
                  },
                  "sr-policy-type": {
                    "description": "The Crosswork SR Policy type for this policy (leaf)",
                    "type": "string",
                    "format": "enumeration",
                    "default": "CW-CONFIGURED",
                    "enum": [
                      "CW-CONFIGURED",
                      "CW-CONFIGURED-BW",
                      "CW-TACTICAL-TE",
                      "OTHER"
                    ]
                  },
                  "policy-details": {
                    "description": "SR Policy details (non-presence)",
                    "type": "object",
                    "properties": {
                      "binding-sid": {
                        "description": "Binding SID assigned to the policy\n*** Or is BSID associated with a path? (leaf)",
                        "type": "integer",
                        "format": "uint32"
                      },
                      "msd": {
                        "description": "Maximum SID Depth\n*** Should this be associated with a path or is it more of a\nheadend property? (leaf)",
                        "type": "integer",
                        "format": "uint32"
                      },
                      "pce-controlled": {
                        "description": "If true, policy can be re-optimized by PCE (leaf)",
                        "type": "string",
                        "format": "boolean"
                      },
                      "delegated-pce": {
                        "description": "IPv4 or IPv6 address of the delegated PCE (leaf)",
                        "type": "string",
                        "format": "union"
                      },
                      "sub-delegated-pce": {
                        "description": "IPv4 or IPv6 address of the sub-delegated PCE (leaf)",
                        "type": "string",
                        "format": "union"
                      },
                      "pcc-address": {
                        "description": "IPv4 or IPv6 address of PCC (Path Compute Client) (leaf)",
                        "type": "string",
                        "format": "union"
                      },
                      "pcep-info": {
                        "description": "PCEP connection details (non-presence)",
                        "type": "object",
                        "properties": {
                          "pcep-id": {
                            "description": "PCE protocol identifier (leaf)",
                            "type": "integer",
                            "format": "uint32"
                          },
                          "pcep-flag-d": {
                            "description": "PCEP LSP delegation flag (leaf)",
                            "type": "string",
                            "format": "boolean"
                          },
                          "pcep-flag-s": {
                            "description": "PCEP LSP state-sync flag (leaf)",
                            "type": "string",
                            "format": "boolean"
                          },
                          "pcep-flag-r": {
                            "description": "PCEP LSP remove flag (leaf)",
                            "type": "string",
                            "format": "boolean"
                          },
                          "pcep-flag-a": {
                            "description": "PCEP LSP admin flag (leaf)",
                            "type": "string",
                            "format": "boolean"
                          },
                          "pcep-flag-o": {
                            "description": "PCEP LSP operation flag (leaf)",
                            "type": "integer",
                            "format": "byte"
                          },
                          "pcep-flag-c": {
                            "description": "PCEP LSP initiated flag (leaf)",
                            "type": "integer",
                            "format": "byte"
                          }
                        }
                      },
                      "path": {
                        "type": "array",
                        "description": "List of paths associated with the policy (list)",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path-name": {
                              "description": "Path Name\n*** Is there also an ID (equivalent of LSP ID) to identify a path? (leaf)",
                              "type": "string",
                              "format": "string"
                            },
                            "path-type": {
                              "description": "Path type (explicit or dynamic) (leaf)",
                              "type": "string",
                              "format": "enumeration",
                              "default": "PT-UNKNOWN",
                              "enum": [
                                "PT-UNKNOWN",
                                "PT-EXPLICIT",
                                "PT-DYNAMIC"
                              ]
                            },
                            "preference": {
                              "description": "Configured Preference for this path (leaf)",
                              "type": "integer",
                              "format": "uint16"
                            },
                            "optimization-metric": {
                              "description": "(non-presence)",
                              "type": "object",
                              "properties": {
                                "metric-type": {
                                  "description": "Metric type to optimize for this path (leaf)",
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "IGP-METRIC",
                                  "enum": [
                                    "IGP-METRIC",
                                    "TE-METRIC",
                                    "DELAY",
                                    "HOP-COUNT"
                                  ]
                                },
                                "metric-value": {
                                  "description": "Cumulative metric value for the path (leaf)",
                                  "type": "integer",
                                  "format": "uint32"
                                }
                              }
                            },
                            "constraints": {
                              "description": "(non-presence)",
                              "type": "object",
                              "properties": {
                                "affinity": {
                                  "description": "Affinity information (non-presence)",
                                  "type": "object",
                                  "properties": {
                                    "exclude-any": {
                                      "description": "Exclude-any attribute flags (leaf)",
                                      "type": "integer",
                                      "format": "uint32"
                                    },
                                    "include-any": {
                                      "description": "Include-any attribute flags (leaf)",
                                      "type": "integer",
                                      "format": "uint32"
                                    },
                                    "include-all": {
                                      "description": "Include-all attribute flags (leaf)",
                                      "type": "integer",
                                      "format": "uint32"
                                    }
                                  }
                                },
                                "association-info": {
                                  "description": "Association (Disjoint Group) information (non-presence)",
                                  "type": "object",
                                  "properties": {
                                    "assoc-source": {
                                      "description": "Association Source (leaf)",
                                      "type": "string",
                                      "format": "union"
                                    },
                                    "assoc-type": {
                                      "description": "Association Type (leaf)",
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "LINK-DISJOINTNESS",
                                      "enum": [
                                        "LINK-DISJOINTNESS",
                                        "NODE-DISJOINTNESS",
                                        "SRLG-DISJOINTNESS",
                                        "SRLG-NODE-DISJOINTNESS"
                                      ]
                                    },
                                    "assoc-id": {
                                      "description": "Association ID (Disjoint Group ID) (leaf)",
                                      "type": "integer",
                                      "format": "uint32"
                                    }
                                  }
                                },
                                "bandwidth-mbps": {
                                  "description": "Requested bandwidth in mega-bits-per-sec (leaf)",
                                  "type": "integer",
                                  "format": "uint64"
                                },
                                "unprotected-only-flag": {
                                  "description": "If true, path must include unprotected SIDs only, else\nprotected SIDs should be preferred (leaf)",
                                  "type": "string",
                                  "format": "boolean"
                                }
                              }
                            },
                            "computed-time": {
                              "description": "Time stamp when the path was computed (leaf)",
                              "type": "integer",
                              "format": "uint64"
                            },
                            "profile-id": {
                              "description": "Associates this path with a forwarding profile on the router/ device (leaf)",
                              "type": "integer",
                              "format": "uint32"
                            },
                            "hop": {
                              "type": "array",
                              "description": "Segment/ Hop list for this path (list)",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "description": "SID type (leaf)",
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "IPV4-NODE-SID",
                                    "enum": [
                                      "IPV4-NODE-SID",
                                      "IPV4-ADJ-SID",
                                      "IPV6-NODE-SID",
                                      "IPV6-ADJ-SID"
                                    ]
                                  },
                                  "label": {
                                    "description": "MPLS label (20 bits) (leaf)",
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "local-ip-addr": {
                                    "description": "Local IPv4 or IPv6 address. If type is a Node SID, this will be\nthe node's IP address, usually associated with a loopback interface (leaf)",
                                    "type": "string",
                                    "format": "union"
                                  },
                                  "remote-ip-addr": {
                                    "description": "The remote IPv4 or IPv6 address if type is an adjacency SID, else n/a (leaf)",
                                    "type": "string",
                                    "format": "union"
                                  },
                                  "protected-flag": {
                                    "description": "If true, the SID is protected (leaf)",
                                    "type": "string",
                                    "format": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
