{
  "swagger": "2.0",
  "info": {
    "title": "Crosswork Network Controller SR-TE Policy API",
    "description": "This document contains details of the Crosswork Network Controller SR-TE Policy APIs",
    "version": "2.0",
    "contact": {
      "name": "Crosswork Team, Cisco",
      "email": "support@cisco.com"
    },
    "license": {
      "name": "Cisco Software License Agreement",
      "url": "http://www.cisco.com/public/sw-license-agreement.html"
    }
  },
  "basePath": "/crosswork",
  "tags": [
  ],
  "schemes": [
    "https",
    "http"
  ],
  "produces": [
    "application/yang-data+xml",
    "application/yang-data+json"
  ],
  "consumes": [
    "application/yang-data+xml",
    "application/yang-data+json"
  ],
  "paths": {

    "/nbi/cat-inventory/v1/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-policies:policies/policy={policy-name}": {
      "get": {
        "tags": [
          "SR-Policy Retrieval"
        ],
        "summary": "",
        "description": "Return SR-TE Policy details.",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_policy_policy_name_get",
        "parameters": [
          {
            "$ref": "#/parameters/policy-name"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. SR-TE policy was returned.",
            "schema": {
              "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/proxy/nso/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-policies:policies/policy={policy-name}": {
      "post": {
        "tags": [
          "SR-Policy Provision"
        ],
        "summary": "",
        "description": "SR-Policy",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_policy_policy_name_post",
        "parameters": [
          {
            "$ref": "#/parameters/policy-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. The SR-TE policy was created."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "SR-Policy Provision"
        ],
        "summary": "",
        "description": "SR-Policy",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_policy_policy_name_put",
        "parameters": [
          {
            "$ref": "#/parameters/policy-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. The SR-TE policy was updated."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "SR-Policy Provision"
        ],
        "summary": "",
        "description": "SR-Policy",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_policy_policy_name_patch",
        "parameters": [
          {
            "$ref": "#/parameters/policy-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. The SR-TE policy was modified."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "SR-Policy Provision"
        ],
        "summary": "",
        "description": "SR-Policy",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_policy_policy_name_delete",
        "parameters": [
          {
            "$ref": "#/parameters/policy-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. The SR-TE policy was deleted."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/nbi/cat-inventory/v1/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-policies:policies/policy-plan={policy-plan-name}": {
      "get": {
        "tags": [
          "SR-Policy Retrieval"
        ],
        "summary": "",
        "description": "",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_policy_plan_policy_plan_name_get",
        "parameters": [
          {
            "$ref": "#/parameters/policy-plan-name"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. SR-TE policy plan was returned.",
            "schema": {
              "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_policies_policy-plan_policy-plan-name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },

    "/nbi/cat-inventory/v1/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-policies:policies/sid-list={sid-list-name}": {
      "get": {
        "tags": [
          "SID List Retrieval"
        ],
        "summary": "",
        "description": "SID list",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_sid_list_sid_list_name_get",
        "parameters": [
          {
            "$ref": "#/parameters/sid-list-name"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. SID list was returned.",
            "schema": {
              "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/proxy/nso/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-policies:policies/sid-list={sid-list-name}": {
      "post": {
        "tags": [
          "SID List Configure"
        ],
        "summary": "",
        "description": "SID list",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_sid_list_sid_list_name_post",
        "parameters": [
          {
            "$ref": "#/parameters/sid-list-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. SID list was created."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "SID List Configure"
        ],
        "summary": "",
        "description": "SID list",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_sid_list_sid_list_name_put",
        "parameters": [
          {
            "$ref": "#/parameters/sid-list-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. SID list was updated."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "SID List Configure"
        ],
        "summary": "",
        "description": "SID list",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_sid_list_sid_list_name_patch",
        "parameters": [
          {
            "$ref": "#/parameters/sid-list-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. SID list was modified."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "SID List Configure"
        ],
        "summary": "",
        "description": "SID list",
        "operationId": "data_cisco_sr_te_cfp_sr_te_policies_sid_list_sid_list_name_delete",
        "parameters": [
          {
            "$ref": "#/parameters/sid-list-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. SID list was deleted."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },

    "/nbi/cat-inventory/v1/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-odn:odn/odn-template={odn-template-name}": {
      "get": {
        "tags": [
          "SR-TE ODN Template Retrieval"
        ],
        "summary": "",
        "description": "SR-TE ODN template",
        "operationId": "data_cisco_sr_te_cfp_sr_te_odn_odn_template_odn_template_name_get",
        "parameters": [
          {
            "$ref": "#/parameters/odn-template-name"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. SR-TE ODN template was returned.",
            "schema": {
              "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/proxy/nso/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-odn:odn/odn-template={odn-template-name}": {
      "post": {
        "tags": [
          "SR-TE ODN Template Configure"
        ],
        "summary": "",
        "description": "SR-TE ODN template",
        "operationId": "data_cisco_sr_te_cfp_sr_te_odn_odn_template_odn_template_name_post",
        "parameters": [
          {
            "$ref": "#/parameters/odn-template-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. SR-TE ODN template was created."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "SR-TE ODN Template Configure"
        ],
        "summary": "",
        "description": "SR-TE ODN template",
        "operationId": "data_cisco_sr_te_cfp_sr_te_odn_odn_template_odn_template_name_put",
        "parameters": [
          {
            "$ref": "#/parameters/odn-template-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. SR-TE ODN template was updated."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "SR-TE ODN Template Configure"
        ],
        "summary": "",
        "description": "SR-TE ODN template",
        "operationId": "data_cisco_sr_te_cfp_sr_te_odn_odn_template_odn_template_name_patch",
        "parameters": [
          {
            "$ref": "#/parameters/odn-template-name"
          },
          {
            "$ref": "#/parameters/data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. SR-TE ODN template was modified."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "SR-TE ODN Template Configure"
        ],
        "summary": "",
        "description": "SR-TE ODN template",
        "operationId": "data_cisco_sr_te_cfp_sr_te_odn_odn_template_odn_template_name_delete",
        "parameters": [
          {
            "$ref": "#/parameters/odn-template-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. SR-TE ODN template was deleted."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/nbi/cat-inventory/v1/restconf/data/cisco-sr-te-cfp:sr-te/cisco-sr-te-cfp-sr-odn:odn/odn-template-plan={odn-template-plan-name}": {
      "get": {
        "tags": [
          "SR-TE ODN Template Retrieval"
        ],
        "summary": "",
        "description": "",
        "operationId": "data_cisco_sr_te_cfp_sr_te_odn_odn_template_plan_odn_template_plan_name_get",
        "parameters": [
          {
            "$ref": "#/parameters/odn-template-plan-name"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. SR-TE ODN template plan was returned.",
            "schema": {
              "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_odn_odn-template-plan_odn-template-plan-name"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }

  },
  "parameters": {
    "policy-name": {
      "name": "policy-name",
      "in": "path",
      "description": "Unique identifier for a SR-Policy",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "policy-plan-name": {
      "name": "policy-plan-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "odn-template-name": {
      "name": "odn-template-name",
      "in": "path",
      "description": "Unique identifier for a ODN template",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "odn-template-plan-name": {
      "name": "odn-template-plan-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "sid-list-name": {
      "name": "sid-list-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name": {
      "name": "odn-template",
      "in": "body",
      "description": "SR-TE ODN template",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name"
      }
    },
    "data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name": {
      "name": "policy",
      "in": "body",
      "description": "SR-Policy",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name"
      }
    },
    "data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name": {
      "name": "sid-list",
      "in": "body",
      "description": "SID list",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name"
      }
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "201": {
      "description": "Created. The request was successful. One or more new resources were created."
    },
    "204": {
      "description": "No Content. The request was successful and there is no additional content in the response body."
    },
    "400": {
      "description": "Bad Request. The request is malformed in some way and the server cannot process it."
    },
    "401": {
      "description": "Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource."
    },
    "404": {
      "description": "Not Found. The client made a request for a resource that does not exist."
    },
    "405": {
      "description": "Method Not Allowed. The method received in the request line is known by the origin server but not supported by the target resource."
    },
    "409": {
      "description": "Conflict. The request could not be completed due to a conflict with the current state of the target resource."
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "data_cisco-sr-te-cfp_sr-te_policies_policy_policy-name": {
      "type": "object",
      "properties": {
        "cisco-sr-te-cfp-sr-policies:policy": {
          "type": "array",
          "description": "SR-Policy (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "modified": {
                "description": "Devices and other services this service has modified directly or\nindirectly (through another service). (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "devices": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              },
              "directly-modified": {
                "description": "Devices and other services this service has explicitly\nmodified. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "devices": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              },
              "device-list": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "A list of managed devices this service instance has manipulated.\n\nThis leaf is obsolete. Use 'modified' instead. (leaf-list)",
                  "type": "string",
                  "format": "string"
                }
              },
              "used-by-customer-service": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "(leaf-list)",
                  "type": "string",
                  "format": "leafref"
                }
              },
              "commit-queue": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "queue-item": {
                    "type": "array",
                    "description": "When a service is committed through the commit queue, these\nfields act as references regarding the state of this service\ninstance. In the worst case scenario, a service instance is\nin the 'failed' state. This means that parts of the queued\ncommit failed.\n\nIf a service gets committed through the commit queue and the\ncommit fails, the backpointers in the service data are\nfollowed and the affected service instances are updated and\nset to the 'failed' state.\n\nDepending on the nature of the failure, different techniques\nto reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere\n  with the error recovery procedure.\n  Do a sync-from on the non-completed device(s) and then\n  re-deploy the failed service(s) with the\n  'reconcile' option to reconcile original data,\n  i.e., take control of that data. This option\n  acknowledges other services controlling the same data.\n  The reference count will indicate how many services control\n  the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere\n  with the error recovery procedure.\n  Use un-deploy with the no-networking option on the\n  service and then do sync-from on the non-completed\n  device(s). Make sure the error is fixed and then\n  re-deploy the failed service(s) with the\n  'reconcile' option. Release any queue lock\n  that was created.\n\nIn the 'failed' state, these fields are reset if a new\ncommit queue transaction is affecting this service, or\nthe service is re-deployed, or these fields are deleted\nusing the specific purge action.\nIn other cases the 'failed' state will remain. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "If the queue item in the commit queue refers to this service\nthis is the queue number. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint64"
                        },
                        "status": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "waiting",
                          "enum": [
                            "waiting",
                            "executing",
                            "blocking",
                            "blocked",
                            "failed",
                            "admin-cleared",
                            "commit-queue-failed"
                          ]
                        },
                        "cleared-by-admin": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "[null]"
                        },
                        "no-of-impacted-services": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "failed-device": {
                          "type": "array",
                          "description": "If the 'status' leaf is 'failed', this list contains detailed\ninformation on the devices that were responsible for the\nerror of the commit queue item. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "time": {
                                "description": "Time when the failure occured. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "config-data": {
                                "description": "The configuration data that was rejected by the device\nin XML format. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "error": {
                                "description": "The error returned by the device. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "private": {
                "description": "NCS service related internal data stored here. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by FastMap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "property-list": {
                    "description": "FASTMAP service instance data used by the service implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "re-deploy-counter": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "int32"
                  },
                  "latest-commit-params": {
                    "description": "Latest transactions commit parameters are stored there, these are\nused in reactive-re-deploy actions that must have the same\nparameters as the original service commit. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "latest-u-info": {
                    "description": "Latest transactions user info is stored there, these are\nused in reactive-re-deploy actions that must be performed by\na user with the same user info. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "plan-location": {
                "description": "Location of the service plan. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "instance-identifier"
              },
              "log": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "log-entry": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "when": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "What type of log entry is this. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "level": {
                          "description": "What level this log entry has. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "all",
                          "enum": [
                            "all",
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error"
                          ]
                        },
                        "message": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "custom-template": {
                "type": "array",
                "description": "Custom templates to apply when device is ready (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template to apply (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template one time (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "iteration": {
                      "type": "array",
                      "description": "Apply custom template multiple times with iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "description": "<1-65535>;;Iteration number (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template in iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": {
                "description": "Unique identifier for a SR-Policy (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "head-end": {
                "type": "array",
                "description": "Policy headend router. Only one headend can be given for a policy service (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    }
                  }
                }
              },
              "tail-end": {
                "description": "<A.B.C.D or X:X::X> - Router-Id of the tail-end device of the SR policy (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "union"
              },
              "color": {
                "description": "<1-4294967295> - SR policy color (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "binding-sid": {
                "description": "<16-1048575> - Binding SID of the SR-Policy applied at the headend (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "path": {
                "type": "array",
                "description": "SR-Policy candidate paths (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "preference": {
                      "description": "<1-65535> - Path preference - Higher value indicates higher preference (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    },
                    "explicit": {
                      "description": "Use a predefine explicit path (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "sid-list": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "weight": {
                                "description": "<1-4294967295> - SID-List weight  (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint32"
                              }
                            }
                          }
                        },
                        "constraints": {
                          "description": "(non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "disjoint-path": {
                              "description": "Compute a path that is disjoint from another path in the same disjoint-group (presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "true"
                              },
                              "properties": {
                                "type": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "link",
                                  "enum": [
                                    "link",
                                    "node",
                                    "srlg",
                                    "srlg-node"
                                  ]
                                },
                                "group-id": {
                                  "description": "<1-65535> - Group ID (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                },
                                "sub-id": {
                                  "description": "<1-65535>;;Subgroup ID number (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                },
                                "source": {
                                  "description": "<A.B.C.D> - Association source (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            },
                            "affinity": {
                              "description": "Compute paths with link color constraint (presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "true"
                              },
                              "properties": {
                                "rule": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "include-any",
                                        "enum": [
                                          "include-any",
                                          "include-all",
                                          "exclude-any"
                                        ]
                                      },
                                      "color": {
                                        "type": "array",
                                        "x-yang": {
                                          "type": "leaf-list"
                                        },
                                        "items": {
                                          "description": "One of affinity-map colors (leaf-list)",
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "segments": {
                              "description": "Path segments constraints (presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "true"
                              },
                              "properties": {
                                "sid-algorithm": {
                                  "description": "<128-255> - Specify the path computation metric options (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "bandwidth": {
                "description": "<1-4294967295> Requested Bandwidth value in kbps (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "auto-route": {
                "description": "Enable Autoroute on this SR-policy (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "auto-route-metric": {
                    "description": "Autoroute metric (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "metric-relative-value": {
                        "description": "<(-10)-10> - Autoroute relative metric (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "int32"
                      }
                    }
                  },
                  "include-prefixes": {
                    "description": "Autoroute include prefix table configuration (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "include-prefix": {
                        "type": "array",
                        "description": "<A.B.C.D/prefix> - Autoroute IP prefix to include (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "prefix-address": {
                              "description": "<A.B.C.D/prefix> - Autoroute IP prefix to include (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "force-sr-include": {
                    "description": "Force autoroute policy to be safe for carrying SR labelled traffic (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "forward-class": {
                    "description": "<0-7> - Specify forward class for policy based routing (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "byte"
                  }
                }
              },
              "action": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-sr-te-cfp_sr-te_policies_policy-plan_policy-plan-name": {
      "type": "object",
      "properties": {
        "cisco-sr-te-cfp-sr-policies:policy-plan": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "plan": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "component": {
                    "type": "array",
                    "description": "A component has a type and a list of states.  It is required\nthat the first plan component is of type ncs:self.  It is\nalso required that the first state of a component is ncs:init\nand the last state is ncs:ready.  A service can in addition\nto the 'self' component have any number of components. These\nadditional components will have types that are defined by\nuser specified YANG identities. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "The plan component type is defined by an YANG identity.\nIt is used to identify the characteristics of a certain component.\nTherefore, if two components in the same service are of the same\ntype they should be identical with respect to number, type and order\nof their contained states. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "state": {
                          "type": "array",
                          "description": "A plan state represents a certain step or stage that a service needs\nto execute and/or reach. It is identified as an YANG identity.\nThere are two predefined states ncs:init and ncs:ready which is the\nfirst respectively last state of a plan component. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status": {
                                "description": "A plan state is always in one of three states 'not-reached' when\nthe state has not been executed, 'reached' when the state has been\nexecuted and 'failed' it the state execution failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "reached",
                                  "failed"
                                ]
                              },
                              "when": {
                                "description": "The time this state was successfully reached or failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "service-reference": {
                                "description": "If this component reflects the state of some other data, e.g\nan instantiated RFS, an instantiated CFS or something else, this\noptional field can be set to point to that instance (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "instance-identifier"
                              },
                              "create-cb": {
                                "description": "indicate if a create callback should be registered\nfor this state (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "create-force-commit": {
                                "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "delete-cb": {
                                "description": "indicate if a delete callback should be registered\nfor this state (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "delete-force-commit": {
                                "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "pre-conditions": {
                                "description": "Pre-conditions for a state controls whether or not a\nstate should be executed. There are separate conditions\nfor the 'create' and 'delete' case. At create the\ncreate conditions checked and if possible executed with\nthe ultimate goal for the state of having status\n'reached'. At the 'delete' case the delete conditions\ncontrol whether the state changes should be deleted\nwith the ultimate goal of the state having status\n'not-reached' (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-actions": {
                                "description": "Post-actions are called after successful execution of a\nstate.  These are optional and there are separate\naction that can be set for the 'create' and 'delete'\ncase respectively.\n\nThese actions are put as requests in the\nside-effect-queue and are executed asynchronously with\nrespect to the original service transaction. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-action-node": {
                                    "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to\nevaluate the result of the action so that the\nside-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-async": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "[null]"
                                  },
                                  "delete-action-node": {
                                    "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'not-reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to evaluate the\nresult of the action so that the side-effect-queue can\nindicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-async": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "[null]"
                                  }
                                }
                              },
                              "post-action-status": {
                                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned\nsuccessfully, this leaf will be set to 'create-reached'\nif the component is not back-tracking, and\n'delete-reached' if it is back-tracking.\n\nIf the post-action did not return successfully, this\nleaf is set to 'failed'. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "create-reached",
                                  "delete-reached",
                                  "failed",
                                  "create-init",
                                  "delete-init"
                                ]
                              },
                              "modified": {
                                "description": "Devices and other services this service has modified directly or\nindirectly (through another service). (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "devices": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "leafref"
                                    }
                                  },
                                  "services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              },
                              "directly-modified": {
                                "description": "Devices and other services this service has explicitly\nmodified. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "devices": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "leafref"
                                    }
                                  },
                                  "services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              },
                              "private": {
                                "description": "NCS service related internal data stored here. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by FASTMAP (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "forward-diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "device-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "ned-id-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of NED identities this service instance has\nmanipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of services this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "private": {
                          "description": "NCS service related internal data stored here. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property-list": {
                              "description": "FASTMAP service component instance data used by the\nservice implementation. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "value": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "back-track": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "boolean"
                        },
                        "back-track-goal": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        }
                      }
                    }
                  },
                  "commit-queue": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "queue-item": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "If the queue item in the commit queue refers to this service\nthis is the queue number. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            }
                          }
                        }
                      }
                    }
                  },
                  "failed": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "error-info": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "message": {
                        "description": "An explanatory message for the failing plan. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "log-entry": {
                        "description": "Reference to a service log entry with additional information. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  },
                  "deleting": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "service-location": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  }
                }
              },
              "plan-history": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "plan": {
                    "type": "array",
                    "description": "Every time the plan changes its structure, i.e., a\nplan component is added or deleted, or a state is added or\ndeleted in a plan component, a copy of the old plan is stored\nin the plan history list. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "component": {
                          "type": "array",
                          "description": "A component has a type and a list of states.  It is required\nthat the first plan component is of type ncs:self.  It is\nalso required that the first state of a component is ncs:init\nand the last state is ncs:ready.  A service can in addition\nto the 'self' component have any number of components. These\nadditional components will have types that are defined by\nuser specified YANG identities. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "type": {
                                "description": "The plan component type is defined by an YANG identity.\nIt is used to identify the characteristics of a certain component.\nTherefore, if two components in the same service are of the same\ntype they should be identical with respect to number, type and order\nof their contained states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "state": {
                                "type": "array",
                                "description": "A plan state represents a certain step or stage that a service needs\nto execute and/or reach. It is identified as an YANG identity.\nThere are two predefined states ncs:init and ncs:ready which is the\nfirst respectively last state of a plan component. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "identityref"
                                    },
                                    "status": {
                                      "description": "A plan state is always in one of three states 'not-reached' when\nthe state has not been executed, 'reached' when the state has been\nexecuted and 'failed' it the state execution failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "reached",
                                        "failed"
                                      ]
                                    },
                                    "when": {
                                      "description": "The time this state was successfully reached or failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "service-reference": {
                                      "description": "If this component reflects the state of some other data, e.g\nan instantiated RFS, an instantiated CFS or something else, this\noptional field can be set to point to that instance (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "instance-identifier"
                                    },
                                    "create-cb": {
                                      "description": "indicate if a create callback should be registered\nfor this state (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "create-force-commit": {
                                      "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "delete-cb": {
                                      "description": "indicate if a delete callback should be registered\nfor this state (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "delete-force-commit": {
                                      "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "pre-conditions": {
                                      "description": "Pre-conditions for a state controls whether or not a\nstate should be executed. There are separate conditions\nfor the 'create' and 'delete' case. At create the\ncreate conditions checked and if possible executed with\nthe ultimate goal for the state of having status\n'reached'. At the 'delete' case the delete conditions\ncontrol whether the state changes should be deleted\nwith the ultimate goal of the state having status\n'not-reached' (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    },
                                    "post-actions": {
                                      "description": "Post-actions are called after successful execution of a\nstate.  These are optional and there are separate\naction that can be set for the 'create' and 'delete'\ncase respectively.\n\nThese actions are put as requests in the\nside-effect-queue and are executed asynchronously with\nrespect to the original service transaction. (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-action-node": {
                                          "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to\nevaluate the result of the action so that the\nside-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-async": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "[null]"
                                        },
                                        "delete-action-node": {
                                          "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'not-reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to evaluate the\nresult of the action so that the side-effect-queue can\nindicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-async": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "[null]"
                                        }
                                      }
                                    },
                                    "post-action-status": {
                                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned\nsuccessfully, this leaf will be set to 'create-reached'\nif the component is not back-tracking, and\n'delete-reached' if it is back-tracking.\n\nIf the post-action did not return successfully, this\nleaf is set to 'failed'. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "create-reached",
                                        "delete-reached",
                                        "failed",
                                        "create-init",
                                        "delete-init"
                                      ]
                                    },
                                    "modified": {
                                      "description": "Devices and other services this service has modified directly or\nindirectly (through another service). (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "devices": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "leafref"
                                          }
                                        },
                                        "services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    },
                                    "directly-modified": {
                                      "description": "Devices and other services this service has explicitly\nmodified. (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "devices": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "leafref"
                                          }
                                        },
                                        "services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    },
                                    "private": {
                                      "description": "NCS service related internal data stored here. (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "diff-set": {
                                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by FASTMAP (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "forward-diff-set": {
                                          "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "device-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "ned-id-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of NED identities this service instance has\nmanipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of services this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "private": {
                                "description": "NCS service related internal data stored here. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "property-list": {
                                    "description": "FASTMAP service component instance data used by the\nservice implementation. (non-presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "false"
                                    },
                                    "properties": {
                                      "property": {
                                        "type": "array",
                                        "description": "(list)",
                                        "x-yang": {
                                          "type": "list"
                                        },
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "value": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "back-track": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "back-track-goal": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-sr-te-cfp_sr-te_policies_sid-list_sid-list-name": {
      "type": "object",
      "properties": {
        "cisco-sr-te-cfp-sr-policies:sid-list": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "weight": {
                "description": "<1-4294967295> - SID-List weight  (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        }
      }
    },
    "data_cisco-sr-te-cfp_sr-te_odn_odn-template_odn-template-name": {
      "type": "object",
      "properties": {
        "cisco-sr-te-cfp-sr-odn:odn-template": {
          "type": "array",
          "description": "SR-TE ODN template (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "modified": {
                "description": "Devices and other services this service has modified directly or\nindirectly (through another service). (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "devices": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              },
              "directly-modified": {
                "description": "Devices and other services this service has explicitly\nmodified. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "devices": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              },
              "device-list": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "A list of managed devices this service instance has manipulated.\n\nThis leaf is obsolete. Use 'modified' instead. (leaf-list)",
                  "type": "string",
                  "format": "string"
                }
              },
              "used-by-customer-service": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "(leaf-list)",
                  "type": "string",
                  "format": "leafref"
                }
              },
              "commit-queue": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "queue-item": {
                    "type": "array",
                    "description": "When a service is committed through the commit queue, these\nfields act as references regarding the state of this service\ninstance. In the worst case scenario, a service instance is\nin the 'failed' state. This means that parts of the queued\ncommit failed.\n\nIf a service gets committed through the commit queue and the\ncommit fails, the backpointers in the service data are\nfollowed and the affected service instances are updated and\nset to the 'failed' state.\n\nDepending on the nature of the failure, different techniques\nto reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere\n  with the error recovery procedure.\n  Do a sync-from on the non-completed device(s) and then\n  re-deploy the failed service(s) with the\n  'reconcile' option to reconcile original data,\n  i.e., take control of that data. This option\n  acknowledges other services controlling the same data.\n  The reference count will indicate how many services control\n  the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere\n  with the error recovery procedure.\n  Use un-deploy with the no-networking option on the\n  service and then do sync-from on the non-completed\n  device(s). Make sure the error is fixed and then\n  re-deploy the failed service(s) with the\n  'reconcile' option. Release any queue lock\n  that was created.\n\nIn the 'failed' state, these fields are reset if a new\ncommit queue transaction is affecting this service, or\nthe service is re-deployed, or these fields are deleted\nusing the specific purge action.\nIn other cases the 'failed' state will remain. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "If the queue item in the commit queue refers to this service\nthis is the queue number. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint64"
                        },
                        "status": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "waiting",
                          "enum": [
                            "waiting",
                            "executing",
                            "blocking",
                            "blocked",
                            "failed",
                            "admin-cleared",
                            "commit-queue-failed"
                          ]
                        },
                        "cleared-by-admin": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "[null]"
                        },
                        "no-of-impacted-services": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "failed-device": {
                          "type": "array",
                          "description": "If the 'status' leaf is 'failed', this list contains detailed\ninformation on the devices that were responsible for the\nerror of the commit queue item. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "time": {
                                "description": "Time when the failure occured. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "config-data": {
                                "description": "The configuration data that was rejected by the device\nin XML format. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "error": {
                                "description": "The error returned by the device. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "private": {
                "description": "NCS service related internal data stored here. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by FastMap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "property-list": {
                    "description": "FASTMAP service instance data used by the service implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "re-deploy-counter": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "int32"
                  },
                  "latest-commit-params": {
                    "description": "Latest transactions commit parameters are stored there, these are\nused in reactive-re-deploy actions that must have the same\nparameters as the original service commit. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "latest-u-info": {
                    "description": "Latest transactions user info is stored there, these are\nused in reactive-re-deploy actions that must be performed by\na user with the same user info. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "plan-location": {
                "description": "Location of the service plan. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "instance-identifier"
              },
              "log": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "log-entry": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "when": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "What type of log entry is this. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "level": {
                          "description": "What level this log entry has. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "all",
                          "enum": [
                            "all",
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error"
                          ]
                        },
                        "message": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "custom-template": {
                "type": "array",
                "description": "Custom templates to apply when device is ready (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template to apply (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template one time (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "iteration": {
                      "type": "array",
                      "description": "Apply custom template multiple times with iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "description": "<1-65535>;;Iteration number (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template in iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": {
                "description": "Unique identifier for a ODN template (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "head-end": {
                "type": "array",
                "description": "List of headend routers (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "custom-template": {
                      "type": "array",
                      "description": "Custom templates to apply when device is ready (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template to apply (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template one time (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          },
                          "iteration": {
                            "type": "array",
                            "description": "Apply custom template multiple times with iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "number": {
                                  "description": "<1-65535>;;Iteration number (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                },
                                "variable": {
                                  "type": "array",
                                  "description": "Variables to bind when applying template in iteration (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "Name of template variable (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "leafref"
                                      },
                                      "value": {
                                        "description": "Value of template variable (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "maximum-sid-depth": {
                "description": "<1-255> - Maximum SID Depth (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "byte"
              },
              "color": {
                "description": "<1-4294967295> - SR policy color (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "bandwidth": {
                "description": "<1-4294967295> Requested Bandwidth value in kbps (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "dynamic": {
                "description": "Use dynamic path computation (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "metric-type": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "igp",
                    "enum": [
                      "igp",
                      "te",
                      "latency",
                      "hopcount"
                    ]
                  },
                  "metric-margin": {
                    "description": "Metric-margin (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "absolute": {
                        "description": "<0-2147483647>;;Absolute metric margin value (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint32"
                      }
                    }
                  },
                  "pce": {
                    "description": "Delegate dynamic path computation to PCE (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                    }
                  },
                  "flex-alg": {
                    "description": "<128-255> - Prefix-SID algorithm (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "disjoint-path": {
                    "description": "Compute a path that is disjoint from another path in the same disjoint-group (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "type": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "link",
                        "enum": [
                          "link",
                          "node",
                          "srlg",
                          "srlg-node"
                        ]
                      },
                      "group-id": {
                        "description": "<1-65535> - Group ID (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint16"
                      },
                      "sub-id": {
                        "description": "<1-65535>;;Subgroup ID number (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint16"
                      },
                      "source": {
                        "description": "<A.B.C.D> - Association source, applicable only on XE device (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "affinity": {
                    "description": "Compute paths with link color constraint (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "rule": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "action": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "include-any",
                              "enum": [
                                "include-any",
                                "include-all",
                                "exclude-any"
                              ]
                            },
                            "color": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "One of affinity-map colors (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-sr-te-cfp_sr-te_odn_odn-template-plan_odn-template-plan-name": {
      "type": "object",
      "properties": {
        "cisco-sr-te-cfp-sr-odn:odn-template-plan": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "plan": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "component": {
                    "type": "array",
                    "description": "A component has a type and a list of states.  It is required\nthat the first plan component is of type ncs:self.  It is\nalso required that the first state of a component is ncs:init\nand the last state is ncs:ready.  A service can in addition\nto the 'self' component have any number of components. These\nadditional components will have types that are defined by\nuser specified YANG identities. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "The plan component type is defined by an YANG identity.\nIt is used to identify the characteristics of a certain component.\nTherefore, if two components in the same service are of the same\ntype they should be identical with respect to number, type and order\nof their contained states. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "state": {
                          "type": "array",
                          "description": "A plan state represents a certain step or stage that a service needs\nto execute and/or reach. It is identified as an YANG identity.\nThere are two predefined states ncs:init and ncs:ready which is the\nfirst respectively last state of a plan component. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status": {
                                "description": "A plan state is always in one of three states 'not-reached' when\nthe state has not been executed, 'reached' when the state has been\nexecuted and 'failed' it the state execution failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "reached",
                                  "failed"
                                ]
                              },
                              "when": {
                                "description": "The time this state was successfully reached or failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "service-reference": {
                                "description": "If this component reflects the state of some other data, e.g\nan instantiated RFS, an instantiated CFS or something else, this\noptional field can be set to point to that instance (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "instance-identifier"
                              },
                              "create-cb": {
                                "description": "indicate if a create callback should be registered\nfor this state (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "create-force-commit": {
                                "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "delete-cb": {
                                "description": "indicate if a delete callback should be registered\nfor this state (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "delete-force-commit": {
                                "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "pre-conditions": {
                                "description": "Pre-conditions for a state controls whether or not a\nstate should be executed. There are separate conditions\nfor the 'create' and 'delete' case. At create the\ncreate conditions checked and if possible executed with\nthe ultimate goal for the state of having status\n'reached'. At the 'delete' case the delete conditions\ncontrol whether the state changes should be deleted\nwith the ultimate goal of the state having status\n'not-reached' (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-actions": {
                                "description": "Post-actions are called after successful execution of a\nstate.  These are optional and there are separate\naction that can be set for the 'create' and 'delete'\ncase respectively.\n\nThese actions are put as requests in the\nside-effect-queue and are executed asynchronously with\nrespect to the original service transaction. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-action-node": {
                                    "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to\nevaluate the result of the action so that the\nside-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-async": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "[null]"
                                  },
                                  "delete-action-node": {
                                    "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'not-reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to evaluate the\nresult of the action so that the side-effect-queue can\nindicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-async": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "[null]"
                                  }
                                }
                              },
                              "post-action-status": {
                                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned\nsuccessfully, this leaf will be set to 'create-reached'\nif the component is not back-tracking, and\n'delete-reached' if it is back-tracking.\n\nIf the post-action did not return successfully, this\nleaf is set to 'failed'. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "create-reached",
                                  "delete-reached",
                                  "failed",
                                  "create-init",
                                  "delete-init"
                                ]
                              },
                              "modified": {
                                "description": "Devices and other services this service has modified directly or\nindirectly (through another service). (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "devices": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "leafref"
                                    }
                                  },
                                  "services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              },
                              "directly-modified": {
                                "description": "Devices and other services this service has explicitly\nmodified. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "devices": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "leafref"
                                    }
                                  },
                                  "services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-services": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "(leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              },
                              "private": {
                                "description": "NCS service related internal data stored here. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by FASTMAP (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "forward-diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "device-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "ned-id-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of NED identities this service instance has\nmanipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of services this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "private": {
                          "description": "NCS service related internal data stored here. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property-list": {
                              "description": "FASTMAP service component instance data used by the\nservice implementation. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "value": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "back-track": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "boolean"
                        },
                        "back-track-goal": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        }
                      }
                    }
                  },
                  "commit-queue": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "queue-item": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "If the queue item in the commit queue refers to this service\nthis is the queue number. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            }
                          }
                        }
                      }
                    }
                  },
                  "failed": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "error-info": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "message": {
                        "description": "An explanatory message for the failing plan. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "log-entry": {
                        "description": "Reference to a service log entry with additional information. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  },
                  "deleting": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "service-location": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  }
                }
              },
              "plan-history": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "plan": {
                    "type": "array",
                    "description": "Every time the plan changes its structure, i.e., a\nplan component is added or deleted, or a state is added or\ndeleted in a plan component, a copy of the old plan is stored\nin the plan history list. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "component": {
                          "type": "array",
                          "description": "A component has a type and a list of states.  It is required\nthat the first plan component is of type ncs:self.  It is\nalso required that the first state of a component is ncs:init\nand the last state is ncs:ready.  A service can in addition\nto the 'self' component have any number of components. These\nadditional components will have types that are defined by\nuser specified YANG identities. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "type": {
                                "description": "The plan component type is defined by an YANG identity.\nIt is used to identify the characteristics of a certain component.\nTherefore, if two components in the same service are of the same\ntype they should be identical with respect to number, type and order\nof their contained states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "state": {
                                "type": "array",
                                "description": "A plan state represents a certain step or stage that a service needs\nto execute and/or reach. It is identified as an YANG identity.\nThere are two predefined states ncs:init and ncs:ready which is the\nfirst respectively last state of a plan component. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "identityref"
                                    },
                                    "status": {
                                      "description": "A plan state is always in one of three states 'not-reached' when\nthe state has not been executed, 'reached' when the state has been\nexecuted and 'failed' it the state execution failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "reached",
                                        "failed"
                                      ]
                                    },
                                    "when": {
                                      "description": "The time this state was successfully reached or failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "service-reference": {
                                      "description": "If this component reflects the state of some other data, e.g\nan instantiated RFS, an instantiated CFS or something else, this\noptional field can be set to point to that instance (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "instance-identifier"
                                    },
                                    "create-cb": {
                                      "description": "indicate if a create callback should be registered\nfor this state (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "create-force-commit": {
                                      "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "delete-cb": {
                                      "description": "indicate if a delete callback should be registered\nfor this state (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "delete-force-commit": {
                                      "description": "Indicate if the current transaction should be commited before\nrunning any later states. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "boolean"
                                    },
                                    "pre-conditions": {
                                      "description": "Pre-conditions for a state controls whether or not a\nstate should be executed. There are separate conditions\nfor the 'create' and 'delete' case. At create the\ncreate conditions checked and if possible executed with\nthe ultimate goal for the state of having status\n'reached'. At the 'delete' case the delete conditions\ncontrol whether the state changes should be deleted\nwith the ultimate goal of the state having status\n'not-reached' (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    },
                                    "post-actions": {
                                      "description": "Post-actions are called after successful execution of a\nstate.  These are optional and there are separate\naction that can be set for the 'create' and 'delete'\ncase respectively.\n\nThese actions are put as requests in the\nside-effect-queue and are executed asynchronously with\nrespect to the original service transaction. (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-action-node": {
                                          "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to\nevaluate the result of the action so that the\nside-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-async": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "[null]"
                                        },
                                        "delete-action-node": {
                                          "description": "This leaf identifies the node on which a specified\naction resides. This action is called after this state\nas got a 'not-reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain\nvalue could indicate an error or a successful result, e.g.\n'result true'.\n\nThis statement describes an XPath expression to evaluate the\nresult of the action so that the side-effect-queue can\nindicate action errors.\n\nThe result of the expression is converted to a boolean using\nthe standard XPath rules.  If the result is 'true' the action\nis reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the\nresulting xml tree of the action.\n\nThe set of namespace declarations are all available namespaces,\nwith the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-async": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "[null]"
                                        }
                                      }
                                    },
                                    "post-action-status": {
                                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned\nsuccessfully, this leaf will be set to 'create-reached'\nif the component is not back-tracking, and\n'delete-reached' if it is back-tracking.\n\nIf the post-action did not return successfully, this\nleaf is set to 'failed'. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "create-reached",
                                        "delete-reached",
                                        "failed",
                                        "create-init",
                                        "delete-init"
                                      ]
                                    },
                                    "modified": {
                                      "description": "Devices and other services this service has modified directly or\nindirectly (through another service). (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "devices": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "leafref"
                                          }
                                        },
                                        "services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    },
                                    "directly-modified": {
                                      "description": "Devices and other services this service has explicitly\nmodified. (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "devices": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "leafref"
                                          }
                                        },
                                        "services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-services": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "(leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    },
                                    "private": {
                                      "description": "NCS service related internal data stored here. (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "diff-set": {
                                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by FASTMAP (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "forward-diff-set": {
                                          "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "device-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "ned-id-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of NED identities this service instance has\nmanipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of services this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "private": {
                                "description": "NCS service related internal data stored here. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "property-list": {
                                    "description": "FASTMAP service component instance data used by the\nservice implementation. (non-presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "false"
                                    },
                                    "properties": {
                                      "property": {
                                        "type": "array",
                                        "description": "(list)",
                                        "x-yang": {
                                          "type": "list"
                                        },
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "value": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "back-track": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "back-track-goal": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
  }
}
