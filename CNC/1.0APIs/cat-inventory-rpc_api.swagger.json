{
  "swagger": "2.0",
  "info": {
    "title": "Crosswork Network Controller Service Summary API",
    "description": "This document contains details of the Crosswork Network Controller Service Summary APIs",
    "version": "1.0",
    "contact": {
      "name": "Crosswork Team, Cisco",
      "email": "support@cisco.com"
    },
    "license": {
      "name": "Cisco Software License Agreement",
      "url": "http://www.cisco.com/public/sw-license-agreement.html"
    }
  },
  "basePath": "/crosswork/nbi/cat-inventory/v1/restconf",
  "tags": [
  ],
  "schemes": [
    "https",
    "http"
  ],
  "produces": [
    "application/xml",
    "application/json"
  ],
  "consumes": [    
    "application/xml",
    "application/json"
  ],
  "paths": {
    "/operations/cat-inventory-rpc:get-all-services": {
      "post": {
        "tags": [
          "Service Summary"
        ],
        "summary": "Return all services in the system (istp inventory db).",
        "description": "Returns all services in the system (istp inventory db). The returned set of records can be indexed and limited using the collection-header parameters, 'offset' and 'limit'. Users can specify query criteria to filter the services returned. Users can also call this operation iteratively, retrieving all the services for a given set of criteria by passing the offset, incremented based on the last response to the operation.",
        "operationId": "operations_cat_inventory_rpc_get_all_services_post",
        "parameters": [
          {
            "$ref": "#/parameters/operations_cat-inventory-rpc_get-all-services-post-input"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. All services in the system were returned.",
            "schema": {
              "$ref": "#/definitions/operations_cat-inventory-rpc_get-all-services-post-output"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/operations/cat-inventory-rpc:get-available-service-types": {
      "post": {
        "tags": [
          "Service Summary"
        ],
        "summary": "Returns all available service types that are currently known.",
        "description": "This RPC returns all available service types that are currently known to the system. The service type from the response can be used as an input filter in a get_all_services RPC.",
        "operationId": "operations_cat_inventory_rpc_get_available_service_types_post",
        "parameters": [
          {
            "$ref": "#/parameters/operations_cat-inventory-rpc_get-available-service-types-post-input"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. Service types were returned.",
            "schema": {
              "$ref": "#/definitions/operations_cat-inventory-rpc_get-available-service-types-post-output"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/operations/cat-inventory-rpc:get-service-plan-data": {
      "post": {
        "tags": [
          "Service Summary"
        ],
        "summary": "Returns service plan status and creation time.",
        "description": "This RPC returns the service plan status and creation time for one or more service instances passed in the input.",
        "operationId": "operations_cat_inventory_rpc_get_service_plan_data_post",
        "parameters": [
          {
            "$ref": "#/parameters/operations_cat-inventory-rpc_get-service-plan-data-post-input"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. Service plan status was returned.",
            "schema": {
              "$ref": "#/definitions/operations_cat-inventory-rpc_get-service-plan-data-post-output"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/operations/cat-inventory-rpc:get-services-count": {
      "post": {
        "tags": [
          "Service Summary"
        ],
        "summary": "Returns service instances count.",
        "description": "This RPC returns the count for all of service instances including service instances count per type that are currently known to the system at the time of request.",
        "operationId": "operations_cat_inventory_rpc_get_services_count_post",
        "parameters": [
          {
            "$ref": "#/parameters/operations_cat-inventory-rpc_get-services-count-post-input"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. Service instances count was returned.",
            "schema": {
              "$ref": "#/definitions/operations_cat-inventory-rpc_get-services-count-post-output"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "parameters": {
    "content": {
      "name": "content",
      "in": "query",
      "description": "Control the descendant nodes in the response.",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "config",
      "enum": [
        "config",
        "nonconfig",
        "all"
      ]
    },
    "depth": {
      "name": "depth",
      "in": "query",
      "description": "Limit the depth of the nodes in the response.",
      "required": false,
      "type": "integer",
      "format": "uint16"
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "Identify specific data nodes in the response (optional).",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "filter": {
      "name": "filter",
      "in": "query",
      "description": "An xpath expression to filter data nodes in the response.",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "with-defaults": {
      "name": "with-defaults",
      "in": "query",
      "description": "Control the default values in the response.",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "report-all",
      "enum": [
        "report-all",
        "trim",
        "explicit",
        "report-all-tagged"
      ]
    },
    "insert": {
      "name": "insert",
      "in": "query",
      "description": "Control the order of addition when adding new list elements.",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "first",
      "enum": [
        "first",
        "last",
        "before",
        "after"
      ]
    },
    "point": {
      "name": "point",
      "in": "query",
      "description": "Specify the insertion point.",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "service-type-id": {
      "name": "service-type-id",
      "in": "path",
      "description": "The type of the service (leaf).",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "service-plan-yang-path-id": {
      "name": "service-plan-yang-path-id",
      "in": "path",
      "description": "A YANG path with a key corresponding to the service plan that has the status details.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "operations_cat-inventory-rpc_get-services-count-post-input": {
      "name": "get-services-count",
      "in": "body",
      "description": "Returns all service instances count including service instances count per type that are currently known to the system at the time of request",
      "required": true,
      "schema": {
        "$ref": "#/definitions/operations_cat-inventory-rpc_get-services-count-post-input"
      }
    },
    "operations_cat-inventory-rpc_get-service-plan-data-post-input": {
      "name": "get-service-plan-data",
      "in": "body",
      "description": "This RPC returns the service plan status and creation time for one or more service instances passed in the input.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/operations_cat-inventory-rpc_get-service-plan-data-post-input"
      }
    },
    "operations_cat-inventory-rpc_get-available-service-types-post-input": {
      "name": "get-available-service-types",
      "in": "body",
      "description": "This RPC returns all available service types that are currently known to the system. The service type from the response can be used as an input filter in a get_all_services RPC.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/operations_cat-inventory-rpc_get-available-service-types-post-input"
      }
    },
    "operations_cat-inventory-rpc_get-all-services-post-input": {
      "name": "get-all-services",
      "in": "body",
      "description": "Returns all services in the system (istp inventory db). The returned set of records can be indexed and limited using the collection-header parameters, 'offset' and 'limit'. Users can specfy query criteria to filter the services returned. Users can also call this operation iteratively, retrieving all the services for a given set of criteria by passing the offset, incremented based on the last response to the operation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/operations_cat-inventory-rpc_get-all-services-post-input"
      }
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "201": {
      "description": "Created. The request was successful. One or more new resources were created."
    },
    "204": {
      "description": "No Content. The request was successful and there is no additional content in the response body."
    },
    "400": {
      "description": "Bad Request. The request is malformed in some way and the server cannot process it."
    },
    "401": {
      "description": "Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource."
    },
    "404": {
      "description": "Not Found. The client made a request for a resource that does not exist."
    },
    "405": {
      "description": "Method Not Allowed. The method received in the request line is known by the origin server but not supported by the target resource."
    },
    "409": {
      "description": "Conflict. The request could not be completed due to a conflict with the current state of the target resource."
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "operations_cat-inventory-rpc_get-services-count-post-output": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-services-count-response": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "total-services-count": {
              "description": "Total count of all service instances currently known to the system at the time of the request (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "int32"
            },
            "services-count-per-type": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-type": {
                    "description": "The type of the service (leaf).",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "count": {
                    "description": "service instances count per service type currently known to the system at the time of the request (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "operations_cat-inventory-rpc_get-services-count-post-input": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-services-count-request": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "service-type": {
              "description": "optinal. type of the service to which service instances count\n       should be returned. if not provided, counts for all services and\n       all service types will be returned. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "service-name-filters": {
              "description": "Specifies a filter to select services that match the service-name pattern specified in the filter. When not specified, no matching pattern is applied against the service name. This filter affects performance, so if service name matching is not needed, omit this filter in the input. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "start-with": {
                  "description": "Specifies a filter with a pattern to match to the start of a service-name. For example:  If the service names are 'foo-service' and 'foo-bar-service', a 'start-with=foo' filter will return both, but a 'start-with=foo-s' will return only 'foo-service'. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "case-sensitive": {
                  "description": "indicate if the filter value should be used for case sensitive\n   filtering or not. if missing, it is considered as false (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "operations_cat-inventory-rpc_get-service-plan-data-post-output": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-service-plan-data-response": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "service-plan-data": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "yang-path": {
                    "description": "A YANG path with a key corresponding to the service plan (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "status": {
                    "description": "status of the service deployment - unknown: no plan data available\n           or has errors before the deployment reached to create plan data.\n           completed: service deployment is successful on all phases. failed:\n           one or more components have status not reached. in-progress: service\n           deployment is in progress and there are no errors reported currently\n           in the plan (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "unknown",
                    "enum": [
                      "unknown",
                      "completed",
                      "failed",
                      "in-progress",
                      "delete-in-progress"
                    ]
                  },
                  "error-info": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "message": {
                        "description": "An explanatory message for a failing plan. The message can also indicate that the plan does not exist (leaf).",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  },
                  "creation-time": {
                    "description": "The service instance creation time. This is just the time of intended creation, not the completion time (leaf).",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "operations_cat-inventory-rpc_get-service-plan-data-post-input": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-service-plan-data-request": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "service-plan-yang-path": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A YANG path with a key corresponding to the service plan that has the status details (leaf-list).",
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "operations_cat-inventory-rpc_get-available-service-types-post-output": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-available-service-types-response": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "service-type-info": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-type": {
                    "description": "The type of the service (leaf).",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "service-type-label": {
                    "description": "An optional label for the service type, used for display purposes. For example, it can be used in the UI. By default, the implementation might return the local part of the service-type qname if there is no explicit label defined (leaf).",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "operations_cat-inventory-rpc_get-available-service-types-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "operations_cat-inventory-rpc_get-all-services-post-output": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-all-services-response": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "collection-header": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "offset": {
                  "description": "Offset of the first record of the collection (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint32"
                },
                "limit": {
                  "description": "The maximum number of records that should be in the collection (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "int32"
                },
                "count": {
                  "description": "The actual number of records in the collection (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "int32"
                }
              }
            },
            "collection-data": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "service-info": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "service-name": {
                        "description": "The name of the service (leaf).",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "service-type": {
                        "description": "The type of the service, with the qname in string format. For example, if 'bar' is the service type, the qname would be '{urn:a:b:c:foo}bar' (leaf).",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "yang-path": {
                        "description": "The RESTCONF YANG path to the data resource that can retrieve full details of the service intent (leaf).",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "plan-yang-path": {
                        "description": "The RESTCONF YANG path to the service plan data resource that can retrieve full details of the service plan/deployment which corresponds to this service intent (leaf).",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "operations_cat-inventory-rpc_get-all-services-post-input": {
      "type": "object",
      "properties": {
        "cat-inventory-rpc:get-all-services-request": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "collection-header": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "offset": {
                  "description": "Offset of the first record of the collection (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint32"
                },
                "limit": {
                  "description": "The maximum number of records that should be in the collection (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "int32"
                },
                "count": {
                  "description": "The actual number of records in the collection (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "int32"
                }
              }
            },
            "query-criteria": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "service-name-filters": {
                  "description": "Specifies a filter to select services that match the service-name pattern specified in the filter. When not specified, no matching pattern is applied against the service name. This filter affects performance, so if service name matching is not needed, omit this filter in the input. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "start-with": {
                      "description": "Specifies a filter with a pattern to match to the start of a service-name. For example:  If the service names are 'foo-service' and 'foo-bar-service', a 'start-with=foo' filter will return both, but a 'start-with=foo-s' will return only 'foo-service'. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "case-sensitive": {
                      "description": "indicate if the filter value should be used for case sensitive filtering or not. if missing, it is considered as false (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "boolean"
                    }
                  }
                },
                "service-type-filters": {
                  "description": "Specifies a filter pattern to select service types that are to be excluded from or included in a retrieval. By default, if this filter is left unspecified, all available service types are included. When these filters are specified, the resulting service types included in the retrieval are a subset of the available service types, computed out of the includes and excludes together. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "includes": {
                      "description": "Specifies a filter pattern to select service types that are to be included in a retrieval. If the includes are empty or missing, the call is treated as an 'all includes' retrieval. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "service-type": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "The type of the service (leaf).",
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "excludes": {
                      "description": "filter to specify the excluded service types for retrieval. When\n   excludes is empty or missing, it is treated as nothing excluded (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "service-type": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "The type of the service (leaf).",
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
