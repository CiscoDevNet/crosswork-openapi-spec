{
  "swagger": "2.0",
  "info": {
    "title": "Crosswork Network Controller L3VPN Service API",
    "description": "This document contains details of the Crosswork Network Controller L3VPN Service APIs",
    "version": "1.0",
    "contact": {
      "name": "Crosswork Team, Cisco",
      "email": "support@cisco.com"
    },
    "license": {
      "name": "Cisco Software License Agreement",
      "url": "http://www.cisco.com/public/sw-license-agreement.html"
    }
  },
  "basePath": "/crosswork",
  "tags": [
  ],
  "schemes": [
    "https",
    "http"
  ],
  "produces": [
    "application/yang-data+xml",
    "application/yang-data+json"
  ],
  "consumes": [
    "application/yang-data+xml",
    "application/yang-data+json"
  ],
  "paths": {

    "/nbi/cat-inventory/v1/restconf/data/cisco-flat-L3vpn-fp:flat-L3vpn={flat-L3vpn-name}": {
      "get": {
        "tags": [
          "Flat L3VPN Retrieval"
        ],
        "summary": "",
        "description": "Flat L3VPN service",
        "operationId": "data_cisco_flat_L3vpn_fp_flat_L3vpn_flat_L3vpn_name_get",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/flat-L3vpn-name"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Flat L3VPN service was returned.",
            "schema": {
              "$ref": "#/definitions/flat-L3vpn"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/nbi/cat-inventory/v1/restconf/data/cisco-flat-L3vpn-fp:flat-L3vpn-plan={flat-L3vpn-plan-name}": {
      "get": {
        "tags": [
          "Flat L3VPN Retrieval"
        ],
        "summary": "",
        "description": "",
        "operationId": "data_cisco_flat_L3vpn_fp_flat_L3vpn_plan_flat_L3vpn_plan_name_get",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/flat-L3vpn-plan-name"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Flat L3VPN plan was returned.",
            "schema": {
              "$ref": "#/definitions/flat-L3vpn-plan"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/proxy/nso/restconf/data/cisco-flat-L3vpn-fp:flat-L3vpn={flat-L3vpn-name}": {

      "post": {
        "tags": [
          "Flat L3VPN Provision"
        ],
        "summary": "",
        "description": "Flat L3VPN service",
        "operationId": "data_cisco_flat_L3vpn_fp_flat_L3vpn_flat_L3vpn_name_post",
        "parameters": [
          {
            "$ref": "#/parameters/flat-L3vpn-name"
          },
          {
            "$ref": "#/parameters/flat-L3vpn"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. Flat L3VPN service was created."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Flat L3VPN Provision"
        ],
        "summary": "",
        "description": "Flat L3VPN service",
        "operationId": "data_cisco_flat_L3vpn_fp_flat_L3vpn_flat_L3vpn_name_put",
        "parameters": [
          {
            "$ref": "#/parameters/flat-L3vpn-name"
          },
          {
            "$ref": "#/parameters/flat-L3vpn"
          },
          {
            "$ref": "#/parameters/insert"
          },
          {
            "$ref": "#/parameters/point"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. Flat L3VPN service was updated."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Flat L3VPN Provision"
        ],
        "summary": "",
        "description": "Flat L3VPN service",
        "operationId": "data_cisco_flat_L3vpn_fp_flat_L3vpn_flat_L3vpn_name_patch",
        "parameters": [
          {
            "$ref": "#/parameters/flat-L3vpn-name"
          },
          {
            "$ref": "#/parameters/flat-L3vpn"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. Flat L3VPN service was modified."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Flat L3VPN Provision"
        ],
        "summary": "",
        "description": "Flat L3VPN service",
        "operationId": "data_cisco_flat_L3vpn_fp_flat_L3vpn_flat_L3vpn_name_delete",
        "parameters": [
          {
            "$ref": "#/parameters/flat-L3vpn-name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. Flat L3VPN service was deleted."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },

    "/nbi/cat-inventory/v1/restconf/data/cisco-flat-L3vpn-fp:l3vpn-route-policy={l3vpn-route-policy-name}": {
      "get": {
        "tags": [
          "L3VPN Route Policy Retrieval"
        ],
        "summary": "",
        "description": "Route policy",
        "operationId": "data_cisco_flat_L3vpn_fp_l3vpn_route_policy_l3vpn_route_policy_name_get",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/l3vpn-route-policy-name"
          },
          {
            "$ref": "#/parameters/content"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/with-defaults"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. L3VPN route policy was returned.",
            "schema": {
              "$ref": "#/definitions/l3vpn-route-policy"
            }
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/proxy/nso/restconf/data/cisco-flat-L3vpn-fp:l3vpn-route-policy={l3vpn-route-policy-name}": {
      "post": {
        "tags": [
          "L3VPN Route Policy Provision"
        ],
        "summary": "",
        "description": "Route policy",
        "operationId": "data_cisco_flat_L3vpn_fp_l3vpn_route_policy_l3vpn_route_policy_name_post",

        "parameters": [
          {
            "$ref": "#/parameters/l3vpn-route-policy-name"
          },
          {
            "$ref": "#/parameters/l3vpn-route-policy"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. L3VPN route policy was created."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "L3VPN Route Policy Provision"
        ],
        "summary": "",
        "description": "Route policy",
        "operationId": "data_cisco_flat_L3vpn_fp_l3vpn_route_policy_l3vpn_route_policy_name_put",

        "parameters": [
          {
            "$ref": "#/parameters/l3vpn-route-policy-name"
          },
          {
            "$ref": "#/parameters/l3vpn-route-policy"
          },
          {
            "$ref": "#/parameters/insert"
          },
          {
            "$ref": "#/parameters/point"
          }
        ],
        "responses": {
          "201": {
            "description": "The request was successful. L3VPN route policy was updated."
          },
          "204": {
            "$ref": "#/responses/204"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "L3VPN Route Policy Provision"
        ],
        "summary": "",
        "description": "Route policy",
        "operationId": "data_cisco_flat_L3vpn_fp_l3vpn_route_policy_l3vpn_route_policy_name_patch",

        "parameters": [
          {
            "$ref": "#/parameters/l3vpn-route-policy-name"
          },
          {
            "$ref": "#/parameters/l3vpn-route-policy"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. L3VPN route policy was modified."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "L3VPN Route Policy Provision"
        ],
        "summary": "",
        "description": "Route policy",
        "operationId": "data_cisco_flat_L3vpn_fp_l3vpn_route_policy_l3vpn_route_policy_name_delete",

        "parameters": [
          {
            "$ref": "#/parameters/l3vpn-route-policy-name"
          }
        ],
        "responses": {
            "204": {
              "description": "The request was successful. L3VPN route policy was deleted."
            },
            "400": {
              "$ref": "#/responses/400"
            },
            "401": {
              "$ref": "#/responses/401"
            },
            "404": {
              "$ref": "#/responses/404"
            },
            "405": {
              "$ref": "#/responses/405"
            }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "parameters": {
    "content": {
      "name": "content",
      "in": "query",
      "description": "Control the descendant nodes in the response.",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "config",
      "enum": [
        "config",
        "nonconfig",
        "all"
      ]
    },
    "depth": {
      "name": "depth",
      "in": "query",
      "description": "Limit the depth of the nodes in the response.",
      "required": false,
      "type": "integer",
      "format": "uint16"
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "Identify specific data nodes in the response (optional).",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "filter": {
      "name": "filter",
      "in": "query",
      "description": "An xpath expression to filter data nodes in the response.",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "with-defaults": {
      "name": "with-defaults",
      "in": "query",
      "description": "Control the default values in the response.",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "report-all",
      "enum": [
        "report-all",
        "trim",
        "explicit",
        "report-all-tagged"
      ]
    },
    "insert": {
      "name": "insert",
      "in": "query",
      "description": "Control the order of addition when adding new list elements.",
      "required": false,
      "type": "string",
      "format": "enumeration",
      "default": "first",
      "enum": [
        "first",
        "last",
        "before",
        "after"
      ]
    },
    "point": {
      "name": "point",
      "in": "query",
      "description": "Specify the insertion point.",
      "required": false,
      "type": "string",
      "format": "string"
    },
    "wait-device-id": {
      "name": "wait-device-id",
      "in": "path",
      "description": "Take device locks before entering transaction critical section. The\ndevice locks here should be understood to be internal locks in NSO, so\nthe device itself is not locked. If the device locks are held by\nsomeone else, wait for them to become available. The timeout applied\nin this case is the same as used to wait for the transaction lock.\n\nNormally the device locks are taken automatically inside the\ntransaction critical section, because in a typical service transaction\nwe do not know the affected devices before the service code is\nexecuted. When taking the device locks inside transaction critical\nsection, it is not possible to wait for lock, so in case the lock is\nnot available the transaction is aborted.\n\nThis parameter allows to specify the devices expected to be\naffected by the transaction so they can be pre-locked before entering\nthe transaction critical section. This allows to wait for device\nlocks. This is useful in cases when other actions holding the device\nlock may be on-going at the same time and the desired behaviour is\nto wait for these actions to complete rather than abort the\ntransaction. Examples of such actions are: sync-from,\npartial-sync-from, check-sync, sync-to, compare-config.\n\nSimilarly, when used with a commit through commit queue, this\nparameter allows to wait for queue items with block-others flag. For\nexample, a queue item with block-others flag is created by actions\nsuch as sync-from and partial-sync-from, and when a commit queue item\nfails with error-option being rollback-on-error or stop-on-error.\n\nIf the transaction involves other devices than specified by this\nparameter, then the lock still needs to be taken on these additional\ndevices, which is done inside transaction critical section and may\nfail if the device lock for the additional devices is already held\nby someone else.",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "vpn-target-rt-value": {
      "name": "vpn-target-rt-value",
      "in": "path",
      "description": "Route-Target Value",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "variable-name": {
      "name": "variable-name",
      "in": "path",
      "description": "Name of template variable",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "used-by-customer-service-id": {
      "name": "used-by-customer-service-id",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "status-code-detail-type": {
      "name": "status-code-detail-type",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "identityref"
    },
    "status-code-detail-name": {
      "name": "status-code-detail-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "state-name": {
      "name": "state-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "identityref"
    },
    "services-id": {
      "name": "services-id",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "instance-identifier"
    },
    "service-list-id": {
      "name": "service-list-id",
      "in": "path",
      "description": "A list of services this service instance has manipulated.",
      "required": true,
      "type": "string",
      "format": "instance-identifier"
    },
    "queue-item-id": {
      "name": "queue-item-id",
      "in": "path",
      "description": "If the queue item in the commit queue refers to this service\nthis is the queue number.",
      "required": true,
      "type": "integer",
      "format": "uint64"
    },
    "property-name": {
      "name": "property-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "prefix-id": {
      "name": "prefix-id",
      "in": "path",
      "description": "<A.B.C.D/prefix> - IPv4 Prefix List",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "plan-time": {
      "name": "plan-time",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "ned-id-list-id": {
      "name": "ned-id-list-id",
      "in": "path",
      "description": "A list of NED identities this service instance has manipulated.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "lsa-services-id": {
      "name": "lsa-services-id",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "instance-identifier"
    },
    "lsa-service-service-id": {
      "name": "lsa-service-service-id",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "instance-identifier"
    },
    "lsa-service-list-id": {
      "name": "lsa-service-list-id",
      "in": "path",
      "description": "A list of LSA services this service instance has manipulated.",
      "required": true,
      "type": "string",
      "format": "instance-identifier"
    },
    "log-entry-when": {
      "name": "log-entry-when",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "l3vpn-route-policy-name": {
      "name": "l3vpn-route-policy-name",
      "in": "path",
      "description": "Route-Policy name",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "l2-attachment-circuit-name": {
      "name": "l2-attachment-circuit-name",
      "in": "path",
      "description": "L2 AC name",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "iteration-number": {
      "name": "iteration-number",
      "in": "path",
      "description": "<1-65535>;;Iteration number",
      "required": true,
      "type": "integer",
      "format": "uint16"
    },
    "ipv6-prefix-id": {
      "name": "ipv6-prefix-id",
      "in": "path",
      "description": "<X:X::X/length> - IPv6 Prefix List",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "flat-L3vpn-plan-name": {
      "name": "flat-L3vpn-plan-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "flat-L3vpn-name": {
      "name": "flat-L3vpn-name",
      "in": "path",
      "description": "Service Name for L3VPN",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "failed-device-name": {
      "name": "failed-device-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "endpoint-endpoint-name": {
      "name": "endpoint-endpoint-name",
      "in": "path",
      "description": "Endpoint name",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "dynamic-device-mapping-ned-id": {
      "name": "dynamic-device-mapping-ned-id",
      "in": "path",
      "description": "Device NED ID, eg ned:netconf",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "devices-id": {
      "name": "devices-id",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "device-name": {
      "name": "device-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "device-list-id": {
      "name": "device-list-id",
      "in": "path",
      "description": "A list of managed devices this service instance has manipulated.\n\nThis leaf is deprecated. Use 'modified' instead.",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_name": {
      "name": "name",
      "in": "body",
      "description": "Route-Policy name",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6_ipv6-prefix_ipv6-prefix-id": {
      "name": "ipv6-prefix",
      "in": "body",
      "description": "<X:X::X/length> - IPv6 Prefix List",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6_ipv6-prefix_ipv6-prefix-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6-post": {
      "name": "ipv6",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6": {
      "name": "ipv6",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4_prefix_prefix-id": {
      "name": "prefix",
      "in": "body",
      "description": "<A.B.C.D/prefix> - IPv4 Prefix List",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4_prefix_prefix-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4-post": {
      "name": "ipv4",
      "in": "body",
      "description": "IPv4 ODN SR",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4": {
      "name": "ipv4",
      "in": "body",
      "description": "IPv4 ODN SR",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_id": {
      "name": "id",
      "in": "body",
      "description": "<1-4294967295> - SR policy color",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_id"
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id": {
      "name": "color",
      "in": "body",
      "description": "SR policy color",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id"
      }
    },
    "l3vpn-route-policy": {
      "name": "l3vpn-route-policy",
      "in": "body",
      "description": "Route policy definition",
      "required": true,
      "schema": {
        "$ref": "#/definitions/l3vpn-route-policy"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_un-deploy-post-input": {
      "name": "un-deploy",
      "in": "body",
      "description": "Undo the effects of the service instance but keep the\nservice itself. The service can later be re-deployed. This is\na means to deactivate a service, but keeping it in the system.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_un-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_touch-post-input": {
      "name": "touch",
      "in": "body",
      "description": "This action marks the service as changed.\n\nExecuting the action touch followed by a commit is the same as\nexecuting the action 're-deploy shallow'.\n\nBy using the action 'touch' several re-deploys can be performed\nin the same transaction.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_touch-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_redeploy-flag": {
      "name": "redeploy-flag",
      "in": "body",
      "description": "Custom redeploy flag that redeploys lower level services if changed.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_redeploy-flag"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_reactive-re-deploy-post-input": {
      "name": "reactive-re-deploy",
      "in": "body",
      "description": "This is a tailored re-deploy intended to be used in the reactive\nFastmap scenario. It differs from the ordinary re-deploy in that\nthis action does not take any commit parameters.\n\nThis action will re-deploy the services as an\n'shallow' depth re-deploy. It will be performed with the same\nuser as the original commit. Also, the commit parameters will be\nidentical to the latest commit involving this service.\n\nBy default this action is asynchronous and returns nothing.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_reactive-re-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_re-deploy-post-input": {
      "name": "re-deploy",
      "in": "body",
      "description": "Run the service code again, possibly writing the changes of\nthe service to the network once again.\n\nIf the dry-run option is used,\nthe action simply reports (in different formats) what it would do.\n\nUse the option 'reconcile' if the service should reconcile\noriginal data, i.e., take control of that data. This option\nacknowledges other services controlling the same data.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_re-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_service-list_service-list-id": {
      "name": "service-list",
      "in": "body",
      "description": "A list of services this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_service-list_service-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_re-deploy-counter": {
      "name": "re-deploy-counter",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_re-deploy-counter"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name_value": {
      "name": "value",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name_name": {
      "name": "name",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name": {
      "name": "property",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list-post": {
      "name": "property-list",
      "in": "body",
      "description": "Fastmap service instance data used by the service implementation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list": {
      "name": "property-list",
      "in": "body",
      "description": "Fastmap service instance data used by the service implementation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_ned-id-list_ned-id-list-id": {
      "name": "ned-id-list",
      "in": "body",
      "description": "A list of NED identities this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_ned-id-list_ned-id-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_lsa-service-list_lsa-service-list-id": {
      "name": "lsa-service-list",
      "in": "body",
      "description": "A list of LSA services this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_lsa-service-list_lsa-service-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_latest-u-info": {
      "name": "latest-u-info",
      "in": "body",
      "description": "Latest transactions user info is stored there, these are\nused in reactive-re-deploy actions that must be performed by\na user with the same user info.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_latest-u-info"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_latest-commit-params": {
      "name": "latest-commit-params",
      "in": "body",
      "description": "Latest transactions commit parameters are stored there, these are\nused in reactive-re-deploy actions that must have the same\nparameters as the original service commit.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_latest-commit-params"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_forward-diff-set": {
      "name": "forward-diff-set",
      "in": "body",
      "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_forward-diff-set"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_diff-set": {
      "name": "diff-set",
      "in": "body",
      "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_diff-set"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_device-list_device-list-id": {
      "name": "device-list",
      "in": "body",
      "description": "A list of managed devices this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_device-list_device-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private-post": {
      "name": "private",
      "in": "body",
      "description": "NCS service related internal data stored here.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private": {
      "name": "private",
      "in": "body",
      "description": "NCS service related internal data stored here.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_name": {
      "name": "name",
      "in": "body",
      "description": "Service Name for L3VPN",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_purge-post-input": {
      "name": "purge",
      "in": "body",
      "description": "This action requests to delete log entries from the log-entry\nlist according to the supplied criteria.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_purge-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_get-modifications-post-input": {
      "name": "get-modifications",
      "in": "body",
      "description": "Returns the data the service modified, either\nin CLI curly bracket format, or NETCONF XML edit-config format.\nThis data is only available if the parameter\n'/services/global-settings/collect-forward-diff' is set to true.\n\nIf the parameter 'reverse' is given the modifications needed\nto 'reverse' the effect of the service is shown. This will\nbe applied if the service is deleted. This data is always\navailable.\n\nThe parameter deep/shallow controls if the modifications shown\nare for this service only or for all modiefied services as well.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_get-modifications-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_vrf-definition": {
      "name": "vrf-definition",
      "in": "body",
      "description": "VRF Name",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_vrf-definition"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_vpn-id": {
      "name": "vpn-id",
      "in": "body",
      "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_vpn-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_route-distinguisher": {
      "name": "route-distinguisher",
      "in": "body",
      "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_route-distinguisher"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value_rt-value": {
      "name": "rt-value",
      "in": "body",
      "description": "Route-Target Value",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value_rt-value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value_rt-type": {
      "name": "rt-type",
      "in": "body",
      "description": "Route-Target Type",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value_rt-type"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value": {
      "name": "vpn-target",
      "in": "body",
      "description": "Route Targets",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_redistribute-connected": {
      "name": "redistribute-connected",
      "in": "body",
      "description": "Redistribute Connected",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_redistribute-connected"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_metric": {
      "name": "metric",
      "in": "body",
      "description": "Default metric",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_metric"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_address-family": {
      "name": "address-family",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_address-family"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family": {
      "name": "address-family",
      "in": "body",
      "description": "Address Family",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf-post": {
      "name": "vrf",
      "in": "body",
      "description": "VRF Definition",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf": {
      "name": "vrf",
      "in": "body",
      "description": "VRF Definition",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vlan-id": {
      "name": "vlan-id",
      "in": "body",
      "description": "<1-4000> - VLAN Id",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vlan-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te_route-policy": {
      "name": "route-policy",
      "in": "body",
      "description": "Route policy definition",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te_route-policy"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te-post": {
      "name": "sr-te",
      "in": "body",
      "description": "Segment Routing Association",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te": {
      "name": "sr-te",
      "in": "body",
      "description": "Segment Routing Association",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_redeploy-flag": {
      "name": "redeploy-flag",
      "in": "body",
      "description": "Custom redeploy flag that redeploys lower level services if changed.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_redeploy-flag"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_pe-ipv6-addr": {
      "name": "pe-ipv6-addr",
      "in": "body",
      "description": "<X:X::X/length> - PE IPv6 Address",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_pe-ipv6-addr"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_pe-ip-addr": {
      "name": "pe-ip-addr",
      "in": "body",
      "description": "<A.B.C.D/prefix> - PE IPv4 Address",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_pe-ip-addr"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_mtu": {
      "name": "mtu",
      "in": "body",
      "description": "<64-65535> - Set the MTU on an interface",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_mtu"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_vlan-id": {
      "name": "vlan-id",
      "in": "body",
      "description": "<1-4000> - VLAN Id",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_vlan-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_translate": {
      "name": "translate",
      "in": "body",
      "description": "Replace tags with other tags",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_translate"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_push": {
      "name": "push",
      "in": "body",
      "description": "Push one or more tags",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_push"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_pop": {
      "name": "pop",
      "in": "body",
      "description": "Remove one or more tags",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_pop"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_mode": {
      "name": "mode",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_mode"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_dot1q": {
      "name": "dot1q",
      "in": "body",
      "description": "<1-4094> - Push a Dot1Q tag",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_dot1q"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress-post": {
      "name": "ingress",
      "in": "body",
      "description": "Set the tag rewriting policy for this EFP",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress": {
      "name": "ingress",
      "in": "body",
      "description": "Set the tag rewriting policy for this EFP",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite-post": {
      "name": "rewrite",
      "in": "body",
      "description": "Tag Rewrite",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite": {
      "name": "rewrite",
      "in": "body",
      "description": "Tag Rewrite",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_name": {
      "name": "name",
      "in": "body",
      "description": "L2 AC name",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_if-type": {
      "name": "if-type",
      "in": "body",
      "description": "Interface Type",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_if-type"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_if-id": {
      "name": "if-id",
      "in": "body",
      "description": "Interface Id",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_if-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name": {
      "name": "l2-attachment-circuit",
      "in": "body",
      "description": "L2 Attachment Ciruit",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_if-type": {
      "name": "if-type",
      "in": "body",
      "description": "Interface Type",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_if-type"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_if-id": {
      "name": "if-id",
      "in": "body",
      "description": "Interface Id",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_if-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_endpoint-name": {
      "name": "endpoint-name",
      "in": "body",
      "description": "Endpoint name",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_endpoint-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name_value": {
      "name": "value",
      "in": "body",
      "description": "Value of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name_name": {
      "name": "name",
      "in": "body",
      "description": "Name of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name": {
      "name": "variable",
      "in": "body",
      "description": "Variables to bind when applying template one time",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_name": {
      "name": "name",
      "in": "body",
      "description": "Name of template to apply",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_value": {
      "name": "value",
      "in": "body",
      "description": "Value of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_name": {
      "name": "name",
      "in": "body",
      "description": "Name of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name": {
      "name": "variable",
      "in": "body",
      "description": "Variables to bind when applying template in iteration",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_number": {
      "name": "number",
      "in": "body",
      "description": "<1-65535>;;Iteration number",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_number"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number": {
      "name": "iteration",
      "in": "body",
      "description": "Apply custom template multiple times with iteration",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name": {
      "name": "custom-template",
      "in": "body",
      "description": "Custom templates to apply when device is ready",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source_if-type": {
      "name": "if-type",
      "in": "body",
      "description": "Interface Type",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source_if-type"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source_if-id": {
      "name": "if-id",
      "in": "body",
      "description": "Interface Id",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source_if-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source-post": {
      "name": "update-source",
      "in": "body",
      "description": "Source of routing updates",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source": {
      "name": "update-source",
      "in": "body",
      "description": "Source of routing updates",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_remote-as-ipv6": {
      "name": "remote-as-ipv6",
      "in": "body",
      "description": "Neighbor IPv6 Remote AS",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_remote-as-ipv6"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_remote-as-ipv4": {
      "name": "remote-as-ipv4",
      "in": "body",
      "description": "Neighbor IPv4 Remote AS",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_remote-as-ipv4"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_neighbor-ipv6": {
      "name": "neighbor-ipv6",
      "in": "body",
      "description": "<X:X::X> - Neighbor IPv6 Address",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_neighbor-ipv6"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_neighbor-ipv4": {
      "name": "neighbor-ipv4",
      "in": "body",
      "description": "<A.B.C.D> - Neighbor IPv4 Address",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_neighbor-ipv4"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp-post": {
      "name": "e-bgp",
      "in": "body",
      "description": "eBGP Routing",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp": {
      "name": "e-bgp",
      "in": "body",
      "description": "eBGP Routing",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot-post": {
      "name": "ce-pe-prot",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot": {
      "name": "ce-pe-prot",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_as-no": {
      "name": "as-no",
      "in": "body",
      "description": "Autonomous Number",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_as-no"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action_redeploy-post-input": {
      "name": "redeploy",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action_redeploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action-post": {
      "name": "action",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action": {
      "name": "action",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_access-pe": {
      "name": "access-pe",
      "in": "body",
      "description": "PE device",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_access-pe"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name": {
      "name": "endpoint",
      "in": "body",
      "description": "L3VPN End-point",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_deep-check-sync-post-input": {
      "name": "deep-check-sync",
      "in": "body",
      "description": "Check if the service has been undermined on the device itself.\nThe action 'check-sync' compares the output of the service\ncode to what is stored in CDB locally. This action retrieves the\nconfiguration from the devices touched by the service and compares\nthe forward diff set of the service to the retrieved data. This\nis thus a fairly heavy weight operation. As opposed to the check-sync\naction that invokes the Fastmap code, this action re-applies the\nforward diff-set. This is the same output you see when inspecting\nthe 'get-modifications' operational field in the service instance.\n\nIf the device is in sync with CDB, the output of this action\nis identical to the output of the cheaper check-sync action",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_deep-check-sync-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name_value": {
      "name": "value",
      "in": "body",
      "description": "Value of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name_name": {
      "name": "name",
      "in": "body",
      "description": "Name of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name": {
      "name": "variable",
      "in": "body",
      "description": "Variables to bind when applying template one time",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_name": {
      "name": "name",
      "in": "body",
      "description": "Name of template to apply",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_value": {
      "name": "value",
      "in": "body",
      "description": "Value of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_name": {
      "name": "name",
      "in": "body",
      "description": "Name of template variable",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name": {
      "name": "variable",
      "in": "body",
      "description": "Variables to bind when applying template in iteration",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_number": {
      "name": "number",
      "in": "body",
      "description": "<1-65535>;;Iteration number",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_number"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number": {
      "name": "iteration",
      "in": "body",
      "description": "Apply custom template multiple times with iteration",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name": {
      "name": "custom-template",
      "in": "body",
      "description": "Custom templates to apply when device is ready",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_delete-post-input": {
      "name": "delete",
      "in": "body",
      "description": "Delete this item.\nIf this action is invoked for an item which is in other states\nthan 'failed' this data migth later reappear since this service\nis then still affected by an active commit queue transaction",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_delete-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_admin-clear-post-input": {
      "name": "admin-clear",
      "in": "body",
      "description": "Administratively clear this item.\nInformation about failed devices will remain for this service.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_admin-clear-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_clear-post-input": {
      "name": "clear",
      "in": "body",
      "description": "Clear the service commit queue of all queue items.\nIf this action is invoked for an queue-items which has other states\nthan 'failed' those items migth later reappear since this service\nis then still affected by active commit queue transactions",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_clear-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_check-sync-post-input": {
      "name": "check-sync",
      "in": "body",
      "description": "Check if the service has been undermined, i.e., if the service\nwas to be re-deployed, would it do anything. This action will\ninvoke the Fastmap code to create the change set that is compared\nto the existing data in CDB locally.\n\nIf outformat is boolean, 'true' is returned if the service is\nin sync, i.e., a re-deploy would do nothing. If outformat is\ncli or xml, the changes that the service would do to the\nnetwork if re-deployed are returned.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_check-sync-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_self-test-post-input": {
      "name": "self-test",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_self-test-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_redeploy-post-input": {
      "name": "redeploy",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_redeploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_get-modifications-post-input": {
      "name": "get-modifications",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_get-modifications-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action-post": {
      "name": "action",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action": {
      "name": "action",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action"
      }
    },
    "flat-L3vpn": {
      "name": "flat-L3vpn",
      "in": "body",
      "description": "Flat L3VPN Configuration",
      "required": true,
      "schema": {
        "$ref": "#/definitions/flat-L3vpn"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_get-modifications-post-input": {
      "name": "get-modifications",
      "in": "body",
      "description": "Returns the data the service modified, either\nin CLI curly bracket format, or NETCONF XML edit-config format.\nThis data is only available if the parameter\n'/services/global-settings/collect-forward-diff' is set to true.\n\nIf the parameter 'reverse' is given the modifications needed\nto 'reverse' the effect of the service is shown. This will\nbe applied if the service is deleted. This data is always\navailable.\n\nThe parameter deep/shallow controls if the modifications shown\nare for this service only or for all modiefied services as well.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_get-modifications-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_force-back-track-post-input": {
      "name": "force-back-track",
      "in": "body",
      "description": "Forces an existing component to start back-tracking",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_force-back-track-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_get-modifications-post-input": {
      "name": "get-modifications",
      "in": "body",
      "description": "Returns the data the service modified, either\nin CLI curly bracket format, or NETCONF XML edit-config format.\nThis data is only available if the parameter\n'/services/global-settings/collect-forward-diff' is set to true.\n\nIf the parameter 'reverse' is given the modifications needed\nto 'reverse' the effect of the service is shown. This will\nbe applied if the service is deleted. This data is always\navailable.\n\nThe parameter deep/shallow controls if the modifications shown\nare for this service only or for all modiefied services as well.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_get-modifications-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions_cleanup-post-input": {
      "name": "cleanup",
      "in": "body",
      "description": "Clean up L3vpn service configuration and operational data",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn-actions_cleanup-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions-post": {
      "name": "flat-L3vpn-actions",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn-actions-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions": {
      "name": "flat-L3vpn-actions",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_flat-L3vpn-actions"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_un-deploy-post-input": {
      "name": "un-deploy",
      "in": "body",
      "description": "Undo the effects of the service instance but keep the\nservice itself. The service can later be re-deployed. This is\na means to deactivate a service, but keeping it in the system.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_un-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_touch-post-input": {
      "name": "touch",
      "in": "body",
      "description": "This action marks the service as changed.\n\nExecuting the action touch followed by a commit is the same as\nexecuting the action 're-deploy shallow'.\n\nBy using the action 'touch' several re-deploys can be performed\nin the same transaction.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_touch-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_reactive-re-deploy-post-input": {
      "name": "reactive-re-deploy",
      "in": "body",
      "description": "This is a tailored re-deploy intended to be used in the reactive\nFastmap scenario. It differs from the ordinary re-deploy in that\nthis action does not take any commit parameters.\n\nThis action will re-deploy the services as an\n'shallow' depth re-deploy. It will be performed with the same\nuser as the original commit. Also, the commit parameters will be\nidentical to the latest commit involving this service.\n\nBy default this action is asynchronous and returns nothing.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_reactive-re-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_re-deploy-post-input": {
      "name": "re-deploy",
      "in": "body",
      "description": "Run the service code again, possibly writing the changes of\nthe service to the network once again.\n\nIf the dry-run option is used,\nthe action simply reports (in different formats) what it would do.\n\nUse the option 'reconcile' if the service should reconcile\noriginal data, i.e., take control of that data. This option\nacknowledges other services controlling the same data.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_re-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_service-list_service-list-id": {
      "name": "service-list",
      "in": "body",
      "description": "A list of services this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_service-list_service-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_re-deploy-counter": {
      "name": "re-deploy-counter",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_re-deploy-counter"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name_value": {
      "name": "value",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name_name": {
      "name": "name",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name": {
      "name": "property",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list-post": {
      "name": "property-list",
      "in": "body",
      "description": "Fastmap service instance data used by the service implementation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list": {
      "name": "property-list",
      "in": "body",
      "description": "Fastmap service instance data used by the service implementation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_ned-id-list_ned-id-list-id": {
      "name": "ned-id-list",
      "in": "body",
      "description": "A list of NED identities this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_ned-id-list_ned-id-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_lsa-service-list_lsa-service-list-id": {
      "name": "lsa-service-list",
      "in": "body",
      "description": "A list of LSA services this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_lsa-service-list_lsa-service-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_latest-u-info": {
      "name": "latest-u-info",
      "in": "body",
      "description": "Latest transactions user info is stored there, these are\nused in reactive-re-deploy actions that must be performed by\na user with the same user info.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_latest-u-info"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_latest-commit-params": {
      "name": "latest-commit-params",
      "in": "body",
      "description": "Latest transactions commit parameters are stored there, these are\nused in reactive-re-deploy actions that must have the same\nparameters as the original service commit.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_latest-commit-params"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_forward-diff-set": {
      "name": "forward-diff-set",
      "in": "body",
      "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_forward-diff-set"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_diff-set": {
      "name": "diff-set",
      "in": "body",
      "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_diff-set"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_device-list_device-list-id": {
      "name": "device-list",
      "in": "body",
      "description": "A list of managed devices this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_device-list_device-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private-post": {
      "name": "private",
      "in": "body",
      "description": "NCS service related internal data stored here.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private": {
      "name": "private",
      "in": "body",
      "description": "NCS service related internal data stored here.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_purge-post-input": {
      "name": "purge",
      "in": "body",
      "description": "This action requests to delete log entries from the log-entry\nlist according to the supplied criteria.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_purge-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_get-modifications-post-input": {
      "name": "get-modifications",
      "in": "body",
      "description": "Returns the data the service modified, either\nin CLI curly bracket format, or NETCONF XML edit-config format.\nThis data is only available if the parameter\n'/services/global-settings/collect-forward-diff' is set to true.\n\nIf the parameter 'reverse' is given the modifications needed\nto 'reverse' the effect of the service is shown. This will\nbe applied if the service is deleted. This data is always\navailable.\n\nThe parameter deep/shallow controls if the modifications shown\nare for this service only or for all modiefied services as well.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_get-modifications-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_deep-check-sync-post-input": {
      "name": "deep-check-sync",
      "in": "body",
      "description": "Check if the service has been undermined on the device itself.\nThe action 'check-sync' compares the output of the service\ncode to what is stored in CDB locally. This action retrieves the\nconfiguration from the devices touched by the service and compares\nthe forward diff set of the service to the retrieved data. This\nis thus a fairly heavy weight operation. As opposed to the check-sync\naction that invokes the Fastmap code, this action re-applies the\nforward diff-set. This is the same output you see when inspecting\nthe 'get-modifications' operational field in the service instance.\n\nIf the device is in sync with CDB, the output of this action\nis identical to the output of the cheaper check-sync action",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_deep-check-sync-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_delete-post-input": {
      "name": "delete",
      "in": "body",
      "description": "Delete this item.\nIf this action is invoked for an item which is in other states\nthan 'failed' this data migth later reappear since this service\nis then still affected by an active commit queue transaction",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_delete-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_admin-clear-post-input": {
      "name": "admin-clear",
      "in": "body",
      "description": "Administratively clear this item.\nInformation about failed devices will remain for this service.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_admin-clear-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_clear-post-input": {
      "name": "clear",
      "in": "body",
      "description": "Clear the service commit queue of all queue items.\nIf this action is invoked for an queue-items which has other states\nthan 'failed' those items migth later reappear since this service\nis then still affected by active commit queue transactions",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_clear-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_check-sync-post-input": {
      "name": "check-sync",
      "in": "body",
      "description": "Check if the service has been undermined, i.e., if the service\nwas to be re-deployed, would it do anything. This action will\ninvoke the Fastmap code to create the change set that is compared\nto the existing data in CDB locally.\n\nIf outformat is boolean, 'true' is returned if the service is\nin sync, i.e., a re-deploy would do nothing. If outformat is\ncli or xml, the changes that the service would do to the\nnetwork if re-deployed are returned.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_check-sync-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled-post": {
      "name": "stacked-service-enabled",
      "in": "body",
      "description": "Set to use stacked-service deployment model - experimental demo feature",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled": {
      "name": "stacked-service-enabled",
      "in": "body",
      "description": "Set to use stacked-service deployment model - experimental demo feature",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_local-user": {
      "name": "local-user",
      "in": "body",
      "description": "NCS user with sufficient permissions to write config data",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_local-user"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_l3vpn-validation-enabled": {
      "name": "l3vpn-validation-enabled",
      "in": "body",
      "description": "If set to true, following validations are done for l3vpn service:\n1. All the endpoint interfaces are available on the endpoint.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_l3vpn-validation-enabled"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_l3vpn-device-error-validation-enabled": {
      "name": "l3vpn-device-error-validation-enabled",
      "in": "body",
      "description": "If set to true, following validations are done for l3vpn service:\n1. Check if RD change will be accepted by endpoint.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_l3vpn-device-error-validation-enabled"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_iosxr-default-ned-id": {
      "name": "iosxr-default-ned-id",
      "in": "body",
      "description": "NED ID of the default IOSXR Device.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_iosxr-default-ned-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_un-deploy-post-input": {
      "name": "un-deploy",
      "in": "body",
      "description": "Undo the effects of the service instance but keep the\nservice itself. The service can later be re-deployed. This is\na means to deactivate a service, but keeping it in the system.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_un-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_touch-post-input": {
      "name": "touch",
      "in": "body",
      "description": "This action marks the service as changed.\n\nExecuting the action touch followed by a commit is the same as\nexecuting the action 're-deploy shallow'.\n\nBy using the action 'touch' several re-deploys can be performed\nin the same transaction.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_touch-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_reactive-re-deploy-post-input": {
      "name": "reactive-re-deploy",
      "in": "body",
      "description": "This is a tailored re-deploy intended to be used in the reactive\nFastmap scenario. It differs from the ordinary re-deploy in that\nthis action does not take any commit parameters.\n\nThis action will re-deploy the services as an\n'shallow' depth re-deploy. It will be performed with the same\nuser as the original commit. Also, the commit parameters will be\nidentical to the latest commit involving this service.\n\nBy default this action is asynchronous and returns nothing.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_reactive-re-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_re-deploy-post-input": {
      "name": "re-deploy",
      "in": "body",
      "description": "Run the service code again, possibly writing the changes of\nthe service to the network once again.\n\nIf the dry-run option is used,\nthe action simply reports (in different formats) what it would do.\n\nUse the option 'reconcile' if the service should reconcile\noriginal data, i.e., take control of that data. This option\nacknowledges other services controlling the same data.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_re-deploy-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_service-list_service-list-id": {
      "name": "service-list",
      "in": "body",
      "description": "A list of services this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_service-list_service-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_re-deploy-counter": {
      "name": "re-deploy-counter",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_re-deploy-counter"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list_property_property-name_value": {
      "name": "value",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list_property_property-name_value"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list_property_property-name_name": {
      "name": "name",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list_property_property-name_name"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list_property_property-name": {
      "name": "property",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list_property_property-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list-post": {
      "name": "property-list",
      "in": "body",
      "description": "Fastmap service instance data used by the service implementation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list": {
      "name": "property-list",
      "in": "body",
      "description": "Fastmap service instance data used by the service implementation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_property-list"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_ned-id-list_ned-id-list-id": {
      "name": "ned-id-list",
      "in": "body",
      "description": "A list of NED identities this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_ned-id-list_ned-id-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_lsa-service-list_lsa-service-list-id": {
      "name": "lsa-service-list",
      "in": "body",
      "description": "A list of LSA services this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_lsa-service-list_lsa-service-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_latest-u-info": {
      "name": "latest-u-info",
      "in": "body",
      "description": "Latest transactions user info is stored there, these are\nused in reactive-re-deploy actions that must be performed by\na user with the same user info.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_latest-u-info"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_latest-commit-params": {
      "name": "latest-commit-params",
      "in": "body",
      "description": "Latest transactions commit parameters are stored there, these are\nused in reactive-re-deploy actions that must have the same\nparameters as the original service commit.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_latest-commit-params"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_forward-diff-set": {
      "name": "forward-diff-set",
      "in": "body",
      "description": "Internal node use by NCS service manager to remember\nthe forwards diff for a service instance. This data is\nis used to produce the proper 'get-modifications' output",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_forward-diff-set"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_diff-set": {
      "name": "diff-set",
      "in": "body",
      "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_diff-set"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_device-list_device-list-id": {
      "name": "device-list",
      "in": "body",
      "description": "A list of managed devices this service instance has manipulated.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private_device-list_device-list-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private-post": {
      "name": "private",
      "in": "body",
      "description": "NCS service related internal data stored here.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private": {
      "name": "private",
      "in": "body",
      "description": "NCS service related internal data stored here.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_private"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_log_purge-post-input": {
      "name": "purge",
      "in": "body",
      "description": "This action requests to delete log entries from the log-entry\nlist according to the supplied criteria.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_log_purge-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_get-modifications-post-input": {
      "name": "get-modifications",
      "in": "body",
      "description": "Returns the data the service modified, either\nin CLI curly bracket format, or NETCONF XML edit-config format.\nThis data is only available if the parameter\n'/services/global-settings/collect-forward-diff' is set to true.\n\nIf the parameter 'reverse' is given the modifications needed\nto 'reverse' the effect of the service is shown. This will\nbe applied if the service is deleted. This data is always\navailable.\n\nThe parameter deep/shallow controls if the modifications shown\nare for this service only or for all modiefied services as well.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_get-modifications-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_deep-check-sync-post-input": {
      "name": "deep-check-sync",
      "in": "body",
      "description": "Check if the service has been undermined on the device itself.\nThe action 'check-sync' compares the output of the service\ncode to what is stored in CDB locally. This action retrieves the\nconfiguration from the devices touched by the service and compares\nthe forward diff set of the service to the retrieved data. This\nis thus a fairly heavy weight operation. As opposed to the check-sync\naction that invokes the Fastmap code, this action re-applies the\nforward diff-set. This is the same output you see when inspecting\nthe 'get-modifications' operational field in the service instance.\n\nIf the device is in sync with CDB, the output of this action\nis identical to the output of the cheaper check-sync action",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_deep-check-sync-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_commit-queue_queue-item_queue-item-id_delete-post-input": {
      "name": "delete",
      "in": "body",
      "description": "Delete this item.\nIf this action is invoked for an item which is in other states\nthan 'failed' this data migth later reappear since this service\nis then still affected by an active commit queue transaction",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_commit-queue_queue-item_queue-item-id_delete-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_commit-queue_queue-item_queue-item-id_admin-clear-post-input": {
      "name": "admin-clear",
      "in": "body",
      "description": "Administratively clear this item.\nInformation about failed devices will remain for this service.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_commit-queue_queue-item_queue-item-id_admin-clear-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_commit-queue_clear-post-input": {
      "name": "clear",
      "in": "body",
      "description": "Clear the service commit queue of all queue items.\nIf this action is invoked for an queue-items which has other states\nthan 'failed' those items migth later reappear since this service\nis then still affected by active commit queue transactions",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_commit-queue_clear-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_check-sync-post-input": {
      "name": "check-sync",
      "in": "body",
      "description": "Check if the service has been undermined, i.e., if the service\nwas to be re-deployed, would it do anything. This action will\ninvoke the Fastmap code to create the change set that is compared\nto the existing data in CDB locally.\n\nIf outformat is boolean, 'true' is returned if the service is\nin sync, i.e., a re-deploy would do nothing. If outformat is\ncli or xml, the changes that the service would do to the\nnetwork if re-deployed are returned.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled_check-sync-post-input"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled-post": {
      "name": "global-rd-enabled",
      "in": "body",
      "description": "Set this flag to apply RD under global VRF definition.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled": {
      "name": "global-rd-enabled",
      "in": "body",
      "description": "Set this flag to apply RD under global VRF definition.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_global-rd-enabled"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_dynamic-device-mapping_dynamic-device-mapping-ned-id_python-impl-class-name": {
      "name": "python-impl-class-name",
      "in": "body",
      "description": "Device Python implementation class, eg module.class",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_dynamic-device-mapping_dynamic-device-mapping-ned-id_python-impl-class-name"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_dynamic-device-mapping_dynamic-device-mapping-ned-id_ned-id": {
      "name": "ned-id",
      "in": "body",
      "description": "Device NED ID, eg ned:netconf",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_dynamic-device-mapping_dynamic-device-mapping-ned-id_ned-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_dynamic-device-mapping_dynamic-device-mapping-ned-id": {
      "name": "dynamic-device-mapping",
      "in": "body",
      "description": "Dynamic Device Mapping",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_dynamic-device-mapping_dynamic-device-mapping-ned-id"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_auto-cleanup": {
      "name": "auto-cleanup",
      "in": "body",
      "description": "When a device is down and this flag is set to true,\non deletion of device from the service, all data pertaining to this device\nwill be removed automatically using no-networking.\nThis means user has to take care of device config cleanup on the device.\nIf it is set to false, user will need to run cleanup action\nto remove this device from the service.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations_auto-cleanup"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations-post": {
      "name": "cfp-configurations",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations-post"
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations": {
      "name": "cfp-configurations",
      "in": "body",
      "description": "",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data_cisco-flat-L3vpn-fp_cfp-configurations"
      }
    },
    "data-put-patch": {
      "name": "data",
      "in": "body",
      "description": "MPLS L3VPN function pack - example",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data-put-patch"
      }
    },
    "data-post": {
      "name": "data",
      "in": "body",
      "description": "MPLS L3VPN function pack - example",
      "required": true,
      "schema": {
        "$ref": "#/definitions/data-post"
      }
    },
    "custom-template-name": {
      "name": "custom-template-name",
      "in": "path",
      "description": "Name of template to apply",
      "required": true,
      "type": "string",
      "format": "leafref"
    },
    "context-context-name": {
      "name": "context-context-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "component-type": {
      "name": "component-type",
      "in": "path",
      "description": "The plan component type is defined by an YANG identity.\nIt is used to identify the characteristics of a certain component.\nTherefore, if two components in the same service are of the same\ntype they should be identical with respect to number, type and order\nof their contained states.",
      "required": true,
      "type": "string",
      "format": "identityref"
    },
    "component-name": {
      "name": "component-name",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "string"
    },
    "color-id": {
      "name": "color-id",
      "in": "path",
      "description": "<1-4294967295> - SR policy color",
      "required": true,
      "type": "integer",
      "format": "uint32"
    },
    "address-family-address-family": {
      "name": "address-family-address-family",
      "in": "path",
      "description": "",
      "required": true,
      "type": "string",
      "format": "enumeration",
      "default": "ipv4",
      "enum": [
        "ipv4",
        "ipv6"
      ]
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "201": {
      "description": "Created. The request was successful. One or more new resources were created."
    },
    "204": {
      "description": "No Content. The request was successful and there is no additional content in the response body."
    },
    "400": {
      "description": "Bad Request. The request is malformed in some way and the server cannot process it."
    },
    "401": {
      "description": "Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource."
    },
    "404": {
      "description": "Not Found. The client made a request for a resource that does not exist."
    },
    "405": {
      "description": "Method Not Allowed. The method received in the request line is known by the origin server but not supported by the target resource."
    },
    "409": {
      "description": "Conflict. The request could not be completed due to a conflict with the current state of the target resource."
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "yang-library-version": {
      "type": "object",
      "properties": {
        "ietf-restconf:yang-library-version": {
          "type": "object",
          "description": "This leaf identifies the revision date of the 'ietf-yang-library' YANG module that is implemented by this server. See RESTCONF RFC 8040 for further information.",
          "x-yang": {
            "type": "leaf"
          },
          "properties": {
          }
        }
      }
    },
    "root": {
      "type": "object",
      "properties": {
        "ietf-restconf:restconf": {
          "type": "object",
          "x-yang": {
            "type": "root"
          },
          "description": "This is the RESTCONF root resource for the RESTCONF datastore and operation resources. See RESTCONF RFC 8040 for further information.",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
              }
            },
            "operations": {
              "type": "object",
              "properties": {
              }
            },
            "yang-library-version": {
              "type": "string"
            }
          }
        }
      }
    },
    "operations": {
      "type": "object",
      "properties": {
        "ietf-restconf:operations": {
          "type": "object",
          "x-yang": {
            "type": "operations"
          },
          "description": "This resource is a container that provides access to the data-model-specific RPC operations supported by the server. See RESTCONF RFC 8040 for further information.",
          "properties": {

          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Route-Policy name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6_ipv6-prefix_ipv6-prefix-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ipv6-prefix": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ipv6-prefix": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv6": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ipv6": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "ipv6-prefix": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4_prefix_prefix-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:prefix": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:prefix": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_ipv4": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ipv4": {
          "description": "IPv4 ODN SR (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "prefix": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id_id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:id": {
          "description": "<1-4294967295> - SR policy color (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_l3vpn-route-policy_l3vpn-route-policy-name_color_color-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:color": {
          "type": "array",
          "description": "SR policy color (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "<1-4294967295> - SR policy color (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ipv4": {
                "description": "IPv4 ODN SR (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "prefix": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "ipv6": {
                "description": "(presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "ipv6-prefix": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "l3vpn-route-policy": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Route-Policy name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "color": {
          "type": "array",
          "description": "SR policy color (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "<1-4294967295> - SR policy color (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "ipv4": {
                "description": "IPv4 ODN SR (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "prefix": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "ipv6": {
                "description": "(presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "ipv6-prefix": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "xml": {
        "namespace": "http://cisco.com/ns/nso/fp/examples/cisco-tsdn-flat-L3vpn"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_used-by-customer-service_used-by-customer-service-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:used-by-customer-service": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_used-by-customer-service": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:used-by-customer-service": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_un-deploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "Display all changes in the whole data model. The\nchanges will be displayed in NETCONF XML edit-config format,\ni.e., the edit-config that would be applied locally (at NCS)\nto get a config that is equal to that of the managed device. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-node": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "id": {
              "description": "This leaf is returned if 'commit-queue/async' or\n'commit-queue/sync' was given in the input parameters. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "status": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "async",
              "enum": [
                "async",
                "completed",
                "timeout",
                "deleted",
                "failed"
              ]
            },
            "failed-device": {
              "type": "array",
              "description": "The devices which failed for this queue item. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "reason": {
                    "description": "The error for this failing device. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_un-deploy-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:dry-run": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "outformat": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "cli",
              "enum": [
                "cli",
                "xml",
                "native"
              ]
            }
          }
        },
        "cisco-flat-L3vpn-fp:no-revision-drop": {
          "description": "This flags means that NCS will not run its data model revision\nalgorithm, which requires all participating managed devices\nto have all parts of the data models for all data contained\nin this transaction. Thus, this flag forces NCS to never\nsilently drop any data set operations towards a device. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-overwrite": {
          "description": "This flags means that NCS will check that the data that\nshould be modified has not changed on the device compared\nto NCS's view of the data. This is a fine-granular sync check;\nNCS verifies that NCS and the device is in sync regarding\nthe data that will be modified. If they are not in sync,\nthe transaction is aborted. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "tag": {
              "description": "User defined opaque tag.\nThe tag is present in all notifications and events\nsent referencing the specific queue item. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "async": {
              "description": "Commit the transaction data asynchronously to the commit queue.\nThis flag is useful when some device is non-operational or\nhas data waiting in the commit queue.\n\nThe operation returns successfully if the transaction data has\nbeen successfully placed in the queue. The leaf\n'commit-queue/id' is set as the queue identifier and the\nleaf 'commit-queue/status' is set to 'async' in the result. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "block-others": {
              "description": "The resulting queue item will block subsequent queue items,\nwhich use any of the devices in this queue item, from\nbeing queued. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "lock": {
              "description": "Place a lock on the resulting queue item. The queue\nitem will not be processed until it has been unlocked,\nsee the actions 'unlock' and 'lock' in\n/devices/commit-queue/queue-item'.\n\nNo following queue items, using the same devices, will be\nallowed to execute as long as the lock is in place. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "atomic": {
              "description": "Sets the atomic behaviour of the resulting queue item.\nIf this is set to false, the devices contained in the\nresulting queue item can start executing if the same devices\nin other non-atomic queue items ahead of it in the queue are\ncompleted. If set to true, the atomic integrity of the\nqueue item is preserved. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "error-option": {
              "description": "The error option to use. Depending on the selected error option\nNCS will store the reverse of the original transaction intent\nto be able to undo the transaction changes and get back to the\nprevious state. This data is stored in the\n/devices/commit-queue/completed tree from where it can\nbe viewed and invoked with the rollback action. When invoked\nthe data will be removed. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "continue-on-error",
              "enum": [
                "continue-on-error",
                "rollback-on-error",
                "stop-on-error"
              ]
            },
            "unlock": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "id": {
                  "description": "Unique id identifying a queue item. If locked, this\nitem will be unlocked in the commit phase. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint64"
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling of the LSA nodes as such. This flag tells\nNCS to propagate applicable commit flags and actions\nto the LSA nodes without applying them on the upper\nNCS node itself. The commit flags affected are\n'dry-run', 'no-networking', 'no-out-of-sync-check',\n'no-overwrite' and 'no-revision-drop'. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:wait-device": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Take device locks before entering transaction critical section. The\ndevice locks here should be understood to be internal locks in NSO, so\nthe device itself is not locked. If the device locks are held by\nsomeone else, wait for them to become available. The timeout applied\nin this case is the same as used to wait for the transaction lock.\n\nNormally the device locks are taken automatically inside the\ntransaction critical section, because in a typical service transaction\nwe do not know the affected devices before the service code is\nexecuted. When taking the device locks inside transaction critical\nsection, it is not possible to wait for lock, so in case the lock is\nnot available the transaction is aborted.\n\nThis parameter allows to specify the devices expected to be\naffected by the transaction so they can be pre-locked before entering\nthe transaction critical section. This allows to wait for device\nlocks. This is useful in cases when other actions holding the device\nlock may be on-going at the same time and the desired behaviour is\nto wait for these actions to complete rather than abort the\ntransaction. Examples of such actions are: sync-from,\npartial-sync-from, check-sync, sync-to, compare-config.\n\nSimilarly, when used with a commit through commit queue, this\nparameter allows to wait for queue items with block-others flag. For\nexample, a queue item with block-others flag is created by actions\nsuch as sync-from and partial-sync-from, and when a commit queue item\nfails with error-option being rollback-on-error or stop-on-error.\n\nIf the transaction involves other devices than specified by this\nparameter, then the lock still needs to be taken on these additional\ndevices, which is done inside transaction critical section and may\nfail if the device lock for the additional devices is already held\nby someone else. (leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        },
        "cisco-flat-L3vpn-fp:ignore-refcount": {
          "description": "Unconditionally delete the device data created by the\nservice, regardless of the refcount. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_touch-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_touch-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_redeploy-flag": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:redeploy-flag": {
          "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_reactive-re-deploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "id": {
              "description": "This leaf is returned if 'commit-queue/async' or\n'commit-queue/sync' was given in the input parameters. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "status": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "async",
              "enum": [
                "async",
                "completed",
                "timeout",
                "deleted",
                "failed"
              ]
            },
            "failed-device": {
              "type": "array",
              "description": "The devices which failed for this queue item. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "reason": {
                    "description": "The error for this failing device. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_reactive-re-deploy-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:sync": {
          "description": "By default the action is asynchronous, i.e. it does not wait for\nthe service to be re-deployed. Use this leaf to get synchronous\nbehaviour and block until the service re-deploy transaction is\ncommitted. It also means that the action will possibly return\na commit result, such as commit queue id if any, or an\nerror if the transaction failed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_re-deploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "Display all changes in the whole data model. The\nchanges will be displayed in NETCONF XML edit-config format,\ni.e., the edit-config that would be applied locally (at NCS)\nto get a config that is equal to that of the managed device. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-node": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "id": {
              "description": "This leaf is returned if 'commit-queue/async' or\n'commit-queue/sync' was given in the input parameters. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "status": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "async",
              "enum": [
                "async",
                "completed",
                "timeout",
                "deleted",
                "failed"
              ]
            },
            "failed-device": {
              "type": "array",
              "description": "The devices which failed for this queue item. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "reason": {
                    "description": "The error for this failing device. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_re-deploy-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:dry-run": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "outformat": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "cli",
              "enum": [
                "cli",
                "xml",
                "native"
              ]
            }
          }
        },
        "cisco-flat-L3vpn-fp:no-revision-drop": {
          "description": "This flags means that NCS will not run its data model revision\nalgorithm, which requires all participating managed devices\nto have all parts of the data models for all data contained\nin this transaction. Thus, this flag forces NCS to never\nsilently drop any data set operations towards a device. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-overwrite": {
          "description": "This flags means that NCS will check that the data that\nshould be modified has not changed on the device compared\nto NCS's view of the data. This is a fine-granular sync check;\nNCS verifies that NCS and the device is in sync regarding\nthe data that will be modified. If they are not in sync,\nthe transaction is aborted. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "tag": {
              "description": "User defined opaque tag.\nThe tag is present in all notifications and events\nsent referencing the specific queue item. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "async": {
              "description": "Commit the transaction data asynchronously to the commit queue.\nThis flag is useful when some device is non-operational or\nhas data waiting in the commit queue.\n\nThe operation returns successfully if the transaction data has\nbeen successfully placed in the queue. The leaf\n'commit-queue/id' is set as the queue identifier and the\nleaf 'commit-queue/status' is set to 'async' in the result. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "block-others": {
              "description": "The resulting queue item will block subsequent queue items,\nwhich use any of the devices in this queue item, from\nbeing queued. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "lock": {
              "description": "Place a lock on the resulting queue item. The queue\nitem will not be processed until it has been unlocked,\nsee the actions 'unlock' and 'lock' in\n/devices/commit-queue/queue-item'.\n\nNo following queue items, using the same devices, will be\nallowed to execute as long as the lock is in place. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "atomic": {
              "description": "Sets the atomic behaviour of the resulting queue item.\nIf this is set to false, the devices contained in the\nresulting queue item can start executing if the same devices\nin other non-atomic queue items ahead of it in the queue are\ncompleted. If set to true, the atomic integrity of the\nqueue item is preserved. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "error-option": {
              "description": "The error option to use. Depending on the selected error option\nNCS will store the reverse of the original transaction intent\nto be able to undo the transaction changes and get back to the\nprevious state. This data is stored in the\n/devices/commit-queue/completed tree from where it can\nbe viewed and invoked with the rollback action. When invoked\nthe data will be removed. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "continue-on-error",
              "enum": [
                "continue-on-error",
                "rollback-on-error",
                "stop-on-error"
              ]
            },
            "unlock": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "id": {
                  "description": "Unique id identifying a queue item. If locked, this\nitem will be unlocked in the commit phase. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint64"
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling of the LSA nodes as such. This flag tells\nNCS to propagate applicable commit flags and actions\nto the LSA nodes without applying them on the upper\nNCS node itself. The commit flags affected are\n'dry-run', 'no-networking', 'no-out-of-sync-check',\n'no-overwrite' and 'no-revision-drop'. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:wait-device": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Take device locks before entering transaction critical section. The\ndevice locks here should be understood to be internal locks in NSO, so\nthe device itself is not locked. If the device locks are held by\nsomeone else, wait for them to become available. The timeout applied\nin this case is the same as used to wait for the transaction lock.\n\nNormally the device locks are taken automatically inside the\ntransaction critical section, because in a typical service transaction\nwe do not know the affected devices before the service code is\nexecuted. When taking the device locks inside transaction critical\nsection, it is not possible to wait for lock, so in case the lock is\nnot available the transaction is aborted.\n\nThis parameter allows to specify the devices expected to be\naffected by the transaction so they can be pre-locked before entering\nthe transaction critical section. This allows to wait for device\nlocks. This is useful in cases when other actions holding the device\nlock may be on-going at the same time and the desired behaviour is\nto wait for these actions to complete rather than abort the\ntransaction. Examples of such actions are: sync-from,\npartial-sync-from, check-sync, sync-to, compare-config.\n\nSimilarly, when used with a commit through commit queue, this\nparameter allows to wait for queue items with block-others flag. For\nexample, a queue item with block-others flag is created by actions\nsuch as sync-from and partial-sync-from, and when a commit queue item\nfails with error-option being rollback-on-error or stop-on-error.\n\nIf the transaction involves other devices than specified by this\nparameter, then the lock still needs to be taken on these additional\ndevices, which is done inside transaction critical section and may\nfail if the device lock for the additional devices is already held\nby someone else. (leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:reconcile": {
          "description": "Reconcile the service data. All data which existed before\nthe service was created will now be owned by the service.\nThe reference count will indicate how many services control\nthe data. When the service is removed that data will also be\nremoved. In technical terms the reference count will be\ndecreased by one for everything which existed prior to the\nservice.\n\nIf manually configured data exists below in the configuration\ntree that data is kept unless the option\n'discard-non-service-config' is used. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "keep-non-service-config": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_service-list_service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_re-deploy-counter": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:re-deploy-counter": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "int32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list_property_property-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_property-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property-list": {
          "description": "Fastmap service instance data used by the service implementation. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_ned-id-list_ned-id-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_lsa-service-list_lsa-service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_latest-u-info": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:latest-u-info": {
          "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_latest-commit-params": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:latest-commit-params": {
          "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_forward-diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:forward-diff-set": {
          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:diff-set": {
          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private_device-list_device-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:diff-set": {
          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        },
        "cisco-flat-L3vpn-fp:forward-diff-set": {
          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        },
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        },
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        },
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        },
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        },
        "cisco-flat-L3vpn-fp:property-list": {
          "description": "Fastmap service instance data used by the service implementation. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:re-deploy-counter": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "int32"
        },
        "cisco-flat-L3vpn-fp:latest-commit-params": {
          "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        },
        "cisco-flat-L3vpn-fp:latest-u-info": {
          "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_private": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "diff-set": {
              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "forward-diff-set": {
              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "device-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "ned-id-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "property-list": {
              "description": "Fastmap service instance data used by the service implementation. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "property": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "re-deploy-counter": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "int32"
            },
            "latest-commit-params": {
              "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "latest-u-info": {
              "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Service Name for L3VPN (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified_services_services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified_services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified_lsa-services_lsa-services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified_lsa-services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified_devices_devices-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified_devices": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_modified": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:modified": {
          "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "devices": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "leafref"
              }
            },
            "services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_purge-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:purged-log-entries": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_purge-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        },
        "cisco-flat-L3vpn-fp:level": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "all",
          "enum": [
            "all",
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ]
        },
        "cisco-flat-L3vpn-fp:older-than": {
          "description": "Matches the 'when' leaf in the log entry. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "seconds": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint16"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_log-entry_log-entry-when_when": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:when": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_log-entry_log-entry-when_type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "Indicates this log entry's type. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_log-entry_log-entry-when_message": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:message": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_log-entry_log-entry-when_level": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:level": {
          "description": "Indicates this log entry's log level. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "all",
          "enum": [
            "all",
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_log-entry_log-entry-when": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log-entry": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "when": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "Indicates this log entry's type. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "level": {
                "description": "Indicates this log entry's log level. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "all",
                "enum": [
                  "all",
                  "trace",
                  "debug",
                  "info",
                  "warn",
                  "error"
                ]
              },
              "message": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log_log-entry": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log-entry": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "when": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "Indicates this log entry's type. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "level": {
                "description": "Indicates this log entry's log level. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "all",
                "enum": [
                  "all",
                  "trace",
                  "debug",
                  "info",
                  "warn",
                  "error"
                ]
              },
              "message": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_log": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "log-entry": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "when": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "description": "Indicates this log entry's type. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "level": {
                    "description": "Indicates this log entry's log level. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "all",
                    "enum": [
                      "all",
                      "trace",
                      "debug",
                      "info",
                      "warn",
                      "error"
                    ]
                  },
                  "message": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_get-modifications-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-service": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-id": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_get-modifications-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml"
          ]
        },
        "cisco-flat-L3vpn-fp:reverse": {
          "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_vrf-definition": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vrf-definition": {
          "description": "VRF Name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_vpn-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vpn-id": {
          "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_route-distinguisher": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:route-distinguisher": {
          "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value_rt-value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:rt-value": {
          "description": "Route-Target Value (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value_rt-type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:rt-type": {
          "description": "Route-Target Type (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "import",
          "enum": [
            "import",
            "export",
            "both"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_vpn-target_vpn-target-rt-value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vpn-target": {
          "type": "array",
          "description": "Route Targets (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "rt-type": {
                "description": "Route-Target Type (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "import",
                "enum": [
                  "import",
                  "export",
                  "both"
                ]
              },
              "rt-value": {
                "description": "Route-Target Value (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_redistribute-connected": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:redistribute-connected": {
          "description": "Redistribute Connected (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_metric": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:metric": {
          "description": "Default metric (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family_address-family": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:address-family": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "ipv4",
          "enum": [
            "ipv4",
            "ipv6"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf_address-family_address-family-address-family": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:address-family": {
          "type": "array",
          "description": "Address Family (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "address-family": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "ipv4",
                "enum": [
                  "ipv4",
                  "ipv6"
                ]
              },
              "redistribute-connected": {
                "description": "Redistribute Connected (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "metric": {
                "description": "Default metric (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "vpn-target": {
                "type": "array",
                "description": "Route Targets (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "rt-type": {
                      "description": "Route-Target Type (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "import",
                      "enum": [
                        "import",
                        "export",
                        "both"
                      ]
                    },
                    "rt-value": {
                      "description": "Route-Target Value (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vrf-definition": {
          "description": "VRF Name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:route-distinguisher": {
          "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:vpn-id": {
          "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:address-family": {
          "type": "array",
          "description": "Address Family (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "address-family": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "ipv4",
                "enum": [
                  "ipv4",
                  "ipv6"
                ]
              },
              "redistribute-connected": {
                "description": "Redistribute Connected (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "metric": {
                "description": "Default metric (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "vpn-target": {
                "type": "array",
                "description": "Route Targets (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "rt-type": {
                      "description": "Route-Target Type (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "import",
                      "enum": [
                        "import",
                        "export",
                        "both"
                      ]
                    },
                    "rt-value": {
                      "description": "Route-Target Value (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vrf": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vrf": {
          "description": "VRF Definition (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "vrf-definition": {
              "description": "VRF Name (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "route-distinguisher": {
              "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "vpn-id": {
              "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "address-family": {
              "type": "array",
              "description": "Address Family (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "address-family": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "ipv4",
                    "enum": [
                      "ipv4",
                      "ipv6"
                    ]
                  },
                  "redistribute-connected": {
                    "description": "Redistribute Connected (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "metric": {
                    "description": "Default metric (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "vpn-target": {
                    "type": "array",
                    "description": "Route Targets (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "rt-type": {
                          "description": "Route-Target Type (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "import",
                          "enum": [
                            "import",
                            "export",
                            "both"
                          ]
                        },
                        "rt-value": {
                          "description": "Route-Target Value (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_vlan-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vlan-id": {
          "description": "<1-4000> - VLAN Id (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "int32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te_route-policy": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:route-policy": {
          "description": "Route policy definition (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:route-policy": {
          "description": "Route policy definition (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_sr-te": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:sr-te": {
          "description": "Segment Routing Association (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "route-policy": {
              "description": "Route policy definition (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_redeploy-flag": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:redeploy-flag": {
          "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_pe-ipv6-addr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:pe-ipv6-addr": {
          "description": "<X:X::X/length> - PE IPv6 Address (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_pe-ip-addr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:pe-ip-addr": {
          "description": "<A.B.C.D/prefix> - PE IPv4 Address (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_mtu": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:mtu": {
          "description": "<64-65535> - Set the MTU on an interface (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_vlan-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:vlan-id": {
          "description": "<1-4000> - VLAN Id (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "int32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_translate": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:translate": {
          "description": "Replace tags with other tags (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "1-to-1",
          "enum": [
            "1-to-1",
            "1-to-2",
            "2-to-1",
            "2-to-2"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_push": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:push": {
          "description": "Push one or more tags (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_pop": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:pop": {
          "description": "Remove one or more tags (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "1",
          "enum": [
            "1",
            "2"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_mode": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:mode": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "symmetric",
          "enum": [
            "symmetric"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress_dot1q": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:dot1q": {
          "description": "<1-4094> - Push a Dot1Q tag (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:pop": {
          "description": "Remove one or more tags (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "1",
          "enum": [
            "1",
            "2"
          ]
        },
        "cisco-flat-L3vpn-fp:dot1q": {
          "description": "<1-4094> - Push a Dot1Q tag (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        },
        "cisco-flat-L3vpn-fp:mode": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "symmetric",
          "enum": [
            "symmetric"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite_ingress": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ingress": {
          "description": "Set the tag rewriting policy for this EFP (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "pop": {
              "description": "Remove one or more tags (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "1",
              "enum": [
                "1",
                "2"
              ]
            },
            "dot1q": {
              "description": "<1-4094> - Push a Dot1Q tag (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint16"
            },
            "mode": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "symmetric",
              "enum": [
                "symmetric"
              ]
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ingress": {
          "description": "Set the tag rewriting policy for this EFP (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "pop": {
              "description": "Remove one or more tags (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "1",
              "enum": [
                "1",
                "2"
              ]
            },
            "dot1q": {
              "description": "<1-4094> - Push a Dot1Q tag (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint16"
            },
            "mode": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "symmetric",
              "enum": [
                "symmetric"
              ]
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_rewrite": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:rewrite": {
          "description": "Tag Rewrite (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "ingress": {
              "description": "Set the tag rewriting policy for this EFP (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "pop": {
                  "description": "Remove one or more tags (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "1",
                  "enum": [
                    "1",
                    "2"
                  ]
                },
                "dot1q": {
                  "description": "<1-4094> - Push a Dot1Q tag (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint16"
                },
                "mode": {
                  "description": "(leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "symmetric",
                  "enum": [
                    "symmetric"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "L2 AC name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_if-type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-type": {
          "description": "Interface Type (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "GigabitEthernet",
          "enum": [
            "GigabitEthernet",
            "TenGigE",
            "FortyGigE",
            "HundredGigE",
            "FiftyGigE",
            "TwoHundredGigE",
            "Bundle-Ether",
            "FourHundredGigE",
            "TwentyFiveGigE"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name_if-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-id": {
          "description": "Interface Id (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_l2-attachment-circuit_l2-attachment-circuit-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:l2-attachment-circuit": {
          "type": "array",
          "description": "L2 Attachment Ciruit (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "L2 AC name (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "if-type": {
                "description": "Interface Type (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "GigabitEthernet",
                "enum": [
                  "GigabitEthernet",
                  "TenGigE",
                  "FortyGigE",
                  "HundredGigE",
                  "FiftyGigE",
                  "TwoHundredGigE",
                  "Bundle-Ether",
                  "FourHundredGigE",
                  "TwentyFiveGigE"
                ]
              },
              "if-id": {
                "description": "Interface Id (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "vlan-id": {
                "description": "<1-4000> - VLAN Id (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "int32"
              },
              "rewrite": {
                "description": "Tag Rewrite (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "ingress": {
                    "description": "Set the tag rewriting policy for this EFP (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "pop": {
                        "description": "Remove one or more tags (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "1",
                        "enum": [
                          "1",
                          "2"
                        ]
                      },
                      "dot1q": {
                        "description": "<1-4094> - Push a Dot1Q tag (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint16"
                      },
                      "mode": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "enumeration",
                        "default": "symmetric",
                        "enum": [
                          "symmetric"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_if-type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-type": {
          "description": "Interface Type (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "Loopback",
          "enum": [
            "Loopback",
            "BVI",
            "GigabitEthernet",
            "TenGigE",
            "FortyGigE",
            "HundredGigE",
            "FiftyGigE",
            "TwoHundredGigE",
            "Bundle-Ether",
            "FourHundredGigE",
            "TwentyFiveGigE"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_if-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-id": {
          "description": "Interface Id (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_endpoint-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:endpoint-name": {
          "description": "Endpoint name (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "Value of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Name of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_variable_variable-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:variable": {
          "type": "array",
          "description": "Variables to bind when applying template one time (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "value": {
                "description": "Value of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Name of template to apply (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "Value of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Name of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:variable": {
          "type": "array",
          "description": "Variables to bind when applying template in iteration (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "value": {
                "description": "Value of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number_number": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:number": {
          "description": "<1-65535>;;Iteration number (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name_iteration_iteration-number": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:iteration": {
          "type": "array",
          "description": "Apply custom template multiple times with iteration (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "description": "<1-65535>;;Iteration number (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint16"
              },
              "variable": {
                "type": "array",
                "description": "Variables to bind when applying template in iteration (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "value": {
                      "description": "Value of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_custom-template_custom-template-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:custom-template": {
          "type": "array",
          "description": "Custom templates to apply when device is ready (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template to apply (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "variable": {
                "type": "array",
                "description": "Variables to bind when applying template one time (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "value": {
                      "description": "Value of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "iteration": {
                "type": "array",
                "description": "Apply custom template multiple times with iteration (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "description": "<1-65535>;;Iteration number (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template in iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source_if-type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-type": {
          "description": "Interface Type (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "Loopback",
          "enum": [
            "Loopback",
            "GigabitEthernet",
            "TenGigE",
            "FortyGigE",
            "HundredGigE",
            "FiftyGigE",
            "TwoHundredGigE",
            "Bundle-Ether",
            "FourHundredGigE",
            "TwentyFiveGigE"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source_if-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-id": {
          "description": "Interface Id (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:if-type": {
          "description": "Interface Type (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "Loopback",
          "enum": [
            "Loopback",
            "GigabitEthernet",
            "TenGigE",
            "FortyGigE",
            "HundredGigE",
            "FiftyGigE",
            "TwoHundredGigE",
            "Bundle-Ether",
            "FourHundredGigE",
            "TwentyFiveGigE"
          ]
        },
        "cisco-flat-L3vpn-fp:if-id": {
          "description": "Interface Id (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_update-source": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:update-source": {
          "description": "Source of routing updates (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "if-type": {
              "description": "Interface Type (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "Loopback",
              "enum": [
                "Loopback",
                "GigabitEthernet",
                "TenGigE",
                "FortyGigE",
                "HundredGigE",
                "FiftyGigE",
                "TwoHundredGigE",
                "Bundle-Ether",
                "FourHundredGigE",
                "TwentyFiveGigE"
              ]
            },
            "if-id": {
              "description": "Interface Id (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_remote-as-ipv6": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:remote-as-ipv6": {
          "description": "Neighbor IPv6 Remote AS (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "union"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_remote-as-ipv4": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:remote-as-ipv4": {
          "description": "Neighbor IPv4 Remote AS (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "union"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_neighbor-ipv6": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:neighbor-ipv6": {
          "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp_neighbor-ipv4": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:neighbor-ipv4": {
          "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:neighbor-ipv4": {
          "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:neighbor-ipv6": {
          "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:remote-as-ipv4": {
          "description": "Neighbor IPv4 Remote AS (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "union"
        },
        "cisco-flat-L3vpn-fp:remote-as-ipv6": {
          "description": "Neighbor IPv6 Remote AS (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "union"
        },
        "cisco-flat-L3vpn-fp:update-source": {
          "description": "Source of routing updates (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "if-type": {
              "description": "Interface Type (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "Loopback",
              "enum": [
                "Loopback",
                "GigabitEthernet",
                "TenGigE",
                "FortyGigE",
                "HundredGigE",
                "FiftyGigE",
                "TwoHundredGigE",
                "Bundle-Ether",
                "FourHundredGigE",
                "TwentyFiveGigE"
              ]
            },
            "if-id": {
              "description": "Interface Id (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot_e-bgp": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:e-bgp": {
          "description": "eBGP Routing (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "neighbor-ipv4": {
              "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "neighbor-ipv6": {
              "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "remote-as-ipv4": {
              "description": "Neighbor IPv4 Remote AS (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "union"
            },
            "remote-as-ipv6": {
              "description": "Neighbor IPv6 Remote AS (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "union"
            },
            "update-source": {
              "description": "Source of routing updates (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "if-type": {
                  "description": "Interface Type (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "Loopback",
                  "enum": [
                    "Loopback",
                    "GigabitEthernet",
                    "TenGigE",
                    "FortyGigE",
                    "HundredGigE",
                    "FiftyGigE",
                    "TwoHundredGigE",
                    "Bundle-Ether",
                    "FourHundredGigE",
                    "TwentyFiveGigE"
                  ]
                },
                "if-id": {
                  "description": "Interface Id (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:e-bgp": {
          "description": "eBGP Routing (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "neighbor-ipv4": {
              "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "neighbor-ipv6": {
              "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "remote-as-ipv4": {
              "description": "Neighbor IPv4 Remote AS (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "union"
            },
            "remote-as-ipv6": {
              "description": "Neighbor IPv6 Remote AS (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "union"
            },
            "update-source": {
              "description": "Source of routing updates (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "if-type": {
                  "description": "Interface Type (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "enumeration",
                  "default": "Loopback",
                  "enum": [
                    "Loopback",
                    "GigabitEthernet",
                    "TenGigE",
                    "FortyGigE",
                    "HundredGigE",
                    "FiftyGigE",
                    "TwoHundredGigE",
                    "Bundle-Ether",
                    "FourHundredGigE",
                    "TwentyFiveGigE"
                  ]
                },
                "if-id": {
                  "description": "Interface Id (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_ce-pe-prot": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ce-pe-prot": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "e-bgp": {
              "description": "eBGP Routing (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "neighbor-ipv4": {
                  "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "neighbor-ipv6": {
                  "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "remote-as-ipv4": {
                  "description": "Neighbor IPv4 Remote AS (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "union"
                },
                "remote-as-ipv6": {
                  "description": "Neighbor IPv6 Remote AS (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "union"
                },
                "update-source": {
                  "description": "Source of routing updates (presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "true"
                  },
                  "properties": {
                    "if-type": {
                      "description": "Interface Type (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "Loopback",
                      "enum": [
                        "Loopback",
                        "GigabitEthernet",
                        "TenGigE",
                        "FortyGigE",
                        "HundredGigE",
                        "FiftyGigE",
                        "TwoHundredGigE",
                        "Bundle-Ether",
                        "FourHundredGigE",
                        "TwentyFiveGigE"
                      ]
                    },
                    "if-id": {
                      "description": "Interface Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_as-no": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:as-no": {
          "description": "Autonomous Number (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "union"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action_redeploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:message": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action_redeploy-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action-post": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_action": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:action": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name_access-pe": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:access-pe": {
          "description": "PE device (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_endpoint_endpoint-endpoint-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:endpoint": {
          "type": "array",
          "description": "L3VPN End-point (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "endpoint-name": {
                "description": "Endpoint name (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "access-pe": {
                "description": "PE device (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "custom-template": {
                "type": "array",
                "description": "Custom templates to apply when device is ready (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template to apply (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template one time (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "iteration": {
                      "type": "array",
                      "description": "Apply custom template multiple times with iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "description": "<1-65535>;;Iteration number (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template in iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "if-type": {
                "description": "Interface Type (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "Loopback",
                "enum": [
                  "Loopback",
                  "BVI",
                  "GigabitEthernet",
                  "TenGigE",
                  "FortyGigE",
                  "HundredGigE",
                  "FiftyGigE",
                  "TwoHundredGigE",
                  "Bundle-Ether",
                  "FourHundredGigE",
                  "TwentyFiveGigE"
                ]
              },
              "if-id": {
                "description": "Interface Id (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "mtu": {
                "description": "<64-65535> - Set the MTU on an interface (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint16"
              },
              "pe-ip-addr": {
                "description": "<A.B.C.D/prefix> - PE IPv4 Address (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "pe-ipv6-addr": {
                "description": "<X:X::X/length> - PE IPv6 Address (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "as-no": {
                "description": "Autonomous Number (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "union"
              },
              "vlan-id": {
                "description": "<1-4000> - VLAN Id (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "int32"
              },
              "ce-pe-prot": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "e-bgp": {
                    "description": "eBGP Routing (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "neighbor-ipv4": {
                        "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "neighbor-ipv6": {
                        "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "remote-as-ipv4": {
                        "description": "Neighbor IPv4 Remote AS (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "union"
                      },
                      "remote-as-ipv6": {
                        "description": "Neighbor IPv6 Remote AS (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "union"
                      },
                      "update-source": {
                        "description": "Source of routing updates (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                          "if-type": {
                            "description": "Interface Type (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "Loopback",
                            "enum": [
                              "Loopback",
                              "GigabitEthernet",
                              "TenGigE",
                              "FortyGigE",
                              "HundredGigE",
                              "FiftyGigE",
                              "TwoHundredGigE",
                              "Bundle-Ether",
                              "FourHundredGigE",
                              "TwentyFiveGigE"
                            ]
                          },
                          "if-id": {
                            "description": "Interface Id (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "vrf": {
                "description": "VRF Definition (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "vrf-definition": {
                    "description": "VRF Name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "route-distinguisher": {
                    "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "vpn-id": {
                    "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "address-family": {
                    "type": "array",
                    "description": "Address Family (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "address-family": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "ipv4",
                          "enum": [
                            "ipv4",
                            "ipv6"
                          ]
                        },
                        "redistribute-connected": {
                          "description": "Redistribute Connected (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "[null]"
                        },
                        "metric": {
                          "description": "Default metric (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "vpn-target": {
                          "type": "array",
                          "description": "Route Targets (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "rt-type": {
                                "description": "Route-Target Type (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "import",
                                "enum": [
                                  "import",
                                  "export",
                                  "both"
                                ]
                              },
                              "rt-value": {
                                "description": "Route-Target Value (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "sr-te": {
                "description": "Segment Routing Association (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "route-policy": {
                    "description": "Route policy definition (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  }
                }
              },
              "l2-attachment-circuit": {
                "type": "array",
                "description": "L2 Attachment Ciruit (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "L2 AC name (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "if-type": {
                      "description": "Interface Type (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "GigabitEthernet",
                      "enum": [
                        "GigabitEthernet",
                        "TenGigE",
                        "FortyGigE",
                        "HundredGigE",
                        "FiftyGigE",
                        "TwoHundredGigE",
                        "Bundle-Ether",
                        "FourHundredGigE",
                        "TwentyFiveGigE"
                      ]
                    },
                    "if-id": {
                      "description": "Interface Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "vlan-id": {
                      "description": "<1-4000> - VLAN Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "int32"
                    },
                    "rewrite": {
                      "description": "Tag Rewrite (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "ingress": {
                          "description": "Set the tag rewriting policy for this EFP (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "pop": {
                              "description": "Remove one or more tags (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "1",
                              "enum": [
                                "1",
                                "2"
                              ]
                            },
                            "dot1q": {
                              "description": "<1-4094> - Push a Dot1Q tag (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint16"
                            },
                            "mode": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "symmetric",
                              "enum": [
                                "symmetric"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "action": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                }
              },
              "redeploy-flag": {
                "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified_services_services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified_services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified_lsa-services_lsa-services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified_lsa-services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified_devices_devices-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified_devices": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_directly-modified": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:directly-modified": {
          "description": "Devices and other services that this service has explicitly modified. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "devices": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "leafref"
              }
            },
            "services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_device-list_device-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_device-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_deep-check-sync-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-service": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-id": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_deep-check-sync-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml",
            "boolean"
          ]
        },
        "cisco-flat-L3vpn-fp:suppress-positive-result": {
          "description": "Use this additional parameter to only return services that\nfailed to sync. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "Value of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Name of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_variable_variable-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:variable": {
          "type": "array",
          "description": "Variables to bind when applying template one time (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "value": {
                "description": "Value of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Name of template to apply (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "Value of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "Name of template variable (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_variable_variable-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:variable": {
          "type": "array",
          "description": "Variables to bind when applying template in iteration (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "value": {
                "description": "Value of template variable (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number_number": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:number": {
          "description": "<1-65535>;;Iteration number (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name_iteration_iteration-number": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:iteration": {
          "type": "array",
          "description": "Apply custom template multiple times with iteration (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "description": "<1-65535>;;Iteration number (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint16"
              },
              "variable": {
                "type": "array",
                "description": "Variables to bind when applying template in iteration (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "value": {
                      "description": "Value of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_custom-template_custom-template-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:custom-template": {
          "type": "array",
          "description": "Custom templates to apply when device is ready (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template to apply (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "variable": {
                "type": "array",
                "description": "Variables to bind when applying template one time (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "value": {
                      "description": "Value of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "iteration": {
                "type": "array",
                "description": "Apply custom template multiple times with iteration (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "description": "<1-65535>;;Iteration number (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template in iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_status": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "waiting",
          "enum": [
            "waiting",
            "executing",
            "blocking",
            "blocked",
            "failed",
            "admin-cleared",
            "commit-queue-failed"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_no-of-impacted-services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:no-of-impacted-services": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:id": {
          "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_time": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:time": {
          "description": "The time when the failure occurred. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_error": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:error": {
          "description": "The error returned by the device. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_config-data": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:config-data": {
          "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:failed-device": {
          "type": "array",
          "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "time": {
                "description": "The time when the failure occurred. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "config-data": {
                "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "error": {
                "description": "The error returned by the device. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_failed-device": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:failed-device": {
          "type": "array",
          "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "time": {
                "description": "The time when the failure occurred. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "config-data": {
                "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "error": {
                "description": "The error returned by the device. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_delete-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_delete-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_cleared-by-admin": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:cleared-by-admin": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_admin-clear-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id_admin-clear-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item_queue-item-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:queue-item": {
          "type": "array",
          "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint64"
              },
              "status": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "waiting",
                "enum": [
                  "waiting",
                  "executing",
                  "blocking",
                  "blocked",
                  "failed",
                  "admin-cleared",
                  "commit-queue-failed"
                ]
              },
              "cleared-by-admin": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "no-of-impacted-services": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "failed-device": {
                "type": "array",
                "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "time": {
                      "description": "The time when the failure occurred. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "config-data": {
                      "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "error": {
                      "description": "The error returned by the device. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_queue-item": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:queue-item": {
          "type": "array",
          "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint64"
              },
              "status": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "waiting",
                "enum": [
                  "waiting",
                  "executing",
                  "blocking",
                  "blocked",
                  "failed",
                  "admin-cleared",
                  "commit-queue-failed"
                ]
              },
              "cleared-by-admin": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "no-of-impacted-services": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "failed-device": {
                "type": "array",
                "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "time": {
                      "description": "The time when the failure occurred. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "config-data": {
                      "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "error": {
                      "description": "The error returned by the device. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_clear-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue_clear-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_commit-queue": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "queue-item": {
              "type": "array",
              "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "status": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "waiting",
                    "enum": [
                      "waiting",
                      "executing",
                      "blocking",
                      "blocked",
                      "failed",
                      "admin-cleared",
                      "commit-queue-failed"
                    ]
                  },
                  "cleared-by-admin": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "no-of-impacted-services": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "failed-device": {
                    "type": "array",
                    "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "time": {
                          "description": "The time when the failure occurred. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "config-data": {
                          "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "error": {
                          "description": "The error returned by the device. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_check-sync-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:in-sync": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_check-sync-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml",
            "native",
            "boolean"
          ]
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:suppress-positive-result": {
          "description": "Use this additional parameter to only return services that\nfailed to sync. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_self-test-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:message": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_self-test-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_redeploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:message": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_redeploy-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_get-modifications-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:message": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action_get-modifications-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:endpoint": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        },
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:endpoint": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        },
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn_flat-L3vpn-name_action": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:action": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
          }
        }
      }
    },
    "flat-L3vpn": {
      "type": "object",
      "properties": {
        "modified": {
          "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "devices": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "leafref"
              }
            },
            "services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        },
        "directly-modified": {
          "description": "Devices and other services that this service has explicitly modified. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "devices": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "leafref"
              }
            },
            "services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        },
        "device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        },
        "used-by-customer-service": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        },
        "commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "queue-item": {
              "type": "array",
              "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "status": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "waiting",
                    "enum": [
                      "waiting",
                      "executing",
                      "blocking",
                      "blocked",
                      "failed",
                      "admin-cleared",
                      "commit-queue-failed"
                    ]
                  },
                  "cleared-by-admin": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "no-of-impacted-services": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "failed-device": {
                    "type": "array",
                    "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "time": {
                          "description": "The time when the failure occurred. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "config-data": {
                          "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "error": {
                          "description": "The error returned by the device. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "diff-set": {
              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "forward-diff-set": {
              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "device-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "ned-id-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "property-list": {
              "description": "Fastmap service instance data used by the service implementation. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "property": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "re-deploy-counter": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "int32"
            },
            "latest-commit-params": {
              "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "latest-u-info": {
              "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            }
          }
        },
        "log": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "log-entry": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "when": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "description": "Indicates this log entry's type. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "level": {
                    "description": "Indicates this log entry's log level. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "all",
                    "enum": [
                      "all",
                      "trace",
                      "debug",
                      "info",
                      "warn",
                      "error"
                    ]
                  },
                  "message": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "name": {
          "description": "Service Name for L3VPN (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "custom-template": {
          "type": "array",
          "description": "Custom templates to apply when device is ready (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of template to apply (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "variable": {
                "type": "array",
                "description": "Variables to bind when applying template one time (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "value": {
                      "description": "Value of template variable (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "iteration": {
                "type": "array",
                "description": "Apply custom template multiple times with iteration (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "description": "<1-65535>;;Iteration number (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template in iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "endpoint": {
          "type": "array",
          "description": "L3VPN End-point (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "endpoint-name": {
                "description": "Endpoint name (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "access-pe": {
                "description": "PE device (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "custom-template": {
                "type": "array",
                "description": "Custom templates to apply when device is ready (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template to apply (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template one time (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "iteration": {
                      "type": "array",
                      "description": "Apply custom template multiple times with iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "description": "<1-65535>;;Iteration number (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template in iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "if-type": {
                "description": "Interface Type (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "Loopback",
                "enum": [
                  "Loopback",
                  "BVI",
                  "GigabitEthernet",
                  "TenGigE",
                  "FortyGigE",
                  "HundredGigE",
                  "FiftyGigE",
                  "TwoHundredGigE",
                  "Bundle-Ether",
                  "FourHundredGigE",
                  "TwentyFiveGigE"
                ]
              },
              "if-id": {
                "description": "Interface Id (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "mtu": {
                "description": "<64-65535> - Set the MTU on an interface (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint16"
              },
              "pe-ip-addr": {
                "description": "<A.B.C.D/prefix> - PE IPv4 Address (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "pe-ipv6-addr": {
                "description": "<X:X::X/length> - PE IPv6 Address (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "as-no": {
                "description": "Autonomous Number (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "union"
              },
              "vlan-id": {
                "description": "<1-4000> - VLAN Id (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "int32"
              },
              "ce-pe-prot": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "e-bgp": {
                    "description": "eBGP Routing (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "neighbor-ipv4": {
                        "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "neighbor-ipv6": {
                        "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "remote-as-ipv4": {
                        "description": "Neighbor IPv4 Remote AS (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "union"
                      },
                      "remote-as-ipv6": {
                        "description": "Neighbor IPv6 Remote AS (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "union"
                      },
                      "update-source": {
                        "description": "Source of routing updates (presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                          "if-type": {
                            "description": "Interface Type (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "Loopback",
                            "enum": [
                              "Loopback",
                              "GigabitEthernet",
                              "TenGigE",
                              "FortyGigE",
                              "HundredGigE",
                              "FiftyGigE",
                              "TwoHundredGigE",
                              "Bundle-Ether",
                              "FourHundredGigE",
                              "TwentyFiveGigE"
                            ]
                          },
                          "if-id": {
                            "description": "Interface Id (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "vrf": {
                "description": "VRF Definition (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "vrf-definition": {
                    "description": "VRF Name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "route-distinguisher": {
                    "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "vpn-id": {
                    "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "address-family": {
                    "type": "array",
                    "description": "Address Family (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "address-family": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "ipv4",
                          "enum": [
                            "ipv4",
                            "ipv6"
                          ]
                        },
                        "redistribute-connected": {
                          "description": "Redistribute Connected (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "[null]"
                        },
                        "metric": {
                          "description": "Default metric (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "vpn-target": {
                          "type": "array",
                          "description": "Route Targets (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "rt-type": {
                                "description": "Route-Target Type (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "import",
                                "enum": [
                                  "import",
                                  "export",
                                  "both"
                                ]
                              },
                              "rt-value": {
                                "description": "Route-Target Value (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "sr-te": {
                "description": "Segment Routing Association (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "route-policy": {
                    "description": "Route policy definition (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  }
                }
              },
              "l2-attachment-circuit": {
                "type": "array",
                "description": "L2 Attachment Ciruit (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "L2 AC name (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "if-type": {
                      "description": "Interface Type (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "GigabitEthernet",
                      "enum": [
                        "GigabitEthernet",
                        "TenGigE",
                        "FortyGigE",
                        "HundredGigE",
                        "FiftyGigE",
                        "TwoHundredGigE",
                        "Bundle-Ether",
                        "FourHundredGigE",
                        "TwentyFiveGigE"
                      ]
                    },
                    "if-id": {
                      "description": "Interface Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "vlan-id": {
                      "description": "<1-4000> - VLAN Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "int32"
                    },
                    "rewrite": {
                      "description": "Tag Rewrite (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "ingress": {
                          "description": "Set the tag rewriting policy for this EFP (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "pop": {
                              "description": "Remove one or more tags (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "1",
                              "enum": [
                                "1",
                                "2"
                              ]
                            },
                            "dot1q": {
                              "description": "<1-4094> - Push a Dot1Q tag (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint16"
                            },
                            "mode": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "symmetric",
                              "enum": [
                                "symmetric"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "action": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                }
              },
              "redeploy-flag": {
                "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "redeploy-flag": {
          "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "action": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
          }
        }
      },
      "xml": {
        "namespace": "http://cisco.com/ns/nso/fp/examples/cisco-tsdn-flat-L3vpn"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_severity": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:severity": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "INFO",
          "enum": [
            "INFO",
            "WARNING",
            "ERROR",
            "FATAL",
            "NONE"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_recommended-action": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:recommended-action": {
          "description": "Recommended action to recover in case of error (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_context_context-context-name_context-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context-name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_context_context-context-name_context-msg": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context-msg": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_context_context-context-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "context-name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context-msg": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_context": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "context-name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context-msg": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name_code": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:code": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail_status-code-detail-type_status-code-detail-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status-code-detail": {
          "type": "array",
          "description": "Status Codes (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context": {
                "type": "array",
                "description": "(list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "context-name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "context-msg": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "severity": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "INFO",
                "enum": [
                  "INFO",
                  "WARNING",
                  "ERROR",
                  "FATAL",
                  "NONE"
                ]
              },
              "recommended-action": {
                "description": "Recommended action to recover in case of error (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_status-code-detail": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status-code-detail": {
          "type": "array",
          "description": "Status Codes (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context": {
                "type": "array",
                "description": "(list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "context-name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "context-msg": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "severity": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "INFO",
                "enum": [
                  "INFO",
                  "WARNING",
                  "ERROR",
                  "FATAL",
                  "NONE"
                ]
              },
              "recommended-action": {
                "description": "Recommended action to recover in case of error (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_service-location": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-location": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "instance-identifier"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_failed": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:failed": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_error-info_message": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:message": {
          "description": "An explanatory message for the failing plan. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_error-info_log-entry": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log-entry": {
          "description": "Reference to a service log entry with additional information. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "instance-identifier"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_error-info": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:error-info": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "message": {
              "description": "An explanatory message for the failing plan. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "log-entry": {
              "description": "Reference to a service log entry with additional information. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "instance-identifier"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_deleting": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:deleting": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_status-code": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status-code": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_when": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:when": {
          "description": "The time this state was successfully reached or failed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_status": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "not-reached",
          "enum": [
            "not-reached",
            "reached",
            "failed"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_service-reference": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-reference": {
          "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "instance-identifier"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_service-list_service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_service-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_ned-id-list_ned-id-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_ned-id-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_lsa-service-list_lsa-service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_lsa-service-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_forward-diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:forward-diff-set": {
          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:diff-set": {
          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_device-list_device-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private_device-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_private": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "diff-set": {
              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "forward-diff-set": {
              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "device-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of managed devices this state has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "ned-id-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of services this state has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_pre-conditions_delete-trigger-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-trigger-expr": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_pre-conditions_delete-monitor": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-monitor": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_pre-conditions_create-trigger-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-trigger-expr": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_pre-conditions_create-monitor": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-monitor": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_pre-conditions": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:pre-conditions": {
          "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "create-monitor": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "create-trigger-expr": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-monitor": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-trigger-expr": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions_delete-action-result-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-action-result-expr": {
          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions_delete-action-node": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-action-node": {
          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions_delete-action-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-action-name": {
          "description": "The name of the action. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions_create-action-result-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-action-result-expr": {
          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions_create-action-node": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-action-node": {
          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions_create-action-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-action-name": {
          "description": "The name of the action. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-actions": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:post-actions": {
          "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "create-action-node": {
              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "create-action-name": {
              "description": "The name of the action. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "create-action-result-expr": {
              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-action-node": {
              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-action-name": {
              "description": "The name of the action. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-action-result-expr": {
              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_post-action-status": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:post-action-status": {
          "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "not-reached",
          "enum": [
            "not-reached",
            "create-reached",
            "delete-reached",
            "failed"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_get-modifications-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-service": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-id": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_get-modifications-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml"
          ]
        },
        "cisco-flat-L3vpn-fp:reverse": {
          "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_delete-cb": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-cb": {
          "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name_create-cb": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-cb": {
          "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state_state-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:state": {
          "type": "array",
          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status": {
                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "reached",
                  "failed"
                ]
              },
              "when": {
                "description": "The time this state was successfully reached or failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "service-reference": {
                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "instance-identifier"
              },
              "create-cb": {
                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "delete-cb": {
                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "pre-conditions": {
                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-actions": {
                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-action-status": {
                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "create-reached",
                  "delete-reached",
                  "failed"
                ]
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_state": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:state": {
          "type": "array",
          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status": {
                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "reached",
                  "failed"
                ]
              },
              "when": {
                "description": "The time this state was successfully reached or failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "service-reference": {
                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "instance-identifier"
              },
              "create-cb": {
                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "delete-cb": {
                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "pre-conditions": {
                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-actions": {
                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-action-status": {
                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "create-reached",
                  "delete-reached",
                  "failed"
                ]
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_private_property-list_property_property-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_private_property-list_property_property-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_private_property-list_property_property-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_private_property-list_property": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_private_property-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property-list": {
          "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_private": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property-list": {
              "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "property": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_force-back-track-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        },
        "cisco-flat-L3vpn-fp:info": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_force-back-track-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:back-tracking-goal": {
          "description": "Target state for back-track. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_back-track-goal": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:back-track-goal": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name_back-track": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:back-track": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component_component-type_component-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:component": {
          "type": "array",
          "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "state": {
                "type": "array",
                "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "status": {
                      "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "reached",
                        "failed"
                      ]
                    },
                    "when": {
                      "description": "The time this state was successfully reached or failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "service-reference": {
                      "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "instance-identifier"
                    },
                    "create-cb": {
                      "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "delete-cb": {
                      "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "pre-conditions": {
                      "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-actions": {
                      "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-action-status": {
                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "create-reached",
                        "delete-reached",
                        "failed"
                      ]
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "diff-set": {
                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "forward-diff-set": {
                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "device-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ned-id-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of services this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "property-list": {
                    "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "back-track": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "boolean"
              },
              "back-track-goal": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status-code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_component": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:component": {
          "type": "array",
          "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "state": {
                "type": "array",
                "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "status": {
                      "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "reached",
                        "failed"
                      ]
                    },
                    "when": {
                      "description": "The time this state was successfully reached or failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "service-reference": {
                      "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "instance-identifier"
                    },
                    "create-cb": {
                      "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "delete-cb": {
                      "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "pre-conditions": {
                      "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-actions": {
                      "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-action-status": {
                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "create-reached",
                        "delete-reached",
                        "failed"
                      ]
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "diff-set": {
                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "forward-diff-set": {
                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "device-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ned-id-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of services this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "property-list": {
                    "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "back-track": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "boolean"
              },
              "back-track-goal": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status-code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_commit-queue_queue-item_queue-item-id_id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:id": {
          "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_commit-queue_queue-item_queue-item-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:queue-item": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint64"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_commit-queue_queue-item": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:queue-item": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint64"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan_commit-queue": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "queue-item": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_severity": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:severity": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "INFO",
          "enum": [
            "INFO",
            "WARNING",
            "ERROR",
            "FATAL",
            "NONE"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_recommended-action": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:recommended-action": {
          "description": "Recommended action to recover in case of error (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_context_context-context-name_context-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context-name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_context_context-context-name_context-msg": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context-msg": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_context_context-context-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "context-name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context-msg": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_context": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:context": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "context-name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context-msg": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name_code": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:code": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail_status-code-detail-type_status-code-detail-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status-code-detail": {
          "type": "array",
          "description": "Status Codes (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context": {
                "type": "array",
                "description": "(list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "context-name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "context-msg": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "severity": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "INFO",
                "enum": [
                  "INFO",
                  "WARNING",
                  "ERROR",
                  "FATAL",
                  "NONE"
                ]
              },
              "recommended-action": {
                "description": "Recommended action to recover in case of error (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_status-code-detail": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status-code-detail": {
          "type": "array",
          "description": "Status Codes (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "context": {
                "type": "array",
                "description": "(list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "context-name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "context-msg": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "severity": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "INFO",
                "enum": [
                  "INFO",
                  "WARNING",
                  "ERROR",
                  "FATAL",
                  "NONE"
                ]
              },
              "recommended-action": {
                "description": "Recommended action to recover in case of error (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_time": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:time": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_status-code": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status-code": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_when": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:when": {
          "description": "The time this state was successfully reached or failed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_status": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "not-reached",
          "enum": [
            "not-reached",
            "reached",
            "failed"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_service-reference": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-reference": {
          "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "instance-identifier"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_service-list_service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_service-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_ned-id-list_ned-id-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_ned-id-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_lsa-service-list_lsa-service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_lsa-service-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_forward-diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:forward-diff-set": {
          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:diff-set": {
          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_device-list_device-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private_device-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this state has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_private": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "diff-set": {
              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "forward-diff-set": {
              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "device-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of managed devices this state has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "ned-id-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of services this state has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_pre-conditions_delete-trigger-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-trigger-expr": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_pre-conditions_delete-monitor": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-monitor": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_pre-conditions_create-trigger-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-trigger-expr": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_pre-conditions_create-monitor": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-monitor": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_pre-conditions": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:pre-conditions": {
          "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "create-monitor": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "create-trigger-expr": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-monitor": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-trigger-expr": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions_delete-action-result-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-action-result-expr": {
          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions_delete-action-node": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-action-node": {
          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions_delete-action-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-action-name": {
          "description": "The name of the action. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions_create-action-result-expr": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-action-result-expr": {
          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions_create-action-node": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-action-node": {
          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions_create-action-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-action-name": {
          "description": "The name of the action. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-actions": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:post-actions": {
          "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "create-action-node": {
              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "create-action-name": {
              "description": "The name of the action. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "create-action-result-expr": {
              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-action-node": {
              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-action-name": {
              "description": "The name of the action. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "delete-action-result-expr": {
              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_post-action-status": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:post-action-status": {
          "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "not-reached",
          "enum": [
            "not-reached",
            "create-reached",
            "delete-reached",
            "failed"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_get-modifications-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-service": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-id": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_get-modifications-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml"
          ]
        },
        "cisco-flat-L3vpn-fp:reverse": {
          "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_delete-cb": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:delete-cb": {
          "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name_create-cb": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:create-cb": {
          "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state_state-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:state": {
          "type": "array",
          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status": {
                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "reached",
                  "failed"
                ]
              },
              "when": {
                "description": "The time this state was successfully reached or failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "service-reference": {
                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "instance-identifier"
              },
              "create-cb": {
                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "delete-cb": {
                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "pre-conditions": {
                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-actions": {
                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-action-status": {
                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "create-reached",
                  "delete-reached",
                  "failed"
                ]
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_state": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:state": {
          "type": "array",
          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status": {
                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "reached",
                  "failed"
                ]
              },
              "when": {
                "description": "The time this state was successfully reached or failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "service-reference": {
                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "instance-identifier"
              },
              "create-cb": {
                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "delete-cb": {
                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "pre-conditions": {
                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-monitor": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-trigger-expr": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-actions": {
                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "create-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "create-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-node": {
                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-name": {
                    "description": "The name of the action. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "delete-action-result-expr": {
                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              },
              "post-action-status": {
                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "not-reached",
                "enum": [
                  "not-reached",
                  "create-reached",
                  "delete-reached",
                  "failed"
                ]
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this state has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_private_property-list_property_property-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_private_property-list_property_property-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_private_property-list_property_property-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_private_property-list_property": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_private_property-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property-list": {
          "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_private": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property-list": {
              "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "property": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_back-track-goal": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:back-track-goal": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name_back-track": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:back-track": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component_component-type_component-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:component": {
          "type": "array",
          "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "state": {
                "type": "array",
                "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "status": {
                      "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "reached",
                        "failed"
                      ]
                    },
                    "when": {
                      "description": "The time this state was successfully reached or failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "service-reference": {
                      "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "instance-identifier"
                    },
                    "create-cb": {
                      "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "delete-cb": {
                      "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "pre-conditions": {
                      "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-actions": {
                      "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-action-status": {
                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "create-reached",
                        "delete-reached",
                        "failed"
                      ]
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "diff-set": {
                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "forward-diff-set": {
                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "device-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ned-id-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of services this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "property-list": {
                    "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "back-track": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "boolean"
              },
              "back-track-goal": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status-code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time_component": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:component": {
          "type": "array",
          "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "state": {
                "type": "array",
                "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "status": {
                      "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "reached",
                        "failed"
                      ]
                    },
                    "when": {
                      "description": "The time this state was successfully reached or failed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "service-reference": {
                      "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "instance-identifier"
                    },
                    "create-cb": {
                      "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "delete-cb": {
                      "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "pre-conditions": {
                      "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-monitor": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-trigger-expr": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-actions": {
                      "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "create-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "create-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-node": {
                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-name": {
                          "description": "The name of the action. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-action-result-expr": {
                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    },
                    "post-action-status": {
                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "not-reached",
                      "enum": [
                        "not-reached",
                        "create-reached",
                        "delete-reached",
                        "failed"
                      ]
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "diff-set": {
                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "forward-diff-set": {
                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "device-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ned-id-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of services this state has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "property-list": {
                    "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "back-track": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "boolean"
              },
              "back-track-goal": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "status-code": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan_plan-time": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:plan": {
          "type": "array",
          "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "time": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "component": {
                "type": "array",
                "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "type": {
                      "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "state": {
                      "type": "array",
                      "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "identityref"
                          },
                          "status": {
                            "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "not-reached",
                            "enum": [
                              "not-reached",
                              "reached",
                              "failed"
                            ]
                          },
                          "when": {
                            "description": "The time this state was successfully reached or failed. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "service-reference": {
                            "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "instance-identifier"
                          },
                          "create-cb": {
                            "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "delete-cb": {
                            "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "pre-conditions": {
                            "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                              "create-monitor": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "create-trigger-expr": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-monitor": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-trigger-expr": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          },
                          "post-actions": {
                            "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                              "create-action-node": {
                                "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "create-action-name": {
                                "description": "The name of the action. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "create-action-result-expr": {
                                "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-action-node": {
                                "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-action-name": {
                                "description": "The name of the action. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-action-result-expr": {
                                "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          },
                          "post-action-status": {
                            "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "not-reached",
                            "enum": [
                              "not-reached",
                              "create-reached",
                              "delete-reached",
                              "failed"
                            ]
                          },
                          "private": {
                            "description": "Stores NCS service-related internal data. (non-presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "false"
                            },
                            "properties": {
                              "diff-set": {
                                "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "binary"
                              },
                              "forward-diff-set": {
                                "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "binary"
                              },
                              "device-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "string"
                                }
                              },
                              "ned-id-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "string"
                                }
                              },
                              "service-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of services this state has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "instance-identifier"
                                }
                              },
                              "lsa-service-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "instance-identifier"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "property-list": {
                          "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property": {
                              "type": "array",
                              "description": "(list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "value": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "back-track": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "boolean"
                    },
                    "back-track-goal": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "status-code": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history_plan": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:plan": {
          "type": "array",
          "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "time": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "component": {
                "type": "array",
                "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "type": {
                      "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "state": {
                      "type": "array",
                      "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "identityref"
                          },
                          "status": {
                            "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "not-reached",
                            "enum": [
                              "not-reached",
                              "reached",
                              "failed"
                            ]
                          },
                          "when": {
                            "description": "The time this state was successfully reached or failed. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "service-reference": {
                            "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "instance-identifier"
                          },
                          "create-cb": {
                            "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "delete-cb": {
                            "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "pre-conditions": {
                            "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                              "create-monitor": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "create-trigger-expr": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-monitor": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-trigger-expr": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          },
                          "post-actions": {
                            "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                              "create-action-node": {
                                "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "create-action-name": {
                                "description": "The name of the action. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "create-action-result-expr": {
                                "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-action-node": {
                                "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-action-name": {
                                "description": "The name of the action. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-action-result-expr": {
                                "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          },
                          "post-action-status": {
                            "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "not-reached",
                            "enum": [
                              "not-reached",
                              "create-reached",
                              "delete-reached",
                              "failed"
                            ]
                          },
                          "private": {
                            "description": "Stores NCS service-related internal data. (non-presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "false"
                            },
                            "properties": {
                              "diff-set": {
                                "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "binary"
                              },
                              "forward-diff-set": {
                                "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "binary"
                              },
                              "device-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "string"
                                }
                              },
                              "ned-id-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "string"
                                }
                              },
                              "service-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of services this state has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "instance-identifier"
                                }
                              },
                              "lsa-service-list": {
                                "type": "array",
                                "x-yang": {
                                  "type": "leaf-list"
                                },
                                "items": {
                                  "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                  "type": "string",
                                  "format": "instance-identifier"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "property-list": {
                          "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property": {
                              "type": "array",
                              "description": "(list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "value": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "back-track": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "boolean"
                    },
                    "back-track-goal": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "identityref"
                    },
                    "status-code": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan-history": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:plan-history": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "plan": {
              "type": "array",
              "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "time": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "component": {
                    "type": "array",
                    "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "state": {
                          "type": "array",
                          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status": {
                                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "reached",
                                  "failed"
                                ]
                              },
                              "when": {
                                "description": "The time this state was successfully reached or failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "service-reference": {
                                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "instance-identifier"
                              },
                              "create-cb": {
                                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-cb": {
                                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "pre-conditions": {
                                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-actions": {
                                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-action-status": {
                                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "create-reached",
                                  "delete-reached",
                                  "failed"
                                ]
                              },
                              "private": {
                                "description": "Stores NCS service-related internal data. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "forward-diff-set": {
                                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "device-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "ned-id-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of services this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "private": {
                          "description": "Stores NCS service-related internal data. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property-list": {
                              "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "value": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "back-track": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "boolean"
                        },
                        "back-track-goal": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "status-code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "status-code-detail": {
              "type": "array",
              "description": "Status Codes (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "code": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "context": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "context-name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context-msg": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "severity": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "INFO",
                    "enum": [
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "FATAL",
                      "NONE"
                    ]
                  },
                  "recommended-action": {
                    "description": "Recommended action to recover in case of error (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_plan": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:plan": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "component": {
              "type": "array",
              "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "state": {
                    "type": "array",
                    "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "status": {
                          "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "not-reached",
                          "enum": [
                            "not-reached",
                            "reached",
                            "failed"
                          ]
                        },
                        "when": {
                          "description": "The time this state was successfully reached or failed. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "service-reference": {
                          "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "instance-identifier"
                        },
                        "create-cb": {
                          "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-cb": {
                          "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "pre-conditions": {
                          "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "create-monitor": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "create-trigger-expr": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-monitor": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-trigger-expr": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        },
                        "post-actions": {
                          "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "create-action-node": {
                              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "create-action-name": {
                              "description": "The name of the action. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "create-action-result-expr": {
                              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-action-node": {
                              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-action-name": {
                              "description": "The name of the action. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-action-result-expr": {
                              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        },
                        "post-action-status": {
                          "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "not-reached",
                          "enum": [
                            "not-reached",
                            "create-reached",
                            "delete-reached",
                            "failed"
                          ]
                        },
                        "private": {
                          "description": "Stores NCS service-related internal data. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "diff-set": {
                              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "binary"
                            },
                            "forward-diff-set": {
                              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "binary"
                            },
                            "device-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "ned-id-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "service-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of services this state has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "instance-identifier"
                              }
                            },
                            "lsa-service-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "instance-identifier"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "private": {
                    "description": "Stores NCS service-related internal data. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property-list": {
                        "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "property": {
                            "type": "array",
                            "description": "(list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "value": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "back-track": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "back-track-goal": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "status-code": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "commit-queue": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "queue-item": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint64"
                      }
                    }
                  }
                }
              }
            },
            "failed": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "error-info": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "message": {
                  "description": "An explanatory message for the failing plan. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "log-entry": {
                  "description": "Reference to a service log entry with additional information. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "instance-identifier"
                }
              }
            },
            "deleting": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "service-location": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "instance-identifier"
            },
            "status-code-detail": {
              "type": "array",
              "description": "Status Codes (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "code": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "context": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "context-name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context-msg": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "severity": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "INFO",
                    "enum": [
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "FATAL",
                      "NONE"
                    ]
                  },
                  "recommended-action": {
                    "description": "Recommended action to recover in case of error (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan_flat-L3vpn-plan-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "flat-L3vpn-plan": {
      "type": "object",
      "properties": {
        "name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "plan": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "component": {
              "type": "array",
              "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "state": {
                    "type": "array",
                    "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "status": {
                          "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "not-reached",
                          "enum": [
                            "not-reached",
                            "reached",
                            "failed"
                          ]
                        },
                        "when": {
                          "description": "The time this state was successfully reached or failed. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "service-reference": {
                          "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "instance-identifier"
                        },
                        "create-cb": {
                          "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "delete-cb": {
                          "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "pre-conditions": {
                          "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "create-monitor": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "create-trigger-expr": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-monitor": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-trigger-expr": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        },
                        "post-actions": {
                          "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "create-action-node": {
                              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "create-action-name": {
                              "description": "The name of the action. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "create-action-result-expr": {
                              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-action-node": {
                              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-action-name": {
                              "description": "The name of the action. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "delete-action-result-expr": {
                              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        },
                        "post-action-status": {
                          "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "not-reached",
                          "enum": [
                            "not-reached",
                            "create-reached",
                            "delete-reached",
                            "failed"
                          ]
                        },
                        "private": {
                          "description": "Stores NCS service-related internal data. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "diff-set": {
                              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "binary"
                            },
                            "forward-diff-set": {
                              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "binary"
                            },
                            "device-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "ned-id-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            },
                            "service-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of services this state has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "instance-identifier"
                              }
                            },
                            "lsa-service-list": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                "type": "string",
                                "format": "instance-identifier"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "private": {
                    "description": "Stores NCS service-related internal data. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property-list": {
                        "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "property": {
                            "type": "array",
                            "description": "(list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "value": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "back-track": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "back-track-goal": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "status-code": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "commit-queue": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "queue-item": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint64"
                      }
                    }
                  }
                }
              }
            },
            "failed": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "error-info": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "message": {
                  "description": "An explanatory message for the failing plan. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "log-entry": {
                  "description": "Reference to a service log entry with additional information. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "instance-identifier"
                }
              }
            },
            "deleting": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "service-location": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "instance-identifier"
            },
            "status-code-detail": {
              "type": "array",
              "description": "Status Codes (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "code": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "context": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "context-name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context-msg": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "severity": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "INFO",
                    "enum": [
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "FATAL",
                      "NONE"
                    ]
                  },
                  "recommended-action": {
                    "description": "Recommended action to recover in case of error (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "plan-history": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "plan": {
              "type": "array",
              "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "time": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "component": {
                    "type": "array",
                    "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "state": {
                          "type": "array",
                          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status": {
                                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "reached",
                                  "failed"
                                ]
                              },
                              "when": {
                                "description": "The time this state was successfully reached or failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "service-reference": {
                                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "instance-identifier"
                              },
                              "create-cb": {
                                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-cb": {
                                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "pre-conditions": {
                                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-actions": {
                                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-action-status": {
                                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "create-reached",
                                  "delete-reached",
                                  "failed"
                                ]
                              },
                              "private": {
                                "description": "Stores NCS service-related internal data. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "forward-diff-set": {
                                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "device-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "ned-id-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of services this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "private": {
                          "description": "Stores NCS service-related internal data. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property-list": {
                              "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "value": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "back-track": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "boolean"
                        },
                        "back-track-goal": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "status-code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "status-code-detail": {
              "type": "array",
              "description": "Status Codes (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "code": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "context": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "context-name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context-msg": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "severity": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "INFO",
                    "enum": [
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "FATAL",
                      "NONE"
                    ]
                  },
                  "recommended-action": {
                    "description": "Recommended action to recover in case of error (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      },
      "xml": {
        "namespace": "http://cisco.com/ns/nso/fp/examples/cisco-tsdn-flat-L3vpn"
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-plan": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:flat-L3vpn-plan": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "plan": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "component": {
                    "type": "array",
                    "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "state": {
                          "type": "array",
                          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status": {
                                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "reached",
                                  "failed"
                                ]
                              },
                              "when": {
                                "description": "The time this state was successfully reached or failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "service-reference": {
                                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "instance-identifier"
                              },
                              "create-cb": {
                                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-cb": {
                                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "pre-conditions": {
                                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-actions": {
                                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-action-status": {
                                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "create-reached",
                                  "delete-reached",
                                  "failed"
                                ]
                              },
                              "private": {
                                "description": "Stores NCS service-related internal data. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "forward-diff-set": {
                                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "device-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "ned-id-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of services this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "private": {
                          "description": "Stores NCS service-related internal data. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property-list": {
                              "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "value": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "back-track": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "boolean"
                        },
                        "back-track-goal": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "status-code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "commit-queue": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "queue-item": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            }
                          }
                        }
                      }
                    }
                  },
                  "failed": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "error-info": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "message": {
                        "description": "An explanatory message for the failing plan. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "log-entry": {
                        "description": "Reference to a service log entry with additional information. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  },
                  "deleting": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "service-location": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "status-code-detail": {
                    "type": "array",
                    "description": "Status Codes (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "context-name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "context-msg": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "severity": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "INFO",
                          "enum": [
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "FATAL",
                            "NONE"
                          ]
                        },
                        "recommended-action": {
                          "description": "Recommended action to recover in case of error (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "plan-history": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "plan": {
                    "type": "array",
                    "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "component": {
                          "type": "array",
                          "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "type": {
                                "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "state": {
                                "type": "array",
                                "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "identityref"
                                    },
                                    "status": {
                                      "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "reached",
                                        "failed"
                                      ]
                                    },
                                    "when": {
                                      "description": "The time this state was successfully reached or failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "service-reference": {
                                      "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "instance-identifier"
                                    },
                                    "create-cb": {
                                      "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "delete-cb": {
                                      "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "pre-conditions": {
                                      "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    },
                                    "post-actions": {
                                      "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-action-node": {
                                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-node": {
                                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    },
                                    "post-action-status": {
                                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "create-reached",
                                        "delete-reached",
                                        "failed"
                                      ]
                                    },
                                    "private": {
                                      "description": "Stores NCS service-related internal data. (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "diff-set": {
                                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "forward-diff-set": {
                                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "device-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "ned-id-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of services this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "private": {
                                "description": "Stores NCS service-related internal data. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "property-list": {
                                    "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "false"
                                    },
                                    "properties": {
                                      "property": {
                                        "type": "array",
                                        "description": "(list)",
                                        "x-yang": {
                                          "type": "list"
                                        },
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "value": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "back-track": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "back-track-goal": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status-code": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "status-code-detail": {
                    "type": "array",
                    "description": "Status Codes (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "context-name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "context-msg": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "severity": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "INFO",
                          "enum": [
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "FATAL",
                            "NONE"
                          ]
                        },
                        "recommended-action": {
                          "description": "Recommended action to recover in case of error (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions_cleanup-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:success": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        },
        "cisco-flat-L3vpn-fp:detail": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions_cleanup-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:device": {
          "description": "Clean up L3vpn service configuration for a given device (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:device": {
          "description": "Clean up L3vpn service configuration for a given device (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        },
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_flat-L3vpn-actions": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:flat-L3vpn-actions": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_used-by-customer-service_used-by-customer-service-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:used-by-customer-service": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_used-by-customer-service": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:used-by-customer-service": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_un-deploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "Display all changes in the whole data model. The\nchanges will be displayed in NETCONF XML edit-config format,\ni.e., the edit-config that would be applied locally (at NCS)\nto get a config that is equal to that of the managed device. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-node": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "id": {
              "description": "This leaf is returned if 'commit-queue/async' or\n'commit-queue/sync' was given in the input parameters. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "status": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "async",
              "enum": [
                "async",
                "completed",
                "timeout",
                "deleted",
                "failed"
              ]
            },
            "failed-device": {
              "type": "array",
              "description": "The devices which failed for this queue item. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "reason": {
                    "description": "The error for this failing device. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_un-deploy-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:dry-run": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "outformat": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "cli",
              "enum": [
                "cli",
                "xml",
                "native"
              ]
            }
          }
        },
        "cisco-flat-L3vpn-fp:no-revision-drop": {
          "description": "This flags means that NCS will not run its data model revision\nalgorithm, which requires all participating managed devices\nto have all parts of the data models for all data contained\nin this transaction. Thus, this flag forces NCS to never\nsilently drop any data set operations towards a device. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-overwrite": {
          "description": "This flags means that NCS will check that the data that\nshould be modified has not changed on the device compared\nto NCS's view of the data. This is a fine-granular sync check;\nNCS verifies that NCS and the device is in sync regarding\nthe data that will be modified. If they are not in sync,\nthe transaction is aborted. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "tag": {
              "description": "User defined opaque tag.\nThe tag is present in all notifications and events\nsent referencing the specific queue item. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "async": {
              "description": "Commit the transaction data asynchronously to the commit queue.\nThis flag is useful when some device is non-operational or\nhas data waiting in the commit queue.\n\nThe operation returns successfully if the transaction data has\nbeen successfully placed in the queue. The leaf\n'commit-queue/id' is set as the queue identifier and the\nleaf 'commit-queue/status' is set to 'async' in the result. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "block-others": {
              "description": "The resulting queue item will block subsequent queue items,\nwhich use any of the devices in this queue item, from\nbeing queued. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "lock": {
              "description": "Place a lock on the resulting queue item. The queue\nitem will not be processed until it has been unlocked,\nsee the actions 'unlock' and 'lock' in\n/devices/commit-queue/queue-item'.\n\nNo following queue items, using the same devices, will be\nallowed to execute as long as the lock is in place. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "atomic": {
              "description": "Sets the atomic behaviour of the resulting queue item.\nIf this is set to false, the devices contained in the\nresulting queue item can start executing if the same devices\nin other non-atomic queue items ahead of it in the queue are\ncompleted. If set to true, the atomic integrity of the\nqueue item is preserved. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "error-option": {
              "description": "The error option to use. Depending on the selected error option\nNCS will store the reverse of the original transaction intent\nto be able to undo the transaction changes and get back to the\nprevious state. This data is stored in the\n/devices/commit-queue/completed tree from where it can\nbe viewed and invoked with the rollback action. When invoked\nthe data will be removed. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "continue-on-error",
              "enum": [
                "continue-on-error",
                "rollback-on-error",
                "stop-on-error"
              ]
            },
            "unlock": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "id": {
                  "description": "Unique id identifying a queue item. If locked, this\nitem will be unlocked in the commit phase. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint64"
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling of the LSA nodes as such. This flag tells\nNCS to propagate applicable commit flags and actions\nto the LSA nodes without applying them on the upper\nNCS node itself. The commit flags affected are\n'dry-run', 'no-networking', 'no-out-of-sync-check',\n'no-overwrite' and 'no-revision-drop'. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:wait-device": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Take device locks before entering transaction critical section. The\ndevice locks here should be understood to be internal locks in NSO, so\nthe device itself is not locked. If the device locks are held by\nsomeone else, wait for them to become available. The timeout applied\nin this case is the same as used to wait for the transaction lock.\n\nNormally the device locks are taken automatically inside the\ntransaction critical section, because in a typical service transaction\nwe do not know the affected devices before the service code is\nexecuted. When taking the device locks inside transaction critical\nsection, it is not possible to wait for lock, so in case the lock is\nnot available the transaction is aborted.\n\nThis parameter allows to specify the devices expected to be\naffected by the transaction so they can be pre-locked before entering\nthe transaction critical section. This allows to wait for device\nlocks. This is useful in cases when other actions holding the device\nlock may be on-going at the same time and the desired behaviour is\nto wait for these actions to complete rather than abort the\ntransaction. Examples of such actions are: sync-from,\npartial-sync-from, check-sync, sync-to, compare-config.\n\nSimilarly, when used with a commit through commit queue, this\nparameter allows to wait for queue items with block-others flag. For\nexample, a queue item with block-others flag is created by actions\nsuch as sync-from and partial-sync-from, and when a commit queue item\nfails with error-option being rollback-on-error or stop-on-error.\n\nIf the transaction involves other devices than specified by this\nparameter, then the lock still needs to be taken on these additional\ndevices, which is done inside transaction critical section and may\nfail if the device lock for the additional devices is already held\nby someone else. (leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        },
        "cisco-flat-L3vpn-fp:ignore-refcount": {
          "description": "Unconditionally delete the device data created by the\nservice, regardless of the refcount. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_touch-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_touch-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_reactive-re-deploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "id": {
              "description": "This leaf is returned if 'commit-queue/async' or\n'commit-queue/sync' was given in the input parameters. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "status": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "async",
              "enum": [
                "async",
                "completed",
                "timeout",
                "deleted",
                "failed"
              ]
            },
            "failed-device": {
              "type": "array",
              "description": "The devices which failed for this queue item. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "reason": {
                    "description": "The error for this failing device. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_reactive-re-deploy-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:sync": {
          "description": "By default the action is asynchronous, i.e. it does not wait for\nthe service to be re-deployed. Use this leaf to get synchronous\nbehaviour and block until the service re-deploy transaction is\ncommitted. It also means that the action will possibly return\na commit result, such as commit queue id if any, or an\nerror if the transaction failed. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_re-deploy-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "Display all changes in the whole data model. The\nchanges will be displayed in NETCONF XML edit-config format,\ni.e., the edit-config that would be applied locally (at NCS)\nto get a config that is equal to that of the managed device. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-node": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "id": {
              "description": "This leaf is returned if 'commit-queue/async' or\n'commit-queue/sync' was given in the input parameters. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "leafref"
            },
            "status": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "async",
              "enum": [
                "async",
                "completed",
                "timeout",
                "deleted",
                "failed"
              ]
            },
            "failed-device": {
              "type": "array",
              "description": "The devices which failed for this queue item. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "reason": {
                    "description": "The error for this failing device. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_re-deploy-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:dry-run": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "outformat": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "cli",
              "enum": [
                "cli",
                "xml",
                "native"
              ]
            }
          }
        },
        "cisco-flat-L3vpn-fp:no-revision-drop": {
          "description": "This flags means that NCS will not run its data model revision\nalgorithm, which requires all participating managed devices\nto have all parts of the data models for all data contained\nin this transaction. Thus, this flag forces NCS to never\nsilently drop any data set operations towards a device. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-networking": {
          "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:no-overwrite": {
          "description": "This flags means that NCS will check that the data that\nshould be modified has not changed on the device compared\nto NCS's view of the data. This is a fine-granular sync check;\nNCS verifies that NCS and the device is in sync regarding\nthe data that will be modified. If they are not in sync,\nthe transaction is aborted. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "tag": {
              "description": "User defined opaque tag.\nThe tag is present in all notifications and events\nsent referencing the specific queue item. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "async": {
              "description": "Commit the transaction data asynchronously to the commit queue.\nThis flag is useful when some device is non-operational or\nhas data waiting in the commit queue.\n\nThe operation returns successfully if the transaction data has\nbeen successfully placed in the queue. The leaf\n'commit-queue/id' is set as the queue identifier and the\nleaf 'commit-queue/status' is set to 'async' in the result. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "block-others": {
              "description": "The resulting queue item will block subsequent queue items,\nwhich use any of the devices in this queue item, from\nbeing queued. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "lock": {
              "description": "Place a lock on the resulting queue item. The queue\nitem will not be processed until it has been unlocked,\nsee the actions 'unlock' and 'lock' in\n/devices/commit-queue/queue-item'.\n\nNo following queue items, using the same devices, will be\nallowed to execute as long as the lock is in place. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            },
            "atomic": {
              "description": "Sets the atomic behaviour of the resulting queue item.\nIf this is set to false, the devices contained in the\nresulting queue item can start executing if the same devices\nin other non-atomic queue items ahead of it in the queue are\ncompleted. If set to true, the atomic integrity of the\nqueue item is preserved. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "error-option": {
              "description": "The error option to use. Depending on the selected error option\nNCS will store the reverse of the original transaction intent\nto be able to undo the transaction changes and get back to the\nprevious state. This data is stored in the\n/devices/commit-queue/completed tree from where it can\nbe viewed and invoked with the rollback action. When invoked\nthe data will be removed. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "enumeration",
              "default": "continue-on-error",
              "enum": [
                "continue-on-error",
                "rollback-on-error",
                "stop-on-error"
              ]
            },
            "unlock": {
              "description": "(presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "id": {
                  "description": "Unique id identifying a queue item. If locked, this\nitem will be unlocked in the commit phase. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "integer",
                  "format": "uint64"
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling of the LSA nodes as such. This flag tells\nNCS to propagate applicable commit flags and actions\nto the LSA nodes without applying them on the upper\nNCS node itself. The commit flags affected are\n'dry-run', 'no-networking', 'no-out-of-sync-check',\n'no-overwrite' and 'no-revision-drop'. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:wait-device": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "Take device locks before entering transaction critical section. The\ndevice locks here should be understood to be internal locks in NSO, so\nthe device itself is not locked. If the device locks are held by\nsomeone else, wait for them to become available. The timeout applied\nin this case is the same as used to wait for the transaction lock.\n\nNormally the device locks are taken automatically inside the\ntransaction critical section, because in a typical service transaction\nwe do not know the affected devices before the service code is\nexecuted. When taking the device locks inside transaction critical\nsection, it is not possible to wait for lock, so in case the lock is\nnot available the transaction is aborted.\n\nThis parameter allows to specify the devices expected to be\naffected by the transaction so they can be pre-locked before entering\nthe transaction critical section. This allows to wait for device\nlocks. This is useful in cases when other actions holding the device\nlock may be on-going at the same time and the desired behaviour is\nto wait for these actions to complete rather than abort the\ntransaction. Examples of such actions are: sync-from,\npartial-sync-from, check-sync, sync-to, compare-config.\n\nSimilarly, when used with a commit through commit queue, this\nparameter allows to wait for queue items with block-others flag. For\nexample, a queue item with block-others flag is created by actions\nsuch as sync-from and partial-sync-from, and when a commit queue item\nfails with error-option being rollback-on-error or stop-on-error.\n\nIf the transaction involves other devices than specified by this\nparameter, then the lock still needs to be taken on these additional\ndevices, which is done inside transaction critical section and may\nfail if the device lock for the additional devices is already held\nby someone else. (leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:reconcile": {
          "description": "Reconcile the service data. All data which existed before\nthe service was created will now be owned by the service.\nThe reference count will indicate how many services control\nthe data. When the service is removed that data will also be\nremoved. In technical terms the reference count will be\ndecreased by one for everything which existed prior to the\nservice.\n\nIf manually configured data exists below in the configuration\ntree that data is kept unless the option\n'discard-non-service-config' is used. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "keep-non-service-config": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "[null]"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_service-list_service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_re-deploy-counter": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:re-deploy-counter": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "int32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name_value": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:value": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list_property_property-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "value": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_property-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:property-list": {
          "description": "Fastmap service instance data used by the service implementation. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_ned-id-list_ned-id-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_lsa-service-list_lsa-service-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_latest-u-info": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:latest-u-info": {
          "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_latest-commit-params": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:latest-commit-params": {
          "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_forward-diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:forward-diff-set": {
          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_diff-set": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:diff-set": {
          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private_device-list_device-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:diff-set": {
          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        },
        "cisco-flat-L3vpn-fp:forward-diff-set": {
          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        },
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        },
        "cisco-flat-L3vpn-fp:ned-id-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        },
        "cisco-flat-L3vpn-fp:service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        },
        "cisco-flat-L3vpn-fp:lsa-service-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        },
        "cisco-flat-L3vpn-fp:property-list": {
          "description": "Fastmap service instance data used by the service implementation. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "property": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:re-deploy-counter": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "int32"
        },
        "cisco-flat-L3vpn-fp:latest-commit-params": {
          "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        },
        "cisco-flat-L3vpn-fp:latest-u-info": {
          "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "binary"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_private": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:private": {
          "description": "Stores NCS service-related internal data. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "diff-set": {
              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "forward-diff-set": {
              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "device-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "ned-id-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "string"
              }
            },
            "service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-service-list": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "property-list": {
              "description": "Fastmap service instance data used by the service implementation. (non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "property": {
                  "type": "array",
                  "description": "(list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "re-deploy-counter": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "int32"
            },
            "latest-commit-params": {
              "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            },
            "latest-u-info": {
              "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified_services_services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified_services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified_lsa-services_lsa-services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified_lsa-services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified_devices_devices-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified_devices": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_modified": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:modified": {
          "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "devices": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "leafref"
              }
            },
            "services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_purge-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:purged-log-entries": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_purge-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        },
        "cisco-flat-L3vpn-fp:level": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "all",
          "enum": [
            "all",
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ]
        },
        "cisco-flat-L3vpn-fp:older-than": {
          "description": "Matches the 'when' leaf in the log entry. (presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "true"
          },
          "properties": {
            "seconds": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "integer",
              "format": "uint16"
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_log-entry_log-entry-when_when": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:when": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_log-entry_log-entry-when_type": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:type": {
          "description": "Indicates this log entry's type. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "identityref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_log-entry_log-entry-when_message": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:message": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_log-entry_log-entry-when_level": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:level": {
          "description": "Indicates this log entry's log level. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "all",
          "enum": [
            "all",
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_log-entry_log-entry-when": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log-entry": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "when": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "Indicates this log entry's type. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "level": {
                "description": "Indicates this log entry's log level. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "all",
                "enum": [
                  "all",
                  "trace",
                  "debug",
                  "info",
                  "warn",
                  "error"
                ]
              },
              "message": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log_log-entry": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log-entry": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "when": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "type": {
                "description": "Indicates this log entry's type. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "identityref"
              },
              "level": {
                "description": "Indicates this log entry's log level. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "all",
                "enum": [
                  "all",
                  "trace",
                  "debug",
                  "info",
                  "warn",
                  "error"
                ]
              },
              "message": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_log": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:log": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "log-entry": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "when": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "description": "Indicates this log entry's type. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "level": {
                    "description": "Indicates this log entry's log level. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "all",
                    "enum": [
                      "all",
                      "trace",
                      "debug",
                      "info",
                      "warn",
                      "error"
                    ]
                  },
                  "message": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_get-modifications-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-service": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-id": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_get-modifications-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml"
          ]
        },
        "cisco-flat-L3vpn-fp:reverse": {
          "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified_services_services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified_services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified_lsa-services_lsa-services-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified_lsa-services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:lsa-services": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "instance-identifier"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified_devices_devices-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified_devices": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:devices": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "(leaf-list)",
            "type": "string",
            "format": "leafref"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_directly-modified": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:directly-modified": {
          "description": "Devices and other services that this service has explicitly modified. (non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "devices": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "leafref"
              }
            },
            "services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            },
            "lsa-services": {
              "type": "array",
              "x-yang": {
                "type": "leaf-list"
              },
              "items": {
                "description": "(leaf-list)",
                "type": "string",
                "format": "instance-identifier"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_device-list_device-list-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_device-list": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:device-list": {
          "type": "array",
          "x-yang": {
            "type": "leaf-list"
          },
          "items": {
            "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_deep-check-sync-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:result-xml": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "local-node": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "data": {
                  "type": "object",
                  "x-yang": {
                    "type": "anyxml"
                  },
                  "description": "anyxml data object",
                  "properties": {
                  }
                }
              }
            },
            "lsa-service": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "service-id": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "data": {
                    "type": "object",
                    "x-yang": {
                      "type": "anyxml"
                    },
                    "description": "anyxml data object",
                    "properties": {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_deep-check-sync-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml",
            "boolean"
          ]
        },
        "cisco-flat-L3vpn-fp:suppress-positive-result": {
          "description": "Use this additional parameter to only return services that\nfailed to sync. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_status": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:status": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "waiting",
          "enum": [
            "waiting",
            "executing",
            "blocking",
            "blocked",
            "failed",
            "admin-cleared",
            "commit-queue-failed"
          ]
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_no-of-impacted-services": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:no-of-impacted-services": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:id": {
          "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_time": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:time": {
          "description": "The time when the failure occurred. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:name": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "leafref"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_error": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:error": {
          "description": "The error returned by the device. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name_config-data": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:config-data": {
          "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "string"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_failed-device_failed-device-name": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:failed-device": {
          "type": "array",
          "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "time": {
                "description": "The time when the failure occurred. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "config-data": {
                "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "error": {
                "description": "The error returned by the device. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_failed-device": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:failed-device": {
          "type": "array",
          "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "leafref"
              },
              "time": {
                "description": "The time when the failure occurred. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "config-data": {
                "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "error": {
                "description": "The error returned by the device. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_delete-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_delete-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_cleared-by-admin": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:cleared-by-admin": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_admin-clear-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id_admin-clear-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item_queue-item-id": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:queue-item": {
          "type": "array",
          "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint64"
              },
              "status": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "waiting",
                "enum": [
                  "waiting",
                  "executing",
                  "blocking",
                  "blocked",
                  "failed",
                  "admin-cleared",
                  "commit-queue-failed"
                ]
              },
              "cleared-by-admin": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "no-of-impacted-services": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "failed-device": {
                "type": "array",
                "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "time": {
                      "description": "The time when the failure occurred. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "config-data": {
                      "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "error": {
                      "description": "The error returned by the device. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_queue-item": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:queue-item": {
          "type": "array",
          "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint64"
              },
              "status": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "enumeration",
                "default": "waiting",
                "enum": [
                  "waiting",
                  "executing",
                  "blocking",
                  "blocked",
                  "failed",
                  "admin-cleared",
                  "commit-queue-failed"
                ]
              },
              "cleared-by-admin": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "no-of-impacted-services": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "integer",
                "format": "uint32"
              },
              "failed-device": {
                "type": "array",
                "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "time": {
                      "description": "The time when the failure occurred. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "config-data": {
                      "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "error": {
                      "description": "The error returned by the device. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_clear-post-output": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue_clear-post-input": {
      "type": "object",
      "properties": {
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_commit-queue": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:commit-queue": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "queue-item": {
              "type": "array",
              "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint64"
                  },
                  "status": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "waiting",
                    "enum": [
                      "waiting",
                      "executing",
                      "blocking",
                      "blocked",
                      "failed",
                      "admin-cleared",
                      "commit-queue-failed"
                    ]
                  },
                  "cleared-by-admin": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "no-of-impacted-services": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "integer",
                    "format": "uint32"
                  },
                  "failed-device": {
                    "type": "array",
                    "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "time": {
                          "description": "The time when the failure occurred. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "config-data": {
                          "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "error": {
                          "description": "The error returned by the device. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_check-sync-post-output": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:in-sync": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "boolean"
        }
      }
    },
    "data_cisco-flat-L3vpn-fp_cfp-configurations_stacked-service-enabled_check-sync-post-input": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:outformat": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "enumeration",
          "default": "cli",
          "enum": [
            "cli",
            "xml",
            "native",
            "boolean"
          ]
        },
        "cisco-flat-L3vpn-fp:deep": {
          "description": "(leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:suppress-positive-result": {
          "description": "Use this additional parameter to only return services that\nfailed to sync. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        },
        "cisco-flat-L3vpn-fp:use-lsa": {
          "description": "Force handling LSA nodes as such. (leaf)",
          "x-yang": {
            "type": "leaf"
          },
          "type": "string",
          "format": "[null]"
        }
      }
    },

    "data_cisco-flat-L3vpn-fp_cfp-configurations": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:cfp-configurations": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "dynamic-device-mapping": {
              "type": "array",
              "description": "Dynamic Device Mapping (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ned-id": {
                    "description": "Device NED ID, eg ned:netconf (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "python-impl-class-name": {
                    "description": "Device Python implementation class, eg module.class (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "l3vpn-validation-enabled": {
              "description": "If set to true, the following validations are done for the L3vpn service: All the endpoint interfaces are available on the endpoint. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "l3vpn-device-error-validation-enabled": {
              "description": "If set to true, following validations are done for l3vpn service:\n1. Check if RD change will be accepted by endpoint. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "local-user": {
              "description": "The NCS user with sufficient permissions to write config data (leaf).",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "auto-cleanup": {
              "description": "When a device is down and this flag is set to true, on deletion of the device from the service, all data pertaining to this device will be removed automatically, using no-networking. This means the user must take care of  configuration cleanup on the device. If it is set to false, the user must run cleanup actions to remove this device from the service. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "iosxr-default-ned-id": {
              "description": "NED ID of the default IOSXR Device. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "stacked-service-enabled": {
              "description": "Set to use stacked-service deployment model - experimental demo feature (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "modified": {
                  "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "devices": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "leafref"
                      }
                    },
                    "services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "lsa-services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  }
                },
                "directly-modified": {
                  "description": "Devices and other services that this service has explicitly modified. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "devices": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "leafref"
                      }
                    },
                    "services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "lsa-services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  }
                },
                "device-list": {
                  "type": "array",
                  "x-yang": {
                    "type": "leaf-list"
                  },
                  "items": {
                    "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
                    "type": "string",
                    "format": "string"
                  }
                },
                "used-by-customer-service": {
                  "type": "array",
                  "x-yang": {
                    "type": "leaf-list"
                  },
                  "items": {
                    "description": "(leaf-list)",
                    "type": "string",
                    "format": "leafref"
                  }
                },
                "commit-queue": {
                  "description": "(non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "queue-item": {
                      "type": "array",
                      "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint64"
                          },
                          "status": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "waiting",
                            "enum": [
                              "waiting",
                              "executing",
                              "blocking",
                              "blocked",
                              "failed",
                              "admin-cleared",
                              "commit-queue-failed"
                            ]
                          },
                          "cleared-by-admin": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "[null]"
                          },
                          "no-of-impacted-services": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint32"
                          },
                          "failed-device": {
                            "type": "array",
                            "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "time": {
                                  "description": "The time when the failure occurred. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "config-data": {
                                  "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "error": {
                                  "description": "The error returned by the device. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "private": {
                  "description": "Stores NCS service-related internal data. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "diff-set": {
                      "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    },
                    "forward-diff-set": {
                      "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    },
                    "device-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "string"
                      }
                    },
                    "ned-id-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "string"
                      }
                    },
                    "service-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of services this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "lsa-service-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "property-list": {
                      "description": "Fastmap service instance data used by the service implementation. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "property": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "value": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "re-deploy-counter": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "int32"
                    },
                    "latest-commit-params": {
                      "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    },
                    "latest-u-info": {
                      "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    }
                  }
                },
                "log": {
                  "description": "(non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "log-entry": {
                      "type": "array",
                      "description": "(list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "when": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "type": {
                            "description": "Indicates this log entry's type. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "identityref"
                          },
                          "level": {
                            "description": "Indicates this log entry's log level. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "all",
                            "enum": [
                              "all",
                              "trace",
                              "debug",
                              "info",
                              "warn",
                              "error"
                            ]
                          },
                          "message": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "global-rd-enabled": {
              "description": "Set this flag to apply RD under global VRF definition. (presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "true"
              },
              "properties": {
                "modified": {
                  "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "devices": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "leafref"
                      }
                    },
                    "services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "lsa-services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  }
                },
                "directly-modified": {
                  "description": "Devices and other services that this service has explicitly modified. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "devices": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "leafref"
                      }
                    },
                    "services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "lsa-services": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  }
                },
                "device-list": {
                  "type": "array",
                  "x-yang": {
                    "type": "leaf-list"
                  },
                  "items": {
                    "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
                    "type": "string",
                    "format": "string"
                  }
                },
                "used-by-customer-service": {
                  "type": "array",
                  "x-yang": {
                    "type": "leaf-list"
                  },
                  "items": {
                    "description": "(leaf-list)",
                    "type": "string",
                    "format": "leafref"
                  }
                },
                "commit-queue": {
                  "description": "(non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "queue-item": {
                      "type": "array",
                      "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint64"
                          },
                          "status": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "waiting",
                            "enum": [
                              "waiting",
                              "executing",
                              "blocking",
                              "blocked",
                              "failed",
                              "admin-cleared",
                              "commit-queue-failed"
                            ]
                          },
                          "cleared-by-admin": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "[null]"
                          },
                          "no-of-impacted-services": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint32"
                          },
                          "failed-device": {
                            "type": "array",
                            "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "time": {
                                  "description": "The time when the failure occurred. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "config-data": {
                                  "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "error": {
                                  "description": "The error returned by the device. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "private": {
                  "description": "Stores NCS service-related internal data. (non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "diff-set": {
                      "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    },
                    "forward-diff-set": {
                      "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    },
                    "device-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "string"
                      }
                    },
                    "ned-id-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "string"
                      }
                    },
                    "service-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of services this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "lsa-service-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    },
                    "property-list": {
                      "description": "Fastmap service instance data used by the service implementation. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "property": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "value": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "re-deploy-counter": {
                      "description": "(leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "int32"
                    },
                    "latest-commit-params": {
                      "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    },
                    "latest-u-info": {
                      "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "binary"
                    }
                  }
                },
                "log": {
                  "description": "(non-presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "false"
                  },
                  "properties": {
                    "log-entry": {
                      "type": "array",
                      "description": "(list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "when": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "type": {
                            "description": "Indicates this log entry's type. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "identityref"
                          },
                          "level": {
                            "description": "Indicates this log entry's log level. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "all",
                            "enum": [
                              "all",
                              "trace",
                              "debug",
                              "info",
                              "warn",
                              "error"
                            ]
                          },
                          "message": {
                            "description": "(leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "data-put-patch": {
      "type": "object",
      "properties": {
        "ietf-restconf:data": {
          "description": "MPLS L3VPN function pack - example",
          "type": "object",
          "x-yang": {
            "type": "datastore"
          },
          "properties": {
            "cisco-flat-L3vpn-fp:l3vpn-route-policy": {
              "type": "array",
              "description": "Route policy definition (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Route-Policy name (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "color": {
                    "type": "array",
                    "description": "SR policy color (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "<1-4294967295> - SR policy color (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint32"
                        },
                        "ipv4": {
                          "description": "IPv4 ODN SR (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "prefix": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "ipv6": {
                          "description": "(presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "ipv6-prefix": {
                              "type": "array",
                              "x-yang": {
                                "type": "leaf-list"
                              },
                              "items": {
                                "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "cisco-flat-L3vpn-fp:flat-L3vpn": {
              "type": "array",
              "description": "Flat L3VPN Configuration (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "modified": {
                    "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "devices": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "(leaf-list)",
                          "type": "string",
                          "format": "leafref"
                        }
                      },
                      "services": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "(leaf-list)",
                          "type": "string",
                          "format": "instance-identifier"
                        }
                      },
                      "lsa-services": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "(leaf-list)",
                          "type": "string",
                          "format": "instance-identifier"
                        }
                      }
                    }
                  },
                  "directly-modified": {
                    "description": "Devices and other services that this service has explicitly modified. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "devices": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "(leaf-list)",
                          "type": "string",
                          "format": "leafref"
                        }
                      },
                      "services": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "(leaf-list)",
                          "type": "string",
                          "format": "instance-identifier"
                        }
                      },
                      "lsa-services": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "(leaf-list)",
                          "type": "string",
                          "format": "instance-identifier"
                        }
                      }
                    }
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "used-by-customer-service": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "commit-queue": {
                    "description": "(non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "queue-item": {
                        "type": "array",
                        "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            },
                            "status": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "waiting",
                              "enum": [
                                "waiting",
                                "executing",
                                "blocking",
                                "blocked",
                                "failed",
                                "admin-cleared",
                                "commit-queue-failed"
                              ]
                            },
                            "cleared-by-admin": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "[null]"
                            },
                            "no-of-impacted-services": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint32"
                            },
                            "failed-device": {
                              "type": "array",
                              "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "leafref"
                                  },
                                  "time": {
                                    "description": "The time when the failure occurred. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "config-data": {
                                    "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "error": {
                                    "description": "The error returned by the device. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "private": {
                    "description": "Stores NCS service-related internal data. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "diff-set": {
                        "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "binary"
                      },
                      "forward-diff-set": {
                        "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "binary"
                      },
                      "device-list": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                          "type": "string",
                          "format": "string"
                        }
                      },
                      "ned-id-list": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                          "type": "string",
                          "format": "string"
                        }
                      },
                      "service-list": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "A list of services this service instance has manipulated. (leaf-list)",
                          "type": "string",
                          "format": "instance-identifier"
                        }
                      },
                      "lsa-service-list": {
                        "type": "array",
                        "x-yang": {
                          "type": "leaf-list"
                        },
                        "items": {
                          "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                          "type": "string",
                          "format": "instance-identifier"
                        }
                      },
                      "property-list": {
                        "description": "Fastmap service instance data used by the service implementation. (non-presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "false"
                        },
                        "properties": {
                          "property": {
                            "type": "array",
                            "description": "(list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "value": {
                                  "description": "(leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "re-deploy-counter": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "int32"
                      },
                      "latest-commit-params": {
                        "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "binary"
                      },
                      "latest-u-info": {
                        "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  },
                  "log": {
                    "description": "(non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "log-entry": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "when": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "type": {
                              "description": "Indicates this log entry's type. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "level": {
                              "description": "Indicates this log entry's log level. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "all",
                              "enum": [
                                "all",
                                "trace",
                                "debug",
                                "info",
                                "warn",
                                "error"
                              ]
                            },
                            "message": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Service Name for L3VPN (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "custom-template": {
                    "type": "array",
                    "description": "Custom templates to apply when device is ready (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of template to apply (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "variable": {
                          "type": "array",
                          "description": "Variables to bind when applying template one time (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of template variable (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "value": {
                                "description": "Value of template variable (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "iteration": {
                          "type": "array",
                          "description": "Apply custom template multiple times with iteration (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "description": "<1-65535>;;Iteration number (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint16"
                              },
                              "variable": {
                                "type": "array",
                                "description": "Variables to bind when applying template in iteration (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of template variable (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "value": {
                                      "description": "Value of template variable (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "endpoint": {
                    "type": "array",
                    "description": "L3VPN End-point (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "endpoint-name": {
                          "description": "Endpoint name (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "access-pe": {
                          "description": "PE device (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "custom-template": {
                          "type": "array",
                          "description": "Custom templates to apply when device is ready (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of template to apply (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "leafref"
                              },
                              "variable": {
                                "type": "array",
                                "description": "Variables to bind when applying template one time (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of template variable (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "value": {
                                      "description": "Value of template variable (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                }
                              },
                              "iteration": {
                                "type": "array",
                                "description": "Apply custom template multiple times with iteration (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "number": {
                                      "description": "<1-65535>;;Iteration number (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "integer",
                                      "format": "uint16"
                                    },
                                    "variable": {
                                      "type": "array",
                                      "description": "Variables to bind when applying template in iteration (list)",
                                      "x-yang": {
                                        "type": "list"
                                      },
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Name of template variable (leaf)",
                                            "x-yang": {
                                              "type": "leaf"
                                            },
                                            "type": "string",
                                            "format": "leafref"
                                          },
                                          "value": {
                                            "description": "Value of template variable (leaf)",
                                            "x-yang": {
                                              "type": "leaf"
                                            },
                                            "type": "string",
                                            "format": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "if-type": {
                          "description": "Interface Type (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "Loopback",
                          "enum": [
                            "Loopback",
                            "BVI",
                            "GigabitEthernet",
                            "TenGigE",
                            "FortyGigE",
                            "HundredGigE",
                            "FiftyGigE",
                            "TwoHundredGigE",
                            "Bundle-Ether",
                            "FourHundredGigE",
                            "TwentyFiveGigE"
                          ]
                        },
                        "if-id": {
                          "description": "Interface Id (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "mtu": {
                          "description": "<64-65535> - Set the MTU on an interface (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "integer",
                          "format": "uint16"
                        },
                        "pe-ip-addr": {
                          "description": "<A.B.C.D/prefix> - PE IPv4 Address (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "pe-ipv6-addr": {
                          "description": "<X:X::X/length> - PE IPv6 Address (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "as-no": {
                          "description": "Autonomous Number (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "union"
                        },
                        "vlan-id": {
                          "description": "<1-4000> - VLAN Id (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "int32"
                        },
                        "ce-pe-prot": {
                          "description": "(non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "e-bgp": {
                              "description": "eBGP Routing (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "neighbor-ipv4": {
                                  "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "neighbor-ipv6": {
                                  "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                },
                                "remote-as-ipv4": {
                                  "description": "Neighbor IPv4 Remote AS (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "union"
                                },
                                "remote-as-ipv6": {
                                  "description": "Neighbor IPv6 Remote AS (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "union"
                                },
                                "update-source": {
                                  "description": "Source of routing updates (presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "true"
                                  },
                                  "properties": {
                                    "if-type": {
                                      "description": "Interface Type (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "Loopback",
                                      "enum": [
                                        "Loopback",
                                        "GigabitEthernet",
                                        "TenGigE",
                                        "FortyGigE",
                                        "HundredGigE",
                                        "FiftyGigE",
                                        "TwoHundredGigE",
                                        "Bundle-Ether",
                                        "FourHundredGigE",
                                        "TwentyFiveGigE"
                                      ]
                                    },
                                    "if-id": {
                                      "description": "Interface Id (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "vrf": {
                          "description": "VRF Definition (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "vrf-definition": {
                              "description": "VRF Name (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "route-distinguisher": {
                              "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "vpn-id": {
                              "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "address-family": {
                              "type": "array",
                              "description": "Address Family (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address-family": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "ipv4",
                                    "enum": [
                                      "ipv4",
                                      "ipv6"
                                    ]
                                  },
                                  "redistribute-connected": {
                                    "description": "Redistribute Connected (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "[null]"
                                  },
                                  "metric": {
                                    "description": "Default metric (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint32"
                                  },
                                  "vpn-target": {
                                    "type": "array",
                                    "description": "Route Targets (list)",
                                    "x-yang": {
                                      "type": "list"
                                    },
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "rt-type": {
                                          "description": "Route-Target Type (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "enumeration",
                                          "default": "import",
                                          "enum": [
                                            "import",
                                            "export",
                                            "both"
                                          ]
                                        },
                                        "rt-value": {
                                          "description": "Route-Target Value (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "sr-te": {
                          "description": "Segment Routing Association (presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "true"
                          },
                          "properties": {
                            "route-policy": {
                              "description": "Route policy definition (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "leafref"
                            }
                          }
                        },
                        "l2-attachment-circuit": {
                          "type": "array",
                          "description": "L2 Attachment Ciruit (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "L2 AC name (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "if-type": {
                                "description": "Interface Type (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "GigabitEthernet",
                                "enum": [
                                  "GigabitEthernet",
                                  "TenGigE",
                                  "FortyGigE",
                                  "HundredGigE",
                                  "FiftyGigE",
                                  "TwoHundredGigE",
                                  "Bundle-Ether",
                                  "FourHundredGigE",
                                  "TwentyFiveGigE"
                                ]
                              },
                              "if-id": {
                                "description": "Interface Id (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "vlan-id": {
                                "description": "<1-4000> - VLAN Id (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "int32"
                              },
                              "rewrite": {
                                "description": "Tag Rewrite (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "ingress": {
                                    "description": "Set the tag rewriting policy for this EFP (presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "true"
                                    },
                                    "properties": {
                                      "pop": {
                                        "description": "Remove one or more tags (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "1",
                                        "enum": [
                                          "1",
                                          "2"
                                        ]
                                      },
                                      "dot1q": {
                                        "description": "<1-4094> - Push a Dot1Q tag (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "integer",
                                        "format": "uint16"
                                      },
                                      "mode": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "enumeration",
                                        "default": "symmetric",
                                        "enum": [
                                          "symmetric"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "action": {
                          "description": "(non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                          }
                        },
                        "redeploy-flag": {
                          "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "redeploy-flag": {
                    "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "action": {
                    "description": "(non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                    }
                  }
                }
              }
            },
            "cisco-flat-L3vpn-fp:flat-L3vpn-plan": {
              "type": "array",
              "description": "(list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "plan": {
                    "description": "(non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "component": {
                        "type": "array",
                        "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "type": {
                              "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "state": {
                              "type": "array",
                              "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "identityref"
                                  },
                                  "status": {
                                    "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "not-reached",
                                    "enum": [
                                      "not-reached",
                                      "reached",
                                      "failed"
                                    ]
                                  },
                                  "when": {
                                    "description": "The time this state was successfully reached or failed. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "service-reference": {
                                    "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "instance-identifier"
                                  },
                                  "create-cb": {
                                    "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-cb": {
                                    "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "pre-conditions": {
                                    "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "true"
                                    },
                                    "properties": {
                                      "create-monitor": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "create-trigger-expr": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "delete-monitor": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "delete-trigger-expr": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  },
                                  "post-actions": {
                                    "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "true"
                                    },
                                    "properties": {
                                      "create-action-node": {
                                        "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "create-action-name": {
                                        "description": "The name of the action. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "create-action-result-expr": {
                                        "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "delete-action-node": {
                                        "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "delete-action-name": {
                                        "description": "The name of the action. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "delete-action-result-expr": {
                                        "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  },
                                  "post-action-status": {
                                    "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "not-reached",
                                    "enum": [
                                      "not-reached",
                                      "create-reached",
                                      "delete-reached",
                                      "failed"
                                    ]
                                  },
                                  "private": {
                                    "description": "Stores NCS service-related internal data. (non-presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "false"
                                    },
                                    "properties": {
                                      "diff-set": {
                                        "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "binary"
                                      },
                                      "forward-diff-set": {
                                        "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "binary"
                                      },
                                      "device-list": {
                                        "type": "array",
                                        "x-yang": {
                                          "type": "leaf-list"
                                        },
                                        "items": {
                                          "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                          "type": "string",
                                          "format": "string"
                                        }
                                      },
                                      "ned-id-list": {
                                        "type": "array",
                                        "x-yang": {
                                          "type": "leaf-list"
                                        },
                                        "items": {
                                          "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                          "type": "string",
                                          "format": "string"
                                        }
                                      },
                                      "service-list": {
                                        "type": "array",
                                        "x-yang": {
                                          "type": "leaf-list"
                                        },
                                        "items": {
                                          "description": "A list of services this state has manipulated. (leaf-list)",
                                          "type": "string",
                                          "format": "instance-identifier"
                                        }
                                      },
                                      "lsa-service-list": {
                                        "type": "array",
                                        "x-yang": {
                                          "type": "leaf-list"
                                        },
                                        "items": {
                                          "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                          "type": "string",
                                          "format": "instance-identifier"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "private": {
                              "description": "Stores NCS service-related internal data. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property-list": {
                                  "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                                  "type": "object",
                                  "x-yang": {
                                    "type": "container",
                                    "is_presence": "false"
                                  },
                                  "properties": {
                                    "property": {
                                      "type": "array",
                                      "description": "(list)",
                                      "x-yang": {
                                        "type": "list"
                                      },
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "(leaf)",
                                            "x-yang": {
                                              "type": "leaf"
                                            },
                                            "type": "string",
                                            "format": "string"
                                          },
                                          "value": {
                                            "description": "(leaf)",
                                            "x-yang": {
                                              "type": "leaf"
                                            },
                                            "type": "string",
                                            "format": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "back-track": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "boolean"
                            },
                            "back-track-goal": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "status-code": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      },
                      "commit-queue": {
                        "description": "(presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                          "queue-item": {
                            "type": "array",
                            "description": "(list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint64"
                                }
                              }
                            }
                          }
                        }
                      },
                      "failed": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "[null]"
                      },
                      "error-info": {
                        "description": "(presence)",
                        "type": "object",
                        "x-yang": {
                          "type": "container",
                          "is_presence": "true"
                        },
                        "properties": {
                          "message": {
                            "description": "An explanatory message for the failing plan. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "log-entry": {
                            "description": "Reference to a service log entry with additional information. (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      },
                      "deleting": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "[null]"
                      },
                      "service-location": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "instance-identifier"
                      },
                      "status-code-detail": {
                        "type": "array",
                        "description": "Status Codes (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "code": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "context": {
                              "type": "array",
                              "description": "(list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "context-name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "context-msg": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            },
                            "severity": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "INFO",
                              "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "FATAL",
                                "NONE"
                              ]
                            },
                            "recommended-action": {
                              "description": "Recommended action to recover in case of error (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "plan-history": {
                    "description": "(non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "plan": {
                        "type": "array",
                        "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "component": {
                              "type": "array",
                              "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "type": {
                                    "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "identityref"
                                  },
                                  "state": {
                                    "type": "array",
                                    "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                                    "x-yang": {
                                      "type": "list"
                                    },
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "identityref"
                                        },
                                        "status": {
                                          "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "enumeration",
                                          "default": "not-reached",
                                          "enum": [
                                            "not-reached",
                                            "reached",
                                            "failed"
                                          ]
                                        },
                                        "when": {
                                          "description": "The time this state was successfully reached or failed. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "service-reference": {
                                          "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "instance-identifier"
                                        },
                                        "create-cb": {
                                          "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-cb": {
                                          "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "pre-conditions": {
                                          "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                          "type": "object",
                                          "x-yang": {
                                            "type": "container",
                                            "is_presence": "true"
                                          },
                                          "properties": {
                                            "create-monitor": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "create-trigger-expr": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "delete-monitor": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "delete-trigger-expr": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            }
                                          }
                                        },
                                        "post-actions": {
                                          "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                          "type": "object",
                                          "x-yang": {
                                            "type": "container",
                                            "is_presence": "true"
                                          },
                                          "properties": {
                                            "create-action-node": {
                                              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "create-action-name": {
                                              "description": "The name of the action. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "create-action-result-expr": {
                                              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "delete-action-node": {
                                              "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "delete-action-name": {
                                              "description": "The name of the action. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "delete-action-result-expr": {
                                              "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            }
                                          }
                                        },
                                        "post-action-status": {
                                          "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "enumeration",
                                          "default": "not-reached",
                                          "enum": [
                                            "not-reached",
                                            "create-reached",
                                            "delete-reached",
                                            "failed"
                                          ]
                                        },
                                        "private": {
                                          "description": "Stores NCS service-related internal data. (non-presence)",
                                          "type": "object",
                                          "x-yang": {
                                            "type": "container",
                                            "is_presence": "false"
                                          },
                                          "properties": {
                                            "diff-set": {
                                              "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "binary"
                                            },
                                            "forward-diff-set": {
                                              "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "binary"
                                            },
                                            "device-list": {
                                              "type": "array",
                                              "x-yang": {
                                                "type": "leaf-list"
                                              },
                                              "items": {
                                                "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                                "type": "string",
                                                "format": "string"
                                              }
                                            },
                                            "ned-id-list": {
                                              "type": "array",
                                              "x-yang": {
                                                "type": "leaf-list"
                                              },
                                              "items": {
                                                "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                                "type": "string",
                                                "format": "string"
                                              }
                                            },
                                            "service-list": {
                                              "type": "array",
                                              "x-yang": {
                                                "type": "leaf-list"
                                              },
                                              "items": {
                                                "description": "A list of services this state has manipulated. (leaf-list)",
                                                "type": "string",
                                                "format": "instance-identifier"
                                              }
                                            },
                                            "lsa-service-list": {
                                              "type": "array",
                                              "x-yang": {
                                                "type": "leaf-list"
                                              },
                                              "items": {
                                                "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                                "type": "string",
                                                "format": "instance-identifier"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "private": {
                                    "description": "Stores NCS service-related internal data. (non-presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "false"
                                    },
                                    "properties": {
                                      "property-list": {
                                        "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                                        "type": "object",
                                        "x-yang": {
                                          "type": "container",
                                          "is_presence": "false"
                                        },
                                        "properties": {
                                          "property": {
                                            "type": "array",
                                            "description": "(list)",
                                            "x-yang": {
                                              "type": "list"
                                            },
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "description": "(leaf)",
                                                  "x-yang": {
                                                    "type": "leaf"
                                                  },
                                                  "type": "string",
                                                  "format": "string"
                                                },
                                                "value": {
                                                  "description": "(leaf)",
                                                  "x-yang": {
                                                    "type": "leaf"
                                                  },
                                                  "type": "string",
                                                  "format": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "back-track": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "boolean"
                                  },
                                  "back-track-goal": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "identityref"
                                  },
                                  "status-code": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "status-code-detail": {
                        "type": "array",
                        "description": "Status Codes (list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "identityref"
                            },
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "code": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "context": {
                              "type": "array",
                              "description": "(list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "context-name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "context-msg": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            },
                            "severity": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "enumeration",
                              "default": "INFO",
                              "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "FATAL",
                                "NONE"
                              ]
                            },
                            "recommended-action": {
                              "description": "Recommended action to recover in case of error (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "cisco-flat-L3vpn-fp:cfp-configurations": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
                "dynamic-device-mapping": {
                  "type": "array",
                  "description": "Dynamic Device Mapping (list)",
                  "x-yang": {
                    "type": "list"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "ned-id": {
                        "description": "Device NED ID, eg ned:netconf (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "python-impl-class-name": {
                        "description": "Device Python implementation class, eg module.class (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                },
                "l3vpn-validation-enabled": {
                  "description": "If set to true, the following validations are done for the L3vpn service: All the endpoint interfaces are available on the endpoint. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "l3vpn-device-error-validation-enabled": {
                  "description": "If set to true, following validations are done for l3vpn service:\n1. Check if RD change will be accepted by endpoint. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "local-user": {
                  "description": "The NCS user with sufficient permissions to write config data (leaf).",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "auto-cleanup": {
                  "description": "When a device is down and this flag is set to true, on deletion of the device from the service, all data pertaining to this device will be removed automatically, using no-networking. This means the user must take care of  configuration cleanup on the device. If it is set to false, the user must run cleanup actions to remove this device from the service. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "boolean"
                },
                "iosxr-default-ned-id": {
                  "description": "NED ID of the default IOSXR Device. (leaf)",
                  "x-yang": {
                    "type": "leaf"
                  },
                  "type": "string",
                  "format": "string"
                },
                "stacked-service-enabled": {
                  "description": "Set to use stacked-service deployment model - experimental demo feature (presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "true"
                  },
                  "properties": {
                    "modified": {
                      "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "devices": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "leafref"
                          }
                        },
                        "services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    },
                    "directly-modified": {
                      "description": "Devices and other services that this service has explicitly modified. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "devices": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "leafref"
                          }
                        },
                        "services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    },
                    "device-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
                        "type": "string",
                        "format": "string"
                      }
                    },
                    "used-by-customer-service": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "leafref"
                      }
                    },
                    "commit-queue": {
                      "description": "(non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "queue-item": {
                          "type": "array",
                          "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint64"
                              },
                              "status": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "waiting",
                                "enum": [
                                  "waiting",
                                  "executing",
                                  "blocking",
                                  "blocked",
                                  "failed",
                                  "admin-cleared",
                                  "commit-queue-failed"
                                ]
                              },
                              "cleared-by-admin": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "[null]"
                              },
                              "no-of-impacted-services": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint32"
                              },
                              "failed-device": {
                                "type": "array",
                                "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "time": {
                                      "description": "The time when the failure occurred. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "config-data": {
                                      "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "error": {
                                      "description": "The error returned by the device. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "diff-set": {
                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "forward-diff-set": {
                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "device-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ned-id-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "property-list": {
                          "description": "Fastmap service instance data used by the service implementation. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property": {
                              "type": "array",
                              "description": "(list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "value": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "re-deploy-counter": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "int32"
                        },
                        "latest-commit-params": {
                          "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "latest-u-info": {
                          "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        }
                      }
                    },
                    "log": {
                      "description": "(non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "log-entry": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "when": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "type": {
                                "description": "Indicates this log entry's type. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "level": {
                                "description": "Indicates this log entry's log level. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "all",
                                "enum": [
                                  "all",
                                  "trace",
                                  "debug",
                                  "info",
                                  "warn",
                                  "error"
                                ]
                              },
                              "message": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "global-rd-enabled": {
                  "description": "Set this flag to apply RD under global VRF definition. (presence)",
                  "type": "object",
                  "x-yang": {
                    "type": "container",
                    "is_presence": "true"
                  },
                  "properties": {
                    "modified": {
                      "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "devices": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "leafref"
                          }
                        },
                        "services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    },
                    "directly-modified": {
                      "description": "Devices and other services that this service has explicitly modified. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "devices": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "leafref"
                          }
                        },
                        "services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-services": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "(leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        }
                      }
                    },
                    "device-list": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
                        "type": "string",
                        "format": "string"
                      }
                    },
                    "used-by-customer-service": {
                      "type": "array",
                      "x-yang": {
                        "type": "leaf-list"
                      },
                      "items": {
                        "description": "(leaf-list)",
                        "type": "string",
                        "format": "leafref"
                      }
                    },
                    "commit-queue": {
                      "description": "(non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "queue-item": {
                          "type": "array",
                          "description": "When a service is committed through the commit queue, these fields act as references regarding the state of this service instance. In the worst-case scenario, a service instance is in the 'failed' state. This means that parts of the queued commit failed.\n\nIf a service gets committed through the commit queue and the commit fails, the backpointers in the service data are followed and the affected service instances are updated and set to the 'failed' state.\n\nDepending on the nature of the failure, different techniques to reconcile the service can be used.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Do a sync-from on the non-completed device(s) and then re-deploy the failed service(s) with the 'reconcile' option to reconcile original data, i.e., take control of that data. This option acknowledges other services controlling the same data. The reference count will indicate how many services control the data. Release any queue lock that was created.\n\n- Make sure the commit queue is blocked to not interfere with the error recovery procedure. Use un-deploy with the no-networking option on the service and then do sync-from on the non-completed device(s). Make sure the error is fixed and then re-deploy the failed service(s) with the 'reconcile' option. Release any queue lock that was created.\n\nIn the 'failed' state, these fields are reset if a new commit queue transaction is affecting this service, or the service is re-deployed, or these fields are deleted using the specific purge action.\nIn other cases, the 'failed' state will remain. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint64"
                              },
                              "status": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "waiting",
                                "enum": [
                                  "waiting",
                                  "executing",
                                  "blocking",
                                  "blocked",
                                  "failed",
                                  "admin-cleared",
                                  "commit-queue-failed"
                                ]
                              },
                              "cleared-by-admin": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "[null]"
                              },
                              "no-of-impacted-services": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint32"
                              },
                              "failed-device": {
                                "type": "array",
                                "description": "If the 'status' leaf is 'failed', this list contains detailed information on the devices that were responsible for the error of the commit queue item. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "leafref"
                                    },
                                    "time": {
                                      "description": "The time when the failure occurred. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "config-data": {
                                      "description": "The configuration data that was rejected by the device, in XML format. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "error": {
                                      "description": "The error returned by the device. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "private": {
                      "description": "Stores NCS service-related internal data. (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "diff-set": {
                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "forward-diff-set": {
                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "device-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "ned-id-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        },
                        "service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "lsa-service-list": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                            "type": "string",
                            "format": "instance-identifier"
                          }
                        },
                        "property-list": {
                          "description": "Fastmap service instance data used by the service implementation. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property": {
                              "type": "array",
                              "description": "(list)",
                              "x-yang": {
                                "type": "list"
                              },
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "value": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "re-deploy-counter": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "int32"
                        },
                        "latest-commit-params": {
                          "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        },
                        "latest-u-info": {
                          "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "binary"
                        }
                      }
                    },
                    "log": {
                      "description": "(non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "log-entry": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "when": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "type": {
                                "description": "Indicates this log entry's type. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "level": {
                                "description": "Indicates this log entry's log level. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "all",
                                "enum": [
                                  "all",
                                  "trace",
                                  "debug",
                                  "info",
                                  "warn",
                                  "error"
                                ]
                              },
                              "message": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "cisco-flat-L3vpn-fp:flat-L3vpn-actions": {
              "description": "(non-presence)",
              "type": "object",
              "x-yang": {
                "type": "container",
                "is_presence": "false"
              },
              "properties": {
              }
            }
          }
        }
      }
    },
    "data-post": {
      "type": "object",
      "properties": {
        "cisco-flat-L3vpn-fp:l3vpn-route-policy": {
          "type": "array",
          "description": "Route policy definition (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Route-Policy name (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "color": {
                "type": "array",
                "description": "SR policy color (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "<1-4294967295> - SR policy color (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint32"
                    },
                    "ipv4": {
                      "description": "IPv4 ODN SR (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "prefix": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "<A.B.C.D/prefix> - IPv4 Prefix List (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "ipv6": {
                      "description": "(presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "ipv6-prefix": {
                          "type": "array",
                          "x-yang": {
                            "type": "leaf-list"
                          },
                          "items": {
                            "description": "<X:X::X/length> - IPv6 Prefix List (leaf-list)",
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:flat-L3vpn": {
          "type": "array",
          "description": "Flat L3VPN Configuration (list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "no-networking": {
                "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "no-overwrite": {
                "description": "This flags means that NCS will check that the data that\nshould be modified has not changed on the device compared\nto NCS's view of the data. This is a fine-granular sync check;\nNCS verifies that NCS and the device is in sync regarding\nthe data that will be modified. If they are not in sync,\nthe transaction is aborted. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "commit-queue": {
                "description": "(presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "tag": {
                    "description": "User defined opaque tag.\nThe tag is present in all notifications and events\nsent referencing the specific queue item. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "async": {
                    "description": "Commit the transaction data asynchronously to the commit queue.\nThis flag is useful when some device is non-operational or\nhas data waiting in the commit queue.\n\nThe operation returns successfully if the transaction data has\nbeen successfully placed in the queue. The leaf\n'commit-queue/id' is set as the queue identifier and the\nleaf 'commit-queue/status' is set to 'async' in the result. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "block-others": {
                    "description": "The resulting queue item will block subsequent queue items,\nwhich use any of the devices in this queue item, from\nbeing queued. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "lock": {
                    "description": "Place a lock on the resulting queue item. The queue\nitem will not be processed until it has been unlocked,\nsee the actions 'unlock' and 'lock' in\n/devices/commit-queue/queue-item'.\n\nNo following queue items, using the same devices, will be\nallowed to execute as long as the lock is in place. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "atomic": {
                    "description": "Sets the atomic behaviour of the resulting queue item.\nIf this is set to false, the devices contained in the\nresulting queue item can start executing if the same devices\nin other non-atomic queue items ahead of it in the queue are\ncompleted. If set to true, the atomic integrity of the\nqueue item is preserved. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "boolean"
                  },
                  "error-option": {
                    "description": "The error option to use. Depending on the selected error option\nNCS will store the reverse of the original transaction intent\nto be able to undo the transaction changes and get back to the\nprevious state. This data is stored in the\n/devices/commit-queue/completed tree from where it can\nbe viewed and invoked with the rollback action. When invoked\nthe data will be removed. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "continue-on-error",
                    "enum": [
                      "continue-on-error",
                      "rollback-on-error",
                      "stop-on-error"
                    ]
                  },
                  "unlock": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "id": {
                        "description": "Unique id identifying a queue item. If locked, this\nitem will be unlocked in the commit phase. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint64"
                      }
                    }
                  }
                }
              },
              "wait-device": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "Take device locks before entering transaction critical section. The\ndevice locks here should be understood to be internal locks in NSO, so\nthe device itself is not locked. If the device locks are held by\nsomeone else, wait for them to become available. The timeout applied\nin this case is the same as used to wait for the transaction lock.\n\nNormally the device locks are taken automatically inside the\ntransaction critical section, because in a typical service transaction\nwe do not know the affected devices before the service code is\nexecuted. When taking the device locks inside transaction critical\nsection, it is not possible to wait for lock, so in case the lock is\nnot available the transaction is aborted.\n\nThis parameter allows to specify the devices expected to be\naffected by the transaction so they can be pre-locked before entering\nthe transaction critical section. This allows to wait for device\nlocks. This is useful in cases when other actions holding the device\nlock may be on-going at the same time and the desired behaviour is\nto wait for these actions to complete rather than abort the\ntransaction. Examples of such actions are: sync-from,\npartial-sync-from, check-sync, sync-to, compare-config.\n\nSimilarly, when used with a commit through commit queue, this\nparameter allows to wait for queue items with block-others flag. For\nexample, a queue item with block-others flag is created by actions\nsuch as sync-from and partial-sync-from, and when a commit queue item\nfails with error-option being rollback-on-error or stop-on-error.\n\nIf the transaction involves other devices than specified by this\nparameter, then the lock still needs to be taken on these additional\ndevices, which is done inside transaction critical section and may\nfail if the device lock for the additional devices is already held\nby someone else. (leaf-list)",
                  "type": "string",
                  "format": "leafref"
                }
              },
              "reconcile": {
                "description": "Reconcile the service data. All data which existed before\nthe service was created will now be owned by the service.\nThe reference count will indicate how many services control\nthe data. When the service is removed that data will also be\nremoved. In technical terms the reference count will be\ndecreased by one for everything which existed prior to the\nservice.\n\nIf manually configured data exists below in the configuration\ntree that data is kept unless the option\n'discard-non-service-config' is used. (presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "true"
                },
                "properties": {
                  "keep-non-service-config": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  }
                }
              },
              "sync": {
                "description": "By default the action is asynchronous, i.e. it does not wait for\nthe service to be re-deployed. Use this leaf to get synchronous\nbehaviour and block until the service re-deploy transaction is\ncommitted. It also means that the action will possibly return\na commit result, such as commit queue id if any, or an\nerror if the transaction failed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "modified": {
                "description": "Devices and other services this service has modified directly or indirectly (through another service). (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "devices": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              },
              "directly-modified": {
                "description": "Devices and other services that this service has explicitly modified. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "devices": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "leafref"
                    }
                  },
                  "services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-services": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "(leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  }
                }
              },
              "reverse": {
                "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "device-list": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "A list of managed devices this service instance has manipulated. This leaf is deprecated; use 'modified' instead. (leaf-list)",
                  "type": "string",
                  "format": "string"
                }
              },
              "ignore-refcount": {
                "description": "Unconditionally delete the device data created by the\nservice, regardless of the refcount. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "[null]"
              },
              "used-by-customer-service": {
                "type": "array",
                "x-yang": {
                  "type": "leaf-list"
                },
                "items": {
                  "description": "(leaf-list)",
                  "type": "string",
                  "format": "leafref"
                }
              },
              "private": {
                "description": "Stores NCS service-related internal data. (non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "diff-set": {
                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "forward-diff-set": {
                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "device-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of managed devices this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "ned-id-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "string"
                    }
                  },
                  "service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "lsa-service-list": {
                    "type": "array",
                    "x-yang": {
                      "type": "leaf-list"
                    },
                    "items": {
                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                      "type": "string",
                      "format": "instance-identifier"
                    }
                  },
                  "property-list": {
                    "description": "Fastmap service instance data used by the service implementation. (non-presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "false"
                    },
                    "properties": {
                      "property": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "value": {
                              "description": "(leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "re-deploy-counter": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "int32"
                  },
                  "latest-commit-params": {
                    "description": "Stores the commit parameters for the latest transactions. These are used in reactive re-deploy actions that must have the same parameters as the original service commit. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  },
                  "latest-u-info": {
                    "description": "Stores the user info for the latest transactions. These are used in reactive re-deploy actions that must be performed by a user with the same user info. (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "log": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "type": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "identityref"
                  },
                  "level": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "all",
                    "enum": [
                      "all",
                      "trace",
                      "debug",
                      "info",
                      "warn",
                      "error"
                    ]
                  },
                  "older-than": {
                    "description": "Matches the 'when' leaf in the log entry. (presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "seconds": {
                        "description": "(leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "integer",
                        "format": "uint16"
                      }
                    }
                  },
                  "log-entry": {
                    "type": "array",
                    "description": "(list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "when": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "Indicates this log entry's type. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "level": {
                          "description": "Indicates this log entry's log level. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "all",
                          "enum": [
                            "all",
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error"
                          ]
                        },
                        "message": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "name": {
                "description": "Service Name for L3VPN (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "custom-template": {
                "type": "array",
                "description": "Custom templates to apply when device is ready (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of template to apply (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "variable": {
                      "type": "array",
                      "description": "Variables to bind when applying template one time (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "value": {
                            "description": "Value of template variable (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "iteration": {
                      "type": "array",
                      "description": "Apply custom template multiple times with iteration (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "description": "<1-65535>;;Iteration number (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "integer",
                            "format": "uint16"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template in iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "endpoint": {
                "type": "array",
                "description": "L3VPN End-point (list)",
                "x-yang": {
                  "type": "list"
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "endpoint-name": {
                      "description": "Endpoint name (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "access-pe": {
                      "description": "PE device (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "leafref"
                    },
                    "custom-template": {
                      "type": "array",
                      "description": "Custom templates to apply when device is ready (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of template to apply (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "leafref"
                          },
                          "variable": {
                            "type": "array",
                            "description": "Variables to bind when applying template one time (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "leafref"
                                },
                                "value": {
                                  "description": "Value of template variable (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          },
                          "iteration": {
                            "type": "array",
                            "description": "Apply custom template multiple times with iteration (list)",
                            "x-yang": {
                              "type": "list"
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "number": {
                                  "description": "<1-65535>;;Iteration number (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "integer",
                                  "format": "uint16"
                                },
                                "variable": {
                                  "type": "array",
                                  "description": "Variables to bind when applying template in iteration (list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "Name of template variable (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "leafref"
                                      },
                                      "value": {
                                        "description": "Value of template variable (leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "if-type": {
                      "description": "Interface Type (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "enumeration",
                      "default": "Loopback",
                      "enum": [
                        "Loopback",
                        "BVI",
                        "GigabitEthernet",
                        "TenGigE",
                        "FortyGigE",
                        "HundredGigE",
                        "FiftyGigE",
                        "TwoHundredGigE",
                        "Bundle-Ether",
                        "FourHundredGigE",
                        "TwentyFiveGigE"
                      ]
                    },
                    "if-id": {
                      "description": "Interface Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "mtu": {
                      "description": "<64-65535> - Set the MTU on an interface (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "integer",
                      "format": "uint16"
                    },
                    "pe-ip-addr": {
                      "description": "<A.B.C.D/prefix> - PE IPv4 Address (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "pe-ipv6-addr": {
                      "description": "<X:X::X/length> - PE IPv6 Address (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    },
                    "as-no": {
                      "description": "Autonomous Number (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "union"
                    },
                    "vlan-id": {
                      "description": "<1-4000> - VLAN Id (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "int32"
                    },
                    "ce-pe-prot": {
                      "description": "(non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "e-bgp": {
                          "description": "eBGP Routing (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "neighbor-ipv4": {
                              "description": "<A.B.C.D> - Neighbor IPv4 Address (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "neighbor-ipv6": {
                              "description": "<X:X::X> - Neighbor IPv6 Address (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "string"
                            },
                            "remote-as-ipv4": {
                              "description": "Neighbor IPv4 Remote AS (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "union"
                            },
                            "remote-as-ipv6": {
                              "description": "Neighbor IPv6 Remote AS (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "string",
                              "format": "union"
                            },
                            "update-source": {
                              "description": "Source of routing updates (presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "true"
                              },
                              "properties": {
                                "if-type": {
                                  "description": "Interface Type (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "enumeration",
                                  "default": "Loopback",
                                  "enum": [
                                    "Loopback",
                                    "GigabitEthernet",
                                    "TenGigE",
                                    "FortyGigE",
                                    "HundredGigE",
                                    "FiftyGigE",
                                    "TwoHundredGigE",
                                    "Bundle-Ether",
                                    "FourHundredGigE",
                                    "TwentyFiveGigE"
                                  ]
                                },
                                "if-id": {
                                  "description": "Interface Id (leaf)",
                                  "x-yang": {
                                    "type": "leaf"
                                  },
                                  "type": "string",
                                  "format": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "vrf": {
                      "description": "VRF Definition (non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                        "vrf-definition": {
                          "description": "VRF Name (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "route-distinguisher": {
                          "description": "ASN:nn or IPV4-address:nn,VPN Route Distinguisher (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "vpn-id": {
                          "description": "<0-ffffff>:  VPN ID, (OUI:VPN-Index) format(hex), 3 bytes OUI Part (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "address-family": {
                          "type": "array",
                          "description": "Address Family (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "address-family": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "ipv4",
                                "enum": [
                                  "ipv4",
                                  "ipv6"
                                ]
                              },
                              "redistribute-connected": {
                                "description": "Redistribute Connected (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "[null]"
                              },
                              "metric": {
                                "description": "Default metric (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "integer",
                                "format": "uint32"
                              },
                              "vpn-target": {
                                "type": "array",
                                "description": "Route Targets (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "rt-type": {
                                      "description": "Route-Target Type (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "import",
                                      "enum": [
                                        "import",
                                        "export",
                                        "both"
                                      ]
                                    },
                                    "rt-value": {
                                      "description": "Route-Target Value (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "sr-te": {
                      "description": "Segment Routing Association (presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "true"
                      },
                      "properties": {
                        "route-policy": {
                          "description": "Route policy definition (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        }
                      }
                    },
                    "l2-attachment-circuit": {
                      "type": "array",
                      "description": "L2 Attachment Ciruit (list)",
                      "x-yang": {
                        "type": "list"
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "L2 AC name (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "if-type": {
                            "description": "Interface Type (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "enumeration",
                            "default": "GigabitEthernet",
                            "enum": [
                              "GigabitEthernet",
                              "TenGigE",
                              "FortyGigE",
                              "HundredGigE",
                              "FiftyGigE",
                              "TwoHundredGigE",
                              "Bundle-Ether",
                              "FourHundredGigE",
                              "TwentyFiveGigE"
                            ]
                          },
                          "if-id": {
                            "description": "Interface Id (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "string"
                          },
                          "vlan-id": {
                            "description": "<1-4000> - VLAN Id (leaf)",
                            "x-yang": {
                              "type": "leaf"
                            },
                            "type": "string",
                            "format": "int32"
                          },
                          "rewrite": {
                            "description": "Tag Rewrite (presence)",
                            "type": "object",
                            "x-yang": {
                              "type": "container",
                              "is_presence": "true"
                            },
                            "properties": {
                              "ingress": {
                                "description": "Set the tag rewriting policy for this EFP (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "pop": {
                                    "description": "Remove one or more tags (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "1",
                                    "enum": [
                                      "1",
                                      "2"
                                    ]
                                  },
                                  "dot1q": {
                                    "description": "<1-4094> - Push a Dot1Q tag (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "integer",
                                    "format": "uint16"
                                  },
                                  "mode": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "enumeration",
                                    "default": "symmetric",
                                    "enum": [
                                      "symmetric"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "action": {
                      "description": "(non-presence)",
                      "type": "object",
                      "x-yang": {
                        "type": "container",
                        "is_presence": "false"
                      },
                      "properties": {
                      }
                    },
                    "redeploy-flag": {
                      "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
                      "x-yang": {
                        "type": "leaf"
                      },
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "redeploy-flag": {
                "description": "Custom redeploy flag. It redeploys lower-level services if changed. (leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "action": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "endpoint": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "leafref"
                  },
                  "outformat": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "enumeration",
                    "default": "cli",
                    "enum": [
                      "cli",
                      "xml"
                    ]
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:flat-L3vpn-plan": {
          "type": "array",
          "description": "(list)",
          "x-yang": {
            "type": "list"
          },
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "(leaf)",
                "x-yang": {
                  "type": "leaf"
                },
                "type": "string",
                "format": "string"
              },
              "plan": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "component": {
                    "type": "array",
                    "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "type": {
                          "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "state": {
                          "type": "array",
                          "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status": {
                                "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "reached",
                                  "failed"
                                ]
                              },
                              "when": {
                                "description": "The time this state was successfully reached or failed. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "service-reference": {
                                "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "instance-identifier"
                              },
                              "create-cb": {
                                "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "delete-cb": {
                                "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "pre-conditions": {
                                "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-monitor": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-trigger-expr": {
                                    "description": "(leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-actions": {
                                "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "true"
                                },
                                "properties": {
                                  "create-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "create-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-node": {
                                    "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-name": {
                                    "description": "The name of the action. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  },
                                  "delete-action-result-expr": {
                                    "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "string"
                                  }
                                }
                              },
                              "post-action-status": {
                                "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "not-reached",
                                "enum": [
                                  "not-reached",
                                  "create-reached",
                                  "delete-reached",
                                  "failed"
                                ]
                              },
                              "outformat": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "enumeration",
                                "default": "cli",
                                "enum": [
                                  "cli",
                                  "xml"
                                ]
                              },
                              "reverse": {
                                "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "[null]"
                              },
                              "deep": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "[null]"
                              },
                              "use-lsa": {
                                "description": "Force handling LSA nodes as such. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "[null]"
                              },
                              "private": {
                                "description": "Stores NCS service-related internal data. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "diff-set": {
                                    "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "forward-diff-set": {
                                    "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                    "x-yang": {
                                      "type": "leaf"
                                    },
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  "device-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "ned-id-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "string"
                                    }
                                  },
                                  "service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of services this state has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  },
                                  "lsa-service-list": {
                                    "type": "array",
                                    "x-yang": {
                                      "type": "leaf-list"
                                    },
                                    "items": {
                                      "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                      "type": "string",
                                      "format": "instance-identifier"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "private": {
                          "description": "Stores NCS service-related internal data. (non-presence)",
                          "type": "object",
                          "x-yang": {
                            "type": "container",
                            "is_presence": "false"
                          },
                          "properties": {
                            "property-list": {
                              "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                              "type": "object",
                              "x-yang": {
                                "type": "container",
                                "is_presence": "false"
                              },
                              "properties": {
                                "property": {
                                  "type": "array",
                                  "description": "(list)",
                                  "x-yang": {
                                    "type": "list"
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      },
                                      "value": {
                                        "description": "(leaf)",
                                        "x-yang": {
                                          "type": "leaf"
                                        },
                                        "type": "string",
                                        "format": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "back-track": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "boolean"
                        },
                        "back-track-goal": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "no-networking": {
                          "description": "Do not send any data to the devices. Even if the transaction\nmanipulates data below /devices/device/config, nothing will\nbe sent to the managed devices. This is a way to manipulate\nCDB in NCS without generating any southbound traffic. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "[null]"
                        },
                        "back-tracking-goal": {
                          "description": "Target state for back-track. (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "leafref"
                        },
                        "status-code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "commit-queue": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "queue-item": {
                        "type": "array",
                        "description": "(list)",
                        "x-yang": {
                          "type": "list"
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "If the queue item in the commit queue refers to this service, this is the queue number. (leaf)",
                              "x-yang": {
                                "type": "leaf"
                              },
                              "type": "integer",
                              "format": "uint64"
                            }
                          }
                        }
                      }
                    }
                  },
                  "failed": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "error-info": {
                    "description": "(presence)",
                    "type": "object",
                    "x-yang": {
                      "type": "container",
                      "is_presence": "true"
                    },
                    "properties": {
                      "message": {
                        "description": "An explanatory message for the failing plan. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "string"
                      },
                      "log-entry": {
                        "description": "Reference to a service log entry with additional information. (leaf)",
                        "x-yang": {
                          "type": "leaf"
                        },
                        "type": "string",
                        "format": "instance-identifier"
                      }
                    }
                  },
                  "deleting": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "[null]"
                  },
                  "service-location": {
                    "description": "(leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "instance-identifier"
                  },
                  "status-code-detail": {
                    "type": "array",
                    "description": "Status Codes (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "context-name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "context-msg": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "severity": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "INFO",
                          "enum": [
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "FATAL",
                            "NONE"
                          ]
                        },
                        "recommended-action": {
                          "description": "Recommended action to recover in case of error (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "plan-history": {
                "description": "(non-presence)",
                "type": "object",
                "x-yang": {
                  "type": "container",
                  "is_presence": "false"
                },
                "properties": {
                  "plan": {
                    "type": "array",
                    "description": "Every time the plan changes its structure (that is, a plan component is added or deleted, or a state is added or deleted in a plan component), a copy of the old plan is stored in the plan history list. (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "component": {
                          "type": "array",
                          "description": "A component has a type and a list of states. It is required that the first plan component is of the type ncs:self.  It is also required that the first state of a component is ncs:init and the last state is ncs:ready.  A service can have any number of components in addition to the 'self' component. These additional components will have types that are defined by user-specified YANG identities. (list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "type": {
                                "description": "The plan component type is defined by a YANG identity. It is used to identify the characteristics of a certain component. Therefore, if two components in the same service are of the same plan component type, they should be identical with respect to the number, type and order of their contained states. (leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "state": {
                                "type": "array",
                                "description": "A plan state represents a certain step that a service needs to execute or a stage that it needs to reach. It is identified as a YANG identity. There are two predefined states, 'ncs:init' and 'ncs:ready',  which are, respectively, the first and last state of a plan component. (list)",
                                "x-yang": {
                                  "type": "list"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "identityref"
                                    },
                                    "status": {
                                      "description": "A plan state is always in one of three states: 'not-reached' when the state has not been executed, 'reached' when the state has been executed, and 'failed' if the state execution failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "reached",
                                        "failed"
                                      ]
                                    },
                                    "when": {
                                      "description": "The time this state was successfully reached or failed. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "service-reference": {
                                      "description": "If this component reflects the state of some other data (such as an instantiated RFS, an instantiated CFS, or something else), this optional field can be set to point to that instance. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "instance-identifier"
                                    },
                                    "create-cb": {
                                      "description": "Indicates if and which type of create callback should be registered for this state. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "delete-cb": {
                                      "description": "Indicates if and which type of delete callback should be registered for this state. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "string"
                                    },
                                    "pre-conditions": {
                                      "description": "Pre-conditions for a state control whether or not a state should be executed. There are separate conditions for the 'create' and 'delete' cases. The 'create' conditions are checked and, if possible, executed with the ultimate goal for the state of having the status 'reached'. The 'delete' conditions control whether the state changes should be deleted with the ultimate goal of the state having status 'not-reached'. (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-monitor": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-trigger-expr": {
                                          "description": "(leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    },
                                    "post-actions": {
                                      "description": "Post-actions are called after successful execution of a state.  These are optional and there are separate actions that can be set for the 'create' and 'delete' case, respectively.\n\nThese actions are put as requests in the side-effect-queue and are executed asynchronously with respect to the original service transaction. (presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "true"
                                      },
                                      "properties": {
                                        "create-action-node": {
                                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "create-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-node": {
                                          "description": "This leaf identifies the node on which a specified action resides. This action is called after this state has got a 'not-reached' status. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-name": {
                                          "description": "The name of the action. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        },
                                        "delete-action-result-expr": {
                                          "description": "An action responds with a structured result. A certain value could indicate an error or a successful result, e.g. 'result true'.\n\nThis statement describes an XPath expression to evaluate the result of the action so that the side-effect-queue can indicate action errors.\n\nThe result of the expression is converted to a boolean using the standard XPath rules.  If the result is 'true' the action is reported as successful, otherwise as failed.\n\nThe context for evaluating this expression is the resulting XML tree of the action.\n\nThe set of namespace declarations are all available namespaces, with the prefixes defined in the modules. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "string"
                                        }
                                      }
                                    },
                                    "post-action-status": {
                                      "description": "This leaf is initially set to 'not-reached'.\n\nIf a post-action was specified, and returned successfully, this leaf will be set to 'create-reached' if the component is not backtracking, and 'delete-reached' if it is backtracking.\n\nIf the post-action did not return successfully, this leaf is set to 'failed'. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "not-reached",
                                      "enum": [
                                        "not-reached",
                                        "create-reached",
                                        "delete-reached",
                                        "failed"
                                      ]
                                    },
                                    "outformat": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "enumeration",
                                      "default": "cli",
                                      "enum": [
                                        "cli",
                                        "xml"
                                      ]
                                    },
                                    "reverse": {
                                      "description": "Show the modifications needed to 'reverse' the effect of\nthe service. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "[null]"
                                    },
                                    "deep": {
                                      "description": "(leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "[null]"
                                    },
                                    "use-lsa": {
                                      "description": "Force handling LSA nodes as such. (leaf)",
                                      "x-yang": {
                                        "type": "leaf"
                                      },
                                      "type": "string",
                                      "format": "[null]"
                                    },
                                    "private": {
                                      "description": "Stores NCS service-related internal data. (non-presence)",
                                      "type": "object",
                                      "x-yang": {
                                        "type": "container",
                                        "is_presence": "false"
                                      },
                                      "properties": {
                                        "diff-set": {
                                          "description": "Internal node use by NCS service manager to remember\nthe reverse diff for a service instance. This is the\ndata that is used by Fastmap (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "forward-diff-set": {
                                          "description": "Internal node that the NCS service manager uses to remember the forward diff for a service instance. This data is used to produce the proper 'get-modifications' output. (leaf)",
                                          "x-yang": {
                                            "type": "leaf"
                                          },
                                          "type": "string",
                                          "format": "binary"
                                        },
                                        "device-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of managed devices this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "ned-id-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of NED identities this service instance has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "string"
                                          }
                                        },
                                        "service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of services this state has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        },
                                        "lsa-service-list": {
                                          "type": "array",
                                          "x-yang": {
                                            "type": "leaf-list"
                                          },
                                          "items": {
                                            "description": "A list of LSA services this service instance has manipulated. (leaf-list)",
                                            "type": "string",
                                            "format": "instance-identifier"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "private": {
                                "description": "Stores NCS service-related internal data. (non-presence)",
                                "type": "object",
                                "x-yang": {
                                  "type": "container",
                                  "is_presence": "false"
                                },
                                "properties": {
                                  "property-list": {
                                    "description": "Fastmap service component instance data used by the\nservice implementation. (non-presence)",
                                    "type": "object",
                                    "x-yang": {
                                      "type": "container",
                                      "is_presence": "false"
                                    },
                                    "properties": {
                                      "property": {
                                        "type": "array",
                                        "description": "(list)",
                                        "x-yang": {
                                          "type": "list"
                                        },
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            },
                                            "value": {
                                              "description": "(leaf)",
                                              "x-yang": {
                                                "type": "leaf"
                                              },
                                              "type": "string",
                                              "format": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "back-track": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "boolean"
                              },
                              "back-track-goal": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "identityref"
                              },
                              "status-code": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "status-code-detail": {
                    "type": "array",
                    "description": "Status Codes (list)",
                    "x-yang": {
                      "type": "list"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "identityref"
                        },
                        "name": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "code": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        },
                        "context": {
                          "type": "array",
                          "description": "(list)",
                          "x-yang": {
                            "type": "list"
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "context-name": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              },
                              "context-msg": {
                                "description": "(leaf)",
                                "x-yang": {
                                  "type": "leaf"
                                },
                                "type": "string",
                                "format": "string"
                              }
                            }
                          }
                        },
                        "severity": {
                          "description": "(leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "enumeration",
                          "default": "INFO",
                          "enum": [
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "FATAL",
                            "NONE"
                          ]
                        },
                        "recommended-action": {
                          "description": "Recommended action to recover in case of error (leaf)",
                          "x-yang": {
                            "type": "leaf"
                          },
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "cisco-flat-L3vpn-fp:cfp-configurations": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "dynamic-device-mapping": {
              "type": "array",
              "description": "Dynamic Device Mapping (list)",
              "x-yang": {
                "type": "list"
              },
              "items": {
                "type": "object",
                "properties": {
                  "ned-id": {
                    "description": "Device NED ID, eg ned:netconf (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  },
                  "python-impl-class-name": {
                    "description": "Device Python implementation class, eg module.class (leaf)",
                    "x-yang": {
                      "type": "leaf"
                    },
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "l3vpn-validation-enabled": {
              "description": "If set to true, the following validations are done for the L3vpn service: All the endpoint interfaces are available on the endpoint. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "l3vpn-device-error-validation-enabled": {
              "description": "If set to true, following validations are done for l3vpn service:\n1. Check if RD change will be accepted by endpoint. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "local-user": {
              "description": "The NCS user with sufficient permissions to write config data (leaf).",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "auto-cleanup": {
              "description": "When a device is down and this flag is set to true, on deletion of the device from the service, all data pertaining to this device will be removed automatically, using no-networking. This means the user must take care of  configuration cleanup on the device. If it is set to false, the user must run cleanup actions to remove this device from the service. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            },
            "iosxr-default-ned-id": {
              "description": "NED ID of the default IOSXR Device. (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
          }
        },
        "cisco-flat-L3vpn-fp:flat-L3vpn-actions": {
          "description": "(non-presence)",
          "type": "object",
          "x-yang": {
            "type": "container",
            "is_presence": "false"
          },
          "properties": {
            "service": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "device": {
              "description": "Clean up L3vpn service configuration for a given device (leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "string"
            },
            "no-networking": {
              "description": "(leaf)",
              "x-yang": {
                "type": "leaf"
              },
              "type": "string",
              "format": "boolean"
            }
          }
        }
      }
    },
    "data": {
      "type": "object",
      "properties": {
        "ietf-restconf:data": {
          "type": "object",
          "description": "This resource represents the combined configuration and state data resources that can be accessed by a client and cannot be created or deleted by the client. See RESTCONF RFC 8040 for further information.",
          "x-yang": {
            "type": "datastore"
          },
          "properties": {
          }
        }
      }
    }
  }
}
