{
  "swagger": "2.0",
  "info": {
    "title": "proto/cw_ztp_device.proto",
    "version": "2.0.0"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/devices": {
      "delete": {
        "summary": "Delete ZTP devices in bulk. To identify the devices to delete, pass the UUID of each device. Only devices with valid UUIDs will be deleted. Response message will give information about devices which are not deleted. Request Body: ZtpDeviceList. Valid \\\"UUID\\\" is required to delete a device. Response Body: ZtpDeviceResponse.",
        "operationId": "DeleteDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceList"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      },
      "post": {
        "summary": "Add ZTP devices in bulk. Either all devices will be added or none. Request Body: ZtpDeviceList. Response Body: ZtpDeviceResponse. DEPRECATED Attribute: providerDeviceKey.\nA valid \"Host Name\",\"enableOption82\",\"Credential Profile\", \"OS Platform\" and either \"Remote Id, Circuit Id\" if enableOption82 is true or \"Serial Number\" if enableOption82 is false are required to add a device.",
        "operationId": "SetDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceList"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      },
      "put": {
        "summary": "Update a specified ZTP device when the device status is \\\"unprovisioned\\\" only.  Request Body: ZtpDevice.  Response Body: ZtpDeviceResponse. DEPRECATED Attribute: providerDeviceKey.\nA valid \"Host Name\",\"enableOption82\",\"Credential Profile\", \"OS Platform\" and either \"Remote Id, Circuit Id\" if enableOption82 is true or \"Serial Number\" if enableOption82 is false are required to update a device.",
        "operationId": "UpdateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevice"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      },
      "patch": {
        "summary": "Update a specified ZTP device when the device status is \\\"inprogress\\\", \\\"provisioned\\\",  \\\"ztpError\\\", \\\"provisioningError\\\" or \\\"onboardingError\\\". Request Body: ZtpDevice. Response Body: ZtpDeviceResponse. DEPRECATED Attribute: providerDeviceKey.\nA valid \\\"UUID\\\" or either \"Remote Id, Circuit Id\" if enableOption82 is true or \"Serial Number\" if enableOption82 is false are required to update a device.",
        "operationId": "UpdateDeviceStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevice"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/devices/csvtemplate": {
      "post": {
        "summary": "Get the ZTP device headers with sample data in CSV format. Pass an empty device like  \\\"{}\\\". Request Body: ZtpDevice. Response Body: ZtpDeviceResponse.",
        "operationId": "ZtpsampleService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevice"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/devices/export": {
      "post": {
        "summary": "Export the list of ZTP devices in CSV form. Pass a list of deviceids to export specific devices, or pass an empty device list to export all devices. Request Body: ZtpDeviceExportReq. Response Body: ZtpDeviceResponse.",
        "operationId": "ExportDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceExportReq"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/devices/import": {
      "post": {
        "summary": "Add ZTP devices in bulk by importing a CSV file. Request Body: ZtpImport (the body must contain the base64-encoded content of the CSV file). Response Body: ZtpDeviceResponse. DEPRECATED Attribute: providerDeviceKey",
        "operationId": "ImportDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpImport"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/devices/policies/query": {
      "post": {
        "summary": "Retrieves a list of policies that apply on ZTP devices. Pass an empty device like this: \\\"{}\\\". Request Body: ZtpDevicePolicyRequest. Response Body: ZtpDevicePolicyResponse.",
        "operationId": "GetDevicesPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevicePolicyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevicePolicyRequest"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/devices/query": {
      "post": {
        "summary": "Retrieves a list of ZTP devices. This API returns complete data for each device. You can apply filters to retrieve specific sets of devices by specifying one or more fields on which to match. You can also filter on combinations of supported fields. This API takes ZtpDeviceRequest as input, which you can use to specify the Filter input.",
        "operationId": "GetDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceRequest"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/onboarding": {
      "post": {
        "summary": "Onboards a specified device from ZTP to Crosswork Device Lifecycle Management (DLM) upon completion of the the ZTP provisioning process. A valid \\\"Serial Number\\\", \\\"UUID\\\" and \\\"Host Name\\\" is required to onboard a ZTP device. Request Body: ZtpDevice. Response Body: ZtpDeviceResponse. DEPRECATED Attribute: providerDeviceKey.",
        "operationId": "OnboardDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevice"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    },
    "/v1/query/count": {
      "post": {
        "summary": "Get the total number of devices, profiles and devices with respective status. Pass an empty device like  \\\"{}\\\". Request Body: ZtpDevice. Response Body: ZtpCountResponse.",
        "operationId": "GetZtpCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpCountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cwztpsvcZtpDevice"
            }
          }
        ],
        "tags": [
          "cwztpdevice"
        ]
      }
    }
  },
  "definitions": {
    "cwztpsvcConnectivityDetail": {
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string",
          "description": "The protocol for this connectivity type."
        },
        "inetAddr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cwztpsvcZtpInetAddr"
          },
          "description": "The IPv4/IPv6 address for this connectivity type."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "The port for this connectivity type."
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "description": "The timeout for this connectivity type."
        }
      }
    },
    "cwztpsvcProviderInfo": {
      "type": "object",
      "properties": {
        "providerName": {
          "type": "string",
          "title": "The name of the Crosswork Provider. Should be unique"
        },
        "providerDeviceKey": {
          "type": "string",
          "title": "Deprecated attribute from Crosswork 3.2.2 release"
        }
      }
    },
    "cwztpsvcSecureZtpInfo": {
      "type": "object",
      "properties": {
        "preConfig": {
          "type": "string",
          "description": "The unique ID of the associated pre-configuration file."
        },
        "postConfig": {
          "type": "string",
          "description": "The unique ID of the associated post-configuration file."
        },
        "preConfigName": {
          "type": "string"
        },
        "postConfigName": {
          "type": "string"
        },
        "isPreConfigInvalid": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag to check if ZTP device is in sync with preConfigName."
        },
        "isPostConfigInvalid": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag to check if ZTP device is in sync with postConfigName."
        },
        "isEncrypted": {
          "type": "string",
          "description": "Flag to check if ZTP device is data should be encrypted."
        }
      },
      "title": "Secure ZTP info"
    },
    "cwztpsvcZtpCountResponse": {
      "type": "object",
      "properties": {
        "totalprofilecount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of ZTP profiles."
        },
        "totaldevicecount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of ZTP devices."
        },
        "totalsztpdevicecount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of secure ZTP devices."
        },
        "totalnonsztpdevicecount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of non secure ZTP devices."
        },
        "statuscountmap": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "A map of status and respective count of devices."
        },
        "code": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ZTP response for Device and Profile count"
    },
    "cwztpsvcZtpDevice": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Unique device identifier. If a UUID is not passed, it is randomly generated by Crosswork."
        },
        "hostName": {
          "type": "string",
          "description": "The device Host name."
        },
        "serialNumber": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The device Serial Number(s)."
        },
        "credentialProfile": {
          "type": "string",
          "title": "REQUIRED: The name of the Credential Profile applicable to this device"
        },
        "ipAddress": {
          "$ref": "#/definitions/cwztpsvcZtpInetAddr",
          "title": "IP address od device"
        },
        "macAddress": {
          "type": "string",
          "description": "The chassis backplane MAC address."
        },
        "osPlatform": {
          "type": "string",
          "description": "The OS Platform of the associated image and configuration file."
        },
        "version": {
          "type": "string",
          "description": "The Version of the associated image and configuration file."
        },
        "deviceFamily": {
          "type": "string",
          "description": "The Device Family of the associated image and configuration file."
        },
        "image": {
          "type": "string",
          "description": "The unique ID of the associated image file."
        },
        "config": {
          "type": "string",
          "description": "The unique ID of the associated day0-configuration file."
        },
        "profileName": {
          "type": "string",
          "description": "The name of the ZTP profile associated with the device."
        },
        "status": {
          "type": "string",
          "title": "The ZTP device status. Supported status values are \\\"Unprovisioned\\\", \\\"InProgress\\\", \\\"Provisioned\\\", \\\"ProvisioningError\\\", \\\"ZtpError\\\", \\\"Onboarded\\\", and \\\"OnboardingError\\\""
        },
        "providerInfo": {
          "$ref": "#/definitions/cwztpsvcProviderInfo",
          "description": "Data for the Crosswork Provider."
        },
        "connectivityDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cwztpsvcConnectivityDetail"
          },
          "description": "List of device connectivity types."
        },
        "message": {
          "type": "string",
          "description": "Device onboarding status messages."
        },
        "lastUpdated": {
          "type": "string",
          "format": "int64",
          "title": "TimeInMillis when device was last updated/created"
        },
        "imageName": {
          "type": "string"
        },
        "configName": {
          "type": "string"
        },
        "isImageInvalid": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag to check if the ZTP device is in sync with the associated image file."
        },
        "isConfigInvalid": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag to check if the ZTP device is in sync with the associated configuration file."
        },
        "additionalAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of device attributes that are added as part of policy data."
        },
        "inventoryId": {
          "type": "string",
          "description": "Device Inventory ID. Supported starting with the Crosswork 3.2.2 release."
        },
        "isSecureZtp": {
          "type": "string",
          "title": "flag to identify if device is secure or classic"
        },
        "secureZtpInfo": {
          "$ref": "#/definitions/cwztpsvcSecureZtpInfo",
          "title": "Secure ztp details"
        },
        "configAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra config attributes from config script"
        },
        "enableOption82": {
          "type": "string",
          "title": "Flag to identify if device is identified by location params or serial"
        },
        "remoteId": {
          "type": "string",
          "title": "Location identifier params"
        },
        "circuitId": {
          "type": "string"
        }
      }
    },
    "cwztpsvcZtpDeviceExportReq": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "cwztpsvcZtpDeviceList": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cwztpsvcZtpDevice"
          }
        }
      }
    },
    "cwztpsvcZtpDevicePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "unique identifier"
        },
        "policyFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "all the policy fields"
        },
        "existingAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "policy attributes that are exits in ztp"
        },
        "newAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "policy attributes that are added to ztp"
        }
      }
    },
    "cwztpsvcZtpDevicePolicyRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/cwztpsvcZtpDevicePolicy"
        },
        "filterData": {
          "$ref": "#/definitions/cwztpsvcZtpFilterData"
        },
        "criteria": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "cwztpsvcZtpDevicePolicyResponse": {
      "type": "object",
      "properties": {
        "policydata": {
          "$ref": "#/definitions/cwztpsvcZtpDevicePolicy"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "cwztpsvcZtpDeviceRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/cwztpsvcZtpDevice"
        },
        "filterData": {
          "$ref": "#/definitions/cwztpsvcZtpFilterData"
        },
        "criteria": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "cwztpsvcZtpDeviceResponse": {
      "type": "object",
      "properties": {
        "ztpnodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cwztpsvcZtpDevice"
          }
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "paginationDetails": {
          "$ref": "#/definitions/cwztpsvcZtpFilterData"
        }
      }
    },
    "cwztpsvcZtpFilterData": {
      "type": "object",
      "properties": {
        "SortBy": {
          "type": "string"
        },
        "PageSize": {
          "type": "integer",
          "format": "int64"
        },
        "PageNum": {
          "type": "integer",
          "format": "int64"
        },
        "Descending": {
          "type": "boolean",
          "format": "boolean"
        },
        "MatchCase": {
          "type": "boolean",
          "format": "boolean"
        },
        "Criteria": {
          "type": "string"
        },
        "TotalCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "cwztpsvcZtpImport": {
      "type": "object",
      "properties": {
        "b64Content": {
          "type": "string",
          "title": "encoded base64 content"
        },
        "isDryRun": {
          "type": "boolean",
          "format": "boolean",
          "title": "validate only device fields"
        }
      }
    },
    "cwztpsvcZtpInetAddr": {
      "type": "object",
      "properties": {
        "inetAddressFamily": {
          "type": "string"
        },
        "ipaddrs": {
          "type": "string"
        },
        "mask": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "device ip address"
    }
  }
}
