{
  "swagger": "2.0",
  "info": {
    "title": "Crosswork Change Automation Web Server",
    "version": "1.0.0",
    "contact": {
      "name": "Crosswork Team, Cisco",
      "email": "support@cisco.com"
    },
    "license": {
      "name": "Cisco Software License Agreement",
      "url": "http://www.cisco.com/public/sw-license-agreement.html"
    },
    "description": "A web server dedicated to RESTful queries into the Crosswork Change Automation application"
  },
  "basePath": "/crosswork/nca",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/mopjobs": {
      "get": {
        "summary": "Get MoP execution job status. A request can be filtered by MoP ID and device name.",
        "operationId": "GetMopJobs",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopJobsReadResp"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Denotes the number of mopjobs per page requested by user",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "default": 10
          },
          {
            "name": "page",
            "description": "The page number of the result. The page number minus 1 and multiplied by the limit determines the offset from which records are returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "default": 1
          },
          {
            "name": "mop_id",
            "description": "Filter the results by mop_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device_id",
            "description": "Filter the results by device_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Filter the results by status",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NCA"
        ]
      },
      "post": {
        "summary": "Schedule a MoP execution job with custom execution parameters",
        "operationId": "PostMopJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Specify parameters for the mopjob post",
            "required": false,
            "schema": {
              "$ref": "#/definitions/change_automationMopJobCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopJobCreateResp"
            }
          },
          "400": {
            "description": "Bad Request. The request is malformed in some way and the server cannot process it.",
            "schema": {
              "$ref": "#/definitions/change_automationError400"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "tags": [
          "NCA"
        ]
      },
      "patch": {
        "summary": "Patch a MoP execution job",
        "description": "A patch request can either roll back or run a task",
        "operationId": "PatchMopJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Specify parameters for mopjob patch",
            "required": false,
            "schema": {
              "$ref": "#/definitions/change_automationMopJobUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopJobUpdateResp"
            }
          },
          "400": {
            "description": "Bad Request. The request is malformed in some way and the server cannot process it.",
            "schema": {
              "$ref": "#/definitions/change_automationError400"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mopjobs/abort": {
      "post": {
        "summary": "Abort one, multiple, or all mopjobs",
        "operationId": "PostMopJobsAbort",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Specify parameters for mopjob abort",
            "required": false,
            "schema": {
              "$ref": "#/definitions/change_automationMopJobsAbortReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopJobsAbortResp"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mopjobs/events": {
      "get": {
        "summary": "Get MoP events",
        "description": "API to retrieve the MoP events. The events can be filtered by device name, event time and mopjob ID",
        "operationId": "GetMopJobEvents",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopJobEventsReadResp"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Denotes the number of mopjob events per page requested by the user",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "default": 10
          },
          {
            "name": "page",
            "description": "The page number of the result. The page number minus 1 and multiplied by the limit determines the offset from which records are returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "default": 1
          },
          {
            "name": "types",
            "description": "The types of event requested. If not set, query execution will yield all event types.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONSOLE",
                "GENERIC",
                "MOP_TASK",
                "NODE_STATUS_UPDATE",
                "WAE_RESULT",
                "MOP_STATUS",
                "MOP_PAUSED",
                "MOP_CONFIG",
                "CONT_CHECK_RESULT",
                "SYSLOG_STATUS"
              ]
            }
          },
          {
            "name": "after",
            "description": "Event time filter. Only events with a timestamp greater than or equal to this filter value will be returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "before",
            "description": "Event time filter. Only events with a timestamp less than this filter value will be returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "device_id",
            "description": "ID of the device for which events are requested",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "execution_id",
            "description": "ExecutionId of the MoP for which the user wants events",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reverse",
            "description": "If this flag is set to true,  events will be returned in reverse chronological order (newest first). By default, the flag is set false, returning events in chronological order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mopjobs/{execution_id}": {
      "get": {
        "summary": "Get MoP execution job status by ID",
        "operationId": "GetMopJob",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopJobsReadResp"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "name": "execution_id",
            "description": "Executionid of the mopjob",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mops": {
      "get": {
        "summary": "Retrieve mops",
        "description": "The API currently supports retrieving all MoPs or only those that match one or more filters. Default behavior is to fetch all MoPs.",
        "operationId": "GetMops",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopsReadResp"
            }
          },
          "400": {
            "description": "Bad Request. The request is malformed in some way and the server cannot process it.",
            "schema": {
              "$ref": "#/definitions/change_automationError400"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Denotes the number of MoPs per page requested by user.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "default": 10
          },
          {
            "name": "page",
            "description": "The page number of the result. The page number minus 1 and multiplied by the limit value determines the offset from which records are returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "default": 10
          },
          {
            "name": "filter.name",
            "description": "The key on which the users wishes to filter the search.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "mop_name"
            ],
            "default": "none"
          },
          {
            "name": "filter.value",
            "description": "Value for filter.name. The value is applied in a partial string search on the filter.name field. Wildcard  search is not supported. For example: If the filter.value is set to 'interface', the API will return all MoPs containing 'interface' in their names.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mops/delete": {
      "delete": {
        "summary": "Delete one or more custom MoPs. Only user-created custom MoPs can be deleted.",
        "operationId": "DeleteMops",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopsDeleteResp"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "mops",
            "description": "List of MoP IDs to be deleted.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mops/export": {
      "post": {
        "summary": "Export one or more MoPs as a tar.gz archive",
        "operationId": "PostMopsExport",
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopsExportResponse"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "mops",
            "description": "List of MoP IDs to be exported",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "router_op_interface"
              }
            }
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mops/import": {
      "post": {
        "summary": "Import a tar.gz archive with files needed to create or update a custom MoP",
        "operationId": "PostMopsImport",
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopsImportResp"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "in": "formData",
            "name": "import",
            "description": "A tar.gz archive containing one or more playbooks, parameters, specs and sample files",
            "type": "file"
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mops/{mop_id}": {
      "get": {
        "summary": "Retrieve a MoP by its ID",
        "operationId": "GetMop",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopsReadResp"
            }
          },
          "400": {
            "description": "Bad Request. The request is malformed in some way and the server cannot process it.",
            "schema": {
              "$ref": "#/definitions/change_automationError400"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "name": "mop_id",
            "description": "ID of the MoP which is requested. ID is a unique value that is assigned to each MoP when it is on-boarded. If specified, mop_id field takes precedence over additional filters. This field requires absolute value. For partial searches in mop_name filters, use /v1/mops",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/mops/{mop_id}/specs": {
      "get": {
        "summary": "Get the specs for a MoP",
        "description": "Get the parameters specs and execution policy specs for one or more playbooks.",
        "operationId": "GetMopSpecs",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationMopSpecsReadResp"
            }
          },
          "400": {
            "description": "Bad Request. The request is malformed in some way and the server cannot process it.",
            "schema": {
              "$ref": "#/definitions/change_automationError400"
            }
          },
          "500": {
            "description": "Internal Server Error. The server could not fulfill the request.",
            "schema": {
              "$ref": "#/definitions/change_automationError500"
            }
          }
        },
        "parameters": [
          {
            "name": "mop_id",
            "description": "ID of the MoP for which specs files are needed. The API will return an error if the mop_id is not specified.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NCA"
        ]
      }
    },
    "/v1/servicestatus": {
      "get": {
        "summary": "Get the service state of Change Automation",
        "operationId": "GetServiceState",
        "responses": {
          "200": {
            "description": "OK. The request was successful. The result is contained in the response body.",
            "schema": {
              "$ref": "#/definitions/change_automationServiceStatusReadResp"
            }
          }
        },
        "tags": [
          "NCA"
        ]
      }
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [{
    "bearerAuth": []
  }],
  "definitions": {
    "FilterFilterKeys": {
      "type": "string",
      "enum": [
        "none",
        "mop_name"
      ],
      "default": "none"
    },
    "MopExecutionPolicyExecStrategyType": {
      "type": "string",
      "enum": [
        "STRATEGY_CONTINUOUS",
        "STRATEGY_SINGLE_STEP",
        "STRATEGY_DRY_RUN"
      ],
      "default": "STRATEGY_CONTINUOUS"
    },
    "MopExecutionPolicyOnFailureActionType": {
      "type": "string",
      "enum": [
        "ON_FAILURE_PAUSE",
        "ON_FAILURE_COMPLETE_ROLLBACK",
        "ON_FAILURE_ABORT"
      ],
      "default": "ON_FAILURE_COMPLETE_ROLLBACK"
    },
    "MopJobUpdateReqOpType": {
      "type": "string",
      "enum": [
        "OP_ROLLBACK",
        "OP_RESUME",
        "OP_ABORT"
      ],
      "default": "OP_ROLLBACK"
    },
    "MopsReadReqFilter": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/FilterFilterKeys",
          "description": "The key or keys on which to filter the search"
        },
        "value": {
          "type": "string",
          "title": "Value for filter.name. The value is applied in a partial string search on the filter.name field. Wildcard search is not supported. For example, if the value is 'interface', it will retrieve all MoPs which contain 'interface' in their names."
        }
      }
    },
    "ServiceStatusReadRespState": {
      "type": "string",
      "enum": [
        "NOSERVICE",
        "LIMITEDSERVICE",
        "FULLSERVICE"
      ],
      "default": "NOSERVICE",
      "example": "LIMITEDSERVICE",
      "description": " - NOSERVICE: NOSERVICE indicates that one or more critical services are unreachable. No operations are supported in Change Automation. \n - LIMITEDSERVICE: LIMITEDSERVICE indicates that one or more optional Change Automation components are unreachable. When in this state, Change Automation will\nprovide full read support. Users can schedule execution requests but some functionality may be missing. \n - FULLSERVICE: FULLSERVICE indicates that Change Automation is in full service mode. All supported functions are running."
    },
    "change_automationAbortResp": {
      "type": "object",
      "properties": {
        "execution_id": {
          "type": "string",
          "title": "Execution ID of the mopjob for which the abort request was processed",
          "example": "1551564779743-96e7706f-c393-485d-9f52-4450bae80ab1"
        },
        "status": {
          "$ref": "#/definitions/change_automationRequestStatus",
          "title": "Status of the abort request. The status only reflects whether the request was accepted or rejected. Even if a request is ACCEPTED, the abort request may not be processed if the MoP has already run to completion."
        },
        "message": {
          "type": "string",
          "title": "In case of request rejection, the message field provides more details",
          "example": "abort request accepted"
        }
      }
    },
    "change_automationModifiedMop": {
      "type": "object",
      "properties": {
        "mop_id": {
          "type": "string",
          "description": "Unique identifier for a MoP.",
          "example": "sample_playbook"
        },
        "message": {
          "type": "string",
          "description": "Message describes why the MoP modification failed or suceeded",
          "example": "Operation successful"
        },
        "status": {
          "$ref": "#/definitions/change_automationModifiedMopStatus"
        }
      }
    },
    "change_automationModifiedMopStatus": {
      "type": "string",
      "enum": [
        "SUCCEEDED",
        "FAILED"
      ],
      "example": "SUCCEEDED",
      "description": " - SUCCEEDED: SUCCEEDED indicates that the requested modification succeeded.\n - FAILED: FAILED indicates that the requested modification failed."
    },
    "change_automationMop": {
      "type": "object",
      "properties": {
        "mop_id": {
          "type": "string",
          "title": "The mop_id is the unique identifier for a Playbook, which is the name of the Playbook file without the extension. For example: The mop_id for a Playbook file named \"router_op_interface.yaml\" will be \"router_op_interface\"",
          "example": "router_op_interface"
        },
        "mop_version": {
          "type": "string",
          "title": "The mop_version is the version specified by the user in the Playbook's metadata",
          "example": "1.0.0"
        },
        "name": {
          "type": "string",
          "title": "A user-specified name string for the Playbook. For example: \"Interface state change\".",
          "example": "Interface State change"
        },
        "description": {
          "type": "string",
          "title": "An optional description for the Playbook, as specified by the user",
          "example": "Change line card interface(s) state to up/down"
        },
        "sw_platform": {
          "type": "string",
          "title": "Software platform on which the Playbook can be run, e.g. \"IOS-XR\"",
          "example": "IOS XR"
        },
        "sw_version": {
          "type": "string",
          "title": "Software version(s) for which the Playbook is supported, e.g. \"6.2.1\". This field can be a comma-separated list. A single value denotes that this is the minimum supported version.",
          "example": "6.2.1"
        },
        "hw_platform": {
          "type": "string",
          "title": "Hardware platform on which the Playbook is supported"
        },
        "pb_file_name": {
          "type": "string",
          "description": "Playbook file name. Each MoP corresponds to one Playbook file.",
          "example": "router_op_interface.yaml"
        },
        "pb_exec_policy_file_name": {
          "type": "string",
          "description": "Playbook execution policy spec file name",
          "example": "pb_execution_policy_specs.json"
        },
        "pb_params_sample_file_name": {
          "type": "string",
          "description": "Parameters sample file name. The sample file contains a sample of UI parameters and what they look like."
        },
        "pb_params_spec_file_name": {
          "type": "string",
          "description": "Parameters specifications file name. It contains specifications for all the parameters the Playbook needs.",
          "example": "router_op_interface_specs.json"
        },
        "min_nodes": {
          "type": "integer",
          "format": "uint32",
          "title": "Minimum number of nodes that need to be specifed for this Playbook. If 0, the UI will not enforce node selection.",
          "example": 1
        },
        "max_nodes": {
          "type": "integer",
          "format": "uint32",
          "title": "Maximum number of nodes that can be be specified for this Playbook. If 0, the UI will not enforce any upper bound.",
          "example": 1
        },
        "parsed_pb": {
          "$ref": "#/definitions/change_automationPlaybookPhases",
          "title": "A detailed task-level breakdown of the Playbook. This field is populated if the parse boolean flag is set to TRUE in the incoming request."
        },
        "is_custom": {
          "type": "boolean",
          "format": "boolean",
          "title": "Flag indicating if this is a custom, or user-defined MoP.",
          "example": false
        },
        "user": {
          "type": "string",
          "title": "The user or organization that created this MoP",
          "example": "cisco"
        },
        "created_at": {
          "type": "string",
          "format": "uint64",
          "description": "Time at which a custom MoP was created",
          "example": 1551582041
        }
      }
    },
    "change_automationMopExecutionPolicy": {
      "type": "object",
      "properties": {
        "execution_strategy": {
          "$ref": "#/definitions/MopExecutionPolicyExecStrategyType",
          "title": "Type of execution of the Playbook"
        },
        "pause_on_tasks": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint32"
          },
          "default": [],
          "description": "IDs of the tasks on which the execution should pause when in single-stepping mode"
        },
        "on_failure": {
          "$ref": "#/definitions/MopExecutionPolicyOnFailureActionType",
          "description": "Action that the user wishes to take on task failure"
        },
        "collect_syslog": {
          "type": "boolean",
          "format": "boolean",
          "title": "Denotes whether to collect device syslogs or not"
        }
      }
    },
    "change_automationMopJob": {
      "type": "object",
      "properties": {
        "execution_id": {
          "type": "string",
          "title": "A unique ID to track the execution of the MoP",
          "example": "1551582040666-98c874d9-711c-4102-90c5-7edd127660a0"
        },
        "mop_id": {
          "type": "string",
          "title": "ID of the MoP to be executed",
          "example": "router_op_interface"
        },
        "check_start_time": {
          "type": "string",
          "format": "uint64",
          "title": "Time at which pre-checks should start during MoP execution. The default is equal to the value of the execution start time.",
          "example": 1551582041
        },
        "exec_start_time": {
          "type": "string",
          "format": "uint64",
          "title": "The time at which the actual execution should begin. The default is NOW.",
          "example": 1551582041
        },
        "execution_params": {
          "type": "string",
          "title": "String representation of the JSON object that denotes the execution parameters that were applied to the mopjob instance",
          "example": "{\"admin_state\":\"up\",\"collection_type\":\"telemetry\",\"grafana_graphs\":[\"interface-stats\"],\"if_names\":[\"GigabitEthernet0/0/0/0\"],\"mop_timeout\":\"1h\",\"provider\":\"Nso\"}"
        },
        "execution_policy": {
          "$ref": "#/definitions/change_automationMopExecutionPolicy"
        },
        "device_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "RouterFremont"
          },
          "description": "List of devices on which the MoP is executed"
        },
        "status": {
          "type": "string",
          "title": "Current status of the MoP execution",
          "example": "SUCCEEDED"
        },
        "exec_end_time": {
          "type": "string",
          "format": "uint64",
          "title": "The time at which MoP execution was completed. This field ispopulated only after execution is complete.",
          "example": 1551582194
        },
        "schedule_time": {
          "type": "string",
          "format": "uint64",
          "title": "Time at whichthe MoP was scheduled for execution via Crosswork infrastructure",
          "example": 1551582040
        },
        "update_time": {
          "type": "string",
          "format": "uint64",
          "title": "The update_time is a rolling field which stores the time of the latest update to the mopjob instance. It can be a reflection of any of the time fields.",
          "example": 1551582194
        },
        "update_desc": {
          "type": "string",
          "title": "The update_desc parameter contains the description of the rolling update_time field. For example: When update_time  reflects schedule_time, update_desc can contain something like, \"Time at which mopjob was scheduled\"",
          "example": "Mopjob execution finish time"
        },
        "submitter": {
          "type": "string",
          "title": "The ID of the user who submitted the request",
          "example": "admin"
        }
      }
    },
    "change_automationMopJobCreateReq": {
      "type": "object",
      "properties": {
        "mop_id": {
          "type": "string",
          "title": "ID of the MoP to be executed",
          "example": "router_op_interface"
        },
        "check_start_time": {
          "type": "integer",
          "format": "uint64",
          "title": "Time at which pre-checks should start for the MoP execution. The default is the execution start time.",
          "example": 0
        },
        "exec_start_time": {
          "type": "integer",
          "format": "uint64",
          "title": "Time at which maintenance phase execution should begin. The default is NOW.",
          "example": 0
        },
        "execution_params": {
          "type": "object",
          "format": "uint64",
          "title": "JSON object execution parameters for the Playbook",
          "example": {"admin_state": "up", "if_names": ["GigabitEthernet0/0/0/0"], "provider": "Nso", "collection_type": "telemetry", "mop_timeout": "1h"}
        },
        "execution_policy": {
          "type": "object",
          "description": "JSON object specifying the execution policy for the Playbook",
          "$ref": "#/definitions/change_automationMopExecutionPolicy"
        },
        "device_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "RouterFremont"
          },
          "minItems": 1,
          "description": "List of devices on which the MoP is to be executed"
        }
      }
    },
    "change_automationMopJobCreateResp": {
      "type": "object",
      "properties": {
        "execution_id": {
          "type": "string",
          "title": "A unique ID to track the execution of the MoP",
          "example": "1551564779743-96e7706f-c393-485d-9f52-4450bae80ab1"
        },
        "status": {
          "type": "string",
          "title": "Current status of the MoP execution",
          "example": "SCHEDULED"
        },
        "schedule_time": {
          "type": "string",
          "format": "uint64",
          "title": "Time at which the MoP was scheduled for execution via Crosswork infrastructure",
          "example": 1551599979
        },
        "update_time": {
          "type": "string",
          "format": "uint64",
          "title": "Update time is a rolling field which stores the time of the latest update to the mopjob instance. It can be a reflection of any of the time fields.",
          "example": 1551599979
        },
        "update_desc": {
          "type": "string",
          "title": "The update_desc field contains the description of the rolling update_time field. For example: When update_time  reflects schedule_time, the update_desc can contain something like, \"Time at which mopjob was scheduled\"",
          "example": "Mopjob execution request queued for execution. Execution scheduled to start at: 2019-03-03 07:59:39 +0000 UTC"
        },
        "submitter": {
          "type": "string",
          "description": "The ID of the user who submitted the request",
          "example": "admin"
        }
      }
    },
    "change_automationMopJobEventsReadResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of JSON formatted events which match all the input criteria"
        }
      }
    },
    "change_automationMopJobTaskReadResp": {
      "type": "object",
      "properties": {
        "execution_id": {
          "type": "string",
          "title": "Execution ID for which the tasks were requested"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationMopTask"
          },
          "title": "An array of all the MoP tasks returned for the user query"
        }
      }
    },
    "change_automationMopJobUpdateReq": {
      "type": "object",
      "properties": {
        "execution_id": {
          "type": "string",
          "title": "The execution ID of the mopjob being patched",
          "example": "1551564779743-96e7706f-c393-485d-9f52-4450bae80ab1"
        },
        "task_id": {
          "type": "integer",
          "format": "uint32",
          "title": "The ID of the task within the execution instance which is being patched"
        },
        "op": {
          "title": The operation that the user wants this request to perform",
          "$ref": "#/definitions/MopJobUpdateReqOpType"
        },
        "rollback_to_task": {
          "type": "integer",
          "format": "uint32",
          "title": "The ID of the task to which the user wants to roll back. A value of 1 will roll back to the beginning of the Playbook.",
          "default": 1,
          "example": 1
        },
        "run_params": {
          "type": "object",
          "description": "JSON object containing parameters to be applied to the task before running, if \"op resume\" is selected",
          "default": {}
        }
      },
      "required": ["execution_id", "task_id", "op"]
    },
    "change_automationMopJobUpdateResp": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/change_automationRequestStatus",
          "title": "Status of the patch request. The status only reflects whether the request was accepted or rejected, based on the input parameters."
        },
        "message": {
          "type": "string",
          "title": "The message field contains more details in cases where the request was rejected"
        }
      }
    },
    "change_automationMopJobsAbortReq": {
      "type": "object",
      "properties": {
        "execution_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1551564779743-96e7706f-c393-485d-9f52-4450bae80ab1"
          }
        }
      }
    },
    "change_automationMopJobsAbortResp": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationAbortResp"
          }
        }
      }
    },
    "change_automationMopJobsReadResp": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationMopJob"
          },
          "title": "List of mopjobs that were retrieved as a result of the query"
        }
      }
    },
    "change_automationMopSpecsReadResp": {
      "type": "object",
      "properties": {
        "mop_id": {
          "type": "string",
          "title": "ID of the Playbook",
          "example": "router_op_interface"
        },
        "pb_exec_policy_specs": {
          "type": "string",
          "description": "Playbook execution policy spec file content",
        },
        "pb_params_specs": {
          "type": "string",
          "description": "Playbook parameters and variables spec file content"
        }
      }
    },
    "change_automationMopTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "title": "ID of the task"
        },
        "name": {
          "type": "string",
          "title": "Name of the task"
        },
        "version": {
          "type": "string",
          "title": "Version of the task"
        },
        "verb": {
          "type": "string",
          "title": "Name of the verb which the task invokes"
        },
        "phases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of the Playbook phases in which the task is executed"
        },
        "args": {
          "type": "string",
          "title": "Arguments passed to the task"
        },
        "vars": {
          "type": "string",
          "title": "Ansible hostvars for the verb associated with the task"
        },
        "results": {
          "type": "string",
          "title": "Result of the task execution, as returned"
        },
        "status": {
          "$ref": "#/definitions/change_automationMopTaskStatus",
          "title": "Status of the task execution"
        }
      }
    },
    "change_automationMopTaskStatus": {
      "type": "string",
      "enum": [
        "NONE",
        "RUNNING",
        "SUCCEEDED",
        "FAILED",
        "PAUSED",
        "ROLLEDBACK"
      ],
      "default": "NONE",
      "description": "- RUNNING: The task is currently running\n - SUCCEEDED: Task was successfully completed\n - FAILED: Task execution failed\n - PAUSED: Task is currently paused due to a failure or execution policy\n - ROLLEDBACK: Task failed and was rolled back"
    },
    "change_automationMopsDeleteResp": {
      "type": "object",
      "properties": {
        "mops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationModifiedMop"
          },
          "description": "List of modified MoPs"
        }
      }
    },
    "change_automationMopsExportResp": {
      "type": "object",
      "properties": {
        "mops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationPortableMoP"
          },
          "description": "List of portable MoPs. The list has the information on the MoP files needed to export the MoPs via the Crosswork UI."
        }
      },
      "description": "MopsExportResp contains the tar file with all the files needed to define the MoPs requested"
    },
    "change_automationMopsExportResponse": {
      "type": "object",
      "properties": {
        "export": {
          "type": "string",
          "description": "Base64 encoded string representing the exported tar.gz archive",
          "example": "H4sIAAAAAAAA/+x9e1cbuZJ4/uZT1X/z/zyd5Fvr//4D+9y8W6n+h/hfP4lk8i+dOz/8GAAD//1DGhRIAggAA"
        }
      },
      "description": "MopsExportResp contains the tar file with all the files needed to define the MoPs requested."
    },
    "change_automationMopsImportResp": {
      "type": "object",
      "properties": {
        "mops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationModifiedMop"
          },
          "description": "List of modified MoPs"
        }
      }
    },
    "change_automationMopsReadResp": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint32",
          "title": "Count of total number of MoPs returned"
        },
        "mops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationMop"
          },
          "title": "Array containing all the MoPs that were returned based on the input parameters"
        }
      }
    },
    "change_automationNCAEventType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CONSOLE",
        "GENERIC",
        "MOP_TASK",
        "NODE_STATUS_UPDATE",
        "WAE_RESULT",
        "MOP_STATUS",
        "MOP_PAUSED",
        "MOP_CONFIG",
        "CONT_CHECK_RESULT",
        "SYSLOG_STATUS"
      ],
      "default": "UNKNOWN"
    },
    "change_automationPlaybookPhases": {
      "type": "object",
      "properties": {
        "continuous": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationPlaybookTask"
          },
          "title": "List of all continuous tasks in the Playbook"
        },
        "pre_maintenance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationPlaybookTask"
          },
          "title": "List of all pre-maintenance tasks in the Playbook"
        },
        "maintenance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationPlaybookTask"
          },
          "title": "List of all maintenance tasks in the Playbook"
        },
        "post_maintenance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change_automationPlaybookTask"
          },
          "title": "List of all post-maintenance tasks in the Playbook"
        }
      }
    },
    "change_automationPlaybookTask": {
      "type": "object",
      "properties": {
        "idx": {
          "type": "integer",
          "format": "int64",
          "title": "ID of the task",
          "example": 1
        },
        "name": {
          "type": "string",
          "title": "Name of the task",
          "example": "Bring the router interface(s) up/down"
        }
      }
    },
    "change_automationPortableMoP": {
      "type": "object",
      "properties": {
        "mop_id": {
          "type": "string",
          "description": "Unique identifier for a MoP"
        },
        "pb_file_path": {
          "type": "string",
          "description": "Playbook file path. Each MoP corresponds to one Ansible Playbook file."
        },
        "pb_params_sample_file_path": {
          "type": "string",
          "description": "Parameters sample file path. Sample of what the UI parameters look like."
        },
        "pb_params_spec_file_path": {
          "type": "string",
          "description": "Parameters specifications file path. The specifications file specifies all the parameters needed for the Playbook."
        }
      }
    },
    "change_automationRequestStatus": {
      "type": "string",
      "enum": [
        "STATUS_ACCEPTED",
        "STATUS_DECLINED"
      ],
      "example": "STATUS_ACCEPTED"
    },
    "change_automationServiceStatusReadResp": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/ServiceStatusReadRespState",
          "title": "Current service state of the Change Automation application"
        },
        "unreachable": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "orch"
          },
          "title": "List of components that are unreachable"
        }
      }
    },
    "change_automationError500": {
      "type": "object",
      "required": [
        "code",
        "severity",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "HTTP return code",
          "example": "500"
        },
        "severity": {
          "type": "string",
          "description": "Error severity level",
          "enum": [
            "Critical",
            "Warning",
            "Fatal"
          ]
        },
        "message": {
          "type": "string",
          "description": "Error message",
          "example": "top level error string"
        },
        "data": {
          "type": "string",
          "description": "Details of the error",
          "example": "detailed description of the error"
        }
      }
    },
    "change_automationError400": {
      "type": "object",
      "required": [
        "code",
        "severity",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "HTTP return code",
          "example": "400"
        },
        "severity": {
          "type": "string",
          "description": "Error severity level",
          "enum": [
            "Critical",
            "Warning",
            "Fatal"
          ]
        },
        "message": {
          "type": "string",
          "description": "Error message",
          "example": "top level error string"
        },
        "data": {
          "type": "string",
          "description": "Details of the error",
          "example": "detailed description of the error"
        }
      }
    }
  }
}
