{
	"swagger": "2.0",
	"info": {
		"title": "Crosswork Change Automation Web Server",
		"version": "3.1",
		"contact": {
			"name": "Crosswork Team, Cisco",
			"email": "support@cisco.com"
		},
		"license": {
			"name": "Cisco Software License Agreement",
			"url": "http://www.cisco.com/public/sw-license-agreement.html"
		},
		"description": "A web server dedicated to RESTful queries into the Crosswork Change Automation application."
	},
	"basePath": "/crosswork/nca",
	"schemes": [
		"https"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/v1/mopjobs": {
			"get": {
				"summary": "Get one or more MoP execution job(s) based on the filter fields.",
				"operationId": "GetMopJobs",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobsReadResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
						"name": "limit",
						"description": "Denotes the number of mopjobs per page requested by user.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "page",
						"description": "The page number of the result. Page number subtracted by 1 and multiplied by the limit determines the offset from which records are returned.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "mop_id",
						"description": "Filter results by MoP ID.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "device",
						"description": "Filter results by device.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"description": "Filter results by status of a job.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "set_id",
						"description": "Filter results by job set ID.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "name",
						"description": "Filter results by job set name.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "tags",
						"description": "Filter results by job tags.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"tags": [
					"NCA"
				]
			},
			"post": {
				"summary": "Schedule a MoP execution job with custom execution parameters",
				"operationId": "PostMopJob",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobCreateResp"
						}
					},
					"400": {
						"description": "Bad Request. The request is malformed in some way and the server cannot process it.",
						"schema": {
							"$ref": "#/definitions/change_automationError400"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/change_automationMopJobCreateReq"
					}
				}],
				"tags": [
					"NCA"
				]
			},
			"patch": {
				"summary": "Patch a MoP execution job. A patch request can either rollback tasks or run a task",
				"operationId": "PatchMopJob",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobUpdateResp"
						}
					},
					"400": {
						"description": "Bad Request. The request is malformed in some way and the server cannot process it.",
						"schema": {
							"$ref": "#/definitions/change_automationError400"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/change_automationMopJobUpdateReq"
					}
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/abort": {
			"post": {
				"summary": "Abort one or more MoP job(s) or job set(s).",
				"operationId": "PostMopJobsAbort",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobsAbortResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/change_automationMopJobsAbortReq"
					}
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/clone": {
			"post": {
				"summary": "Schedule a MoP job or job set which is a clone of an existing one but has a new schedule.",
				"operationId": "PostMopJobRerun",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobCreateResp"
						}
					},
					"400": {
						"description": "Bad Request. The request is malformed in some way and the server cannot process it.",
						"schema": {
							"$ref": "#/definitions/change_automationError400"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/change_automationMopJobCloneReq"
					}
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/events": {
			"get": {
				"summary": "Get MoP events associated with MoP job(s). The events can be filtered by device name, event time and MoP job ID",
				"operationId": "GetMopJobEvents",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobEventsReadResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
						"name": "limit",
						"description": "Denotes the number of mopjob events per page requested by user.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "page",
						"description": "// The page number of the result. Page number subtracted by 1 and multiplied by the limit determines the offset from which records are returned.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "types",
						"description": "Types of the event. If not set, query execution will yield all event types.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"CONSOLE",
								"GENERIC",
								"MOP_TASK",
								"NODE_STATUS_UPDATE",
								"WAE_RESULT",
								"MOP_STATUS",
								"MOP_PAUSED",
								"MOP_CONFIG",
								"CONT_CHECK_RESULT",
								"SYSLOG_STATUS"
							]
						},
						"collectionFormat": "multi"
					},
					{
						"name": "after",
						"description": "Time after field determines the timestamp at which to start returning events. Only events with time greater than or equal to after will be returned.",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "uint64"
					},
					{
						"name": "before",
						"description": "Time after field determines the timestamp at which to start returning events. Only events with time less than or equal to before will be returned.",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "uint64"
					},
					{
						"name": "device",
						"description": "Name of the device for which events are requested.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "execution_id",
						"description": "ExecutionId of the mop for which the user wants events.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "reverse",
						"description": "If set the events will be returned in reverse chronological order, i.e., newest first. By default, the flag is false so events will be returned in chronological order.",
						"in": "query",
						"required": false,
						"type": "boolean",
						"format": "boolean"
					}
				],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/sets": {
			"get": {
				"summary": "Get one or more MoP execution job set details based on the filter fields.",
				"operationId": "GetMopJobSets",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobSetsReadResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
						"name": "limit",
						"description": "Denotes the number of job sets per page requested by user.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "page",
						"description": "The page number of the result. Page number subtracted by 1 and multiplied by the limit determines the offset from which records are returned.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "set_id",
						"description": "Filter results by job set ID.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "mop_id",
						"description": "Filter results by MoP ID.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"description": "Filter results by status of job set.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "device_group",
						"description": "Filter results by device group on which the job set was run.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "name",
						"description": "Filter results by job set name.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "tags",
						"description": "Filter results by job tags.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/sets/{set_id}": {
			"get": {
				"summary": "Get a specific MoP execution job set details.",
				"operationId": "GetMopJobSet",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobSetReadResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "set_id",
					"description": "A unique ID to identify a set of MoP job(s).",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/{execution_id}": {
			"get": {
				"summary": "Get a specific MoP execution job.",
				"operationId": "GetMopJob",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobsReadResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "execution_id",
					"description": "Executionid of the mopjob",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mopjobs/{execution_id}/tasks": {
			"get": {
				"summary": "Get a specific task or all tasks associated with a given MoP job.",
				"operationId": "GetMopJobTasks",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopJobTaskReadResp"
						}
					}
				},
				"parameters": [{
						"name": "execution_id",
						"description": "Execution ID of the mop whose task user wants to retrieve",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "task_id",
						"description": "Task ID which the user wants to retrieve. If not specified, all tasks for the mopjob are returned.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops": {
			"get": {
				"summary": "Retrieve one or more MoPs based on the filter fields. The API currently supports retrieving all mops or multiple filters. Default behavior is to fetch all mops.",
				"operationId": "GetMops",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopsReadResp"
						}
					},
					"400": {
						"description": "Bad Request. The request is malformed in some way and the server cannot process it.",
						"schema": {
							"$ref": "#/definitions/change_automationError400"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
						"name": "limit",
						"description": "Denotes the number of mops per page requested by user.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "page",
						"description": "The page number of the result. Page number subtracted by 1 and multiplied by the limit determines the offset from which records are returned.",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "mop_name",
						"description": "Filter results mop name. The value is applied in a partial string search on the filter.name field. Wildcard based search is not supported. For example, value could be 'interface' if the user wishes to retrieve all mop which contain interface in it's name.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "description",
						"description": "Filter results by mop description. The value is applied in a partial string search on the filter.name field. Wildcard based search is not supported. For example, value could be 'interface' if the user wishes to retrieve all mop which contain interface in it's description.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "sw_platform",
						"description": "Filter by software platform. The value is applied is case insensitve and perform complete string match.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "user",
						"description": "Filter results by owner name of the mop. Only the playbook belonging to a user value will be returned.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "version",
						"description": "Filter by mop version. The version filter will be applied as a case sensitive string.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "predefined_only",
						"description": "Only return prefined playbooks.",
						"in": "query",
						"required": false,
						"type": "boolean",
						"format": "boolean"
					},
					{
						"name": "sort_by",
						"description": "Sort by one of the available fields.\n\n - mop_name: Sort by mop name. Results will be sorted on name by default\n - description: Sort by mop description\n - platform: Sort by software platform\n - user: Sort by user\n - version: Sort by mop version\n - modified_time: Sort by last modified time",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"mop_name",
							"description",
							"platform",
							"user",
							"version",
							"modified_time"
						],
						"default": "mop_name"
					},
					{
						"name": "order",
						"description": "Ordering for the sort. Typically used when a sort_by is specified.\n\n - asc: Sort in ascending order by default\n - desc: Sort in decending order",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"asc",
							"desc"
						],
						"default": "asc"
					}
				],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops/delete": {
			"delete": {
				"summary": "Delete one or more custom MoPs in Change Automation",
				"operationId": "DeleteMops",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopsDeleteResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
						"name": "user",
						"description": "Name of the user who requested the delete.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "mop_ids",
						"description": "List of MoP IDs that need to be deleted.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops/export": {
			"post": {
				"summary": "Export a tar.gz archive with files related to one or more MoPs in Change Automation",
				"operationId": "PostMopsExport",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopsExportResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/change_automationMopsExportReq"
					}
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops/import": {
			"post": {
				"summary": "Import a tar.gz archive with files needed to create/update custom MoPs in Change Automation",
				"operationId": "PostMopsImport",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopsImportResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/change_automationMopsImportReq"
					}
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops/{mop_id}": {
			"get": {
				"summary": "Retrieve a specific MoP.",
				"operationId": "GetMop",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopsReadResp"
						}
					},
					"400": {
						"description": "Bad Request. The request is malformed in some way and the server cannot process it.",
						"schema": {
							"$ref": "#/definitions/change_automationError400"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "mop_id",
					"description": "ID of the mop which is requested. ID is a unique value that is assigned to each mop when it is on-boarded. If specified, mop_id field takes precedence over additional filters. This field requires absolute value. For partial searches in mop_name filters, use /mops API.",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops/{mop_id}/compatible": {
			"post": {
				"summary": "Validate the playbook and device combination",
				"operationId": "PostMopDeviceCompatibility",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopDeviceCompatibleResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
						"name": "mop_id",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"description": "Target devices",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/MopDeviceCompatibleReqDevices"
						}
					}
				],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/mops/{mop_id}/specs": {
			"get": {
				"summary": "Get the params specs and execution policy specs for one or more playbooks. Empty filter will return the specs for all playbooks.",
				"operationId": "GetMopSpecs",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationMopSpecsReadResp"
						}
					},
					"400": {
						"description": "Bad Request. The request is malformed in some way and the server cannot process it.",
						"schema": {
							"$ref": "#/definitions/change_automationError400"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"parameters": [{
					"name": "mop_id",
					"description": "ID of the mop for which specs files are needed. API will return error if mop_id is not specified",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"tags": [
					"NCA"
				]
			}
		},
		"/v1/servicestatus": {
			"get": {
				"summary": "Get the service state of Change Automation",
				"operationId": "GetServiceState",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationServiceStatusReadResp"
						}
					},
					"500": {
						"description": "Internal Server Error. The server could not fulfill the request.",
						"schema": {
							"$ref": "#/definitions/change_automationError500"
						}
					}
				},
				"tags": [
					"NCA"
				]
			}
		},
		"/versions": {
			"get": {
				"summary": "Get a specific MoP execution job set details.",
				"operationId": "GetAPIVersions",
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"$ref": "#/definitions/change_automationApiVersionsResp"
						}
					}
				},
				"tags": [
					"NCA"
				]
			}
		}
	},
	"securityDefinitions": {
		"bearerAuth": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		}
	},
	"security": [{
		"bearerAuth": []
	}],
	"definitions": {
		"MopDeviceCompatibleReqDevices": {
			"type": "object",
			"properties": {
				"device_group": {
					"type": "string",
					"description": "Device group name (DLM tag), one job will be executed for each device in this group."
				},
				"devices": {
					"$ref": "#/definitions/change_automationDevicesIds",
					"description": "List of devices on which the job will be executed."
				}
			}
		},
		"MopDeviceCompatibleRespError": {
			"type": "object",
			"properties": {
				"device": {
					"type": "string",
					"title": "Hostname of the device which is not compatible which the playbook"
				},
				"reason": {
					"type": "string",
					"title": "Reason for incompatibility"
				}
			}
		},
		"MopDeviceCompatibleRespResult": {
			"type": "string",
			"enum": [
				"NONE",
				"COMPATIBLE",
				"INCOMPATIBLE"
			],
			"default": "NONE",
			"description": "- COMPATIBLE: The combination is Valid\n - INCOMPATIBLE: The combination is Invalid"
		},
		"MopExecutionPolicyExecStrategyType": {
			"type": "string",
			"enum": [
				"STRATEGY_UNKNOWN",
				"STRATEGY_CONTINUOUS",
				"STRATEGY_SINGLE_STEP",
				"STRATEGY_DRY_RUN"
			],
			"default": "STRATEGY_UNKNOWN"
		},
		"MopExecutionPolicyOnFailureActionType": {
			"type": "string",
			"enum": [
				"ON_FAILURE_UNKNOWN",
				"ON_FAILURE_PAUSE",
				"ON_FAILURE_COMPLETE_ROLLBACK",
				"ON_FAILURE_ABORT"
			],
			"default": "ON_FAILURE_UNKNOWN"
		},
		"MopJobSetReadRespMopJobExisting": {
			"type": "object",
			"properties": {
				"execution_id": {
					"type": "string",
					"description": "Execution ID of the MoP job."
				},
				"check_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which pre-checks should start for the job. Default is now, i.e. as soon as possible."
				},
				"status": {
					"type": "string",
					"title": "Status of the mop job"
				}
			},
			"description": "MopJobExisting is a scheduled/completed MoP job in the system."
		},
		"MopJobUpdateReqOpType": {
			"type": "string",
			"enum": [
				"OP_UNKNOWN",
				"OP_ROLLBACK",
				"OP_RESUME",
				"OP_ABORT",
				"OP_PAUSE"
			],
			"default": "OP_UNKNOWN"
		},
		"ServiceStatusReadRespState": {
			"type": "string",
			"enum": [
				"UNKNOWN",
				"NOSERVICE",
				"LIMITEDSERVICE",
				"FULLSERVICE"
			],
			"default": "UNKNOWN",
			"description": " - NOSERVICE: NOSERVICE indicates that one or more critical services are unreachable. No operations are supported in NCA\n - LIMITEDSERVICE: LIMITEDSERVICE indicates that NCA one or more optional components are unreachable. When in this state, NCA will\nprovide full read support. Users can schedule execution requests but some functionality might be missing\n - FULLSERVICE: FULLSERVICE indicates that NCA is in full service mode. All functionalies supported by NCA are running including\ngraphs creations etc."
		},
		"change_automationAbortResp": {
			"type": "object",
			"properties": {
				"execution_id": {
					"type": "string",
					"description": "Execution ID of the MoP job for which abort request was processed."
				},
				"status": {
					"$ref": "#/definitions/change_automationRequestStatus",
					"description": "Status of the abort request. The status only reflects whether the request was accepted or rejected. Even if a request is ACCEPTED, the abort request might not get processed if the mop has run to completion before a chance to process the request."
				},
				"message": {
					"type": "string",
					"description": "In case of request getting rejected, message field provides more details."
				}
			}
		},
		"change_automationApiVersion": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string",
					"title": "Version of the API"
				},
				"revision": {
					"type": "string",
					"title": "Revision within the version"
				},
				"status": {
					"type": "string",
					"title": "Status of the version"
				}
			}
		},
		"change_automationApiVersionsResp": {
			"type": "object",
			"properties": {
				"versions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationApiVersion"
					}
				}
			}
		},
		"change_automationDevicesIds": {
			"type": "object",
			"properties": {
				"ids": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "List of device hostnames."
				}
			},
			"description": "List of devices on which the job will be executed.\nIf multiple devices are provided for a playbook targetting one device at a time, one job will be executed in parallel for each device in list.\nIf multiple devices are provided for a playbook targetting multiple devices, one job will be executed.\nEither device group or devices must be specified."
		},
		"change_automationModifiedMop": {
			"type": "object",
			"properties": {
				"mop_id": {
					"type": "string",
					"description": "Unique identifier for a MoP."
				},
				"message": {
					"type": "string",
					"description": "Message describes why the MoP modifiication failed, or suceeded."
				},
				"status": {
					"$ref": "#/definitions/change_automationModifiedMopStatus"
				}
			}
		},
		"change_automationModifiedMopStatus": {
			"type": "string",
			"enum": [
				"UNKNOWN",
				"SUCCEEDED",
				"FAILED"
			],
			"default": "UNKNOWN",
			"description": " - SUCCEEDED: SUCCEEDED indicates that the requested modification succeeded.\n - FAILED: FAILED indicates that the requested modification failed."
		},
		"change_automationMop": {
			"type": "object",
			"properties": {
				"mop_id": {
					"type": "string",
					"description": "A unique identifier for a playbook which is the name of the playbook file without the extension."
				},
				"mop_version": {
					"type": "string",
					"description": "A version for the playbook specified by the creator."
				},
				"name": {
					"type": "string",
					"description": "A name for the playbook, with which it is identified on UI."
				},
				"description": {
					"type": "string",
					"description": "An optional description for the playbook."
				},
				"sw_platform": {
					"type": "string",
					"title": "Software platform on which the playbook can be run. e.g. \"IOS-XR\""
				},
				"sw_version": {
					"type": "string",
					"description": "Software version(s) for which the playbook is supported, e.g. \"6.2.1\". This field could be a comma separated list. A singular value would denote that this is the minimum supported version."
				},
				"hw_platform": {
					"type": "string",
					"description": "Hardware platform on which the playbook is supported."
				},
				"pb_file_name": {
					"type": "string",
					"description": "Playbook file name. Each MoP corresponds to one Ansible playbook file."
				},
				"pb_exec_policy_file_name": {
					"type": "string",
					"description": "Playbook execution policy spec file name."
				},
				"pb_params_sample_file_name": {
					"type": "string",
					"description": "Parameters sample file name. Sample of how the UI params look like."
				},
				"pb_params_spec_file_name": {
					"type": "string",
					"description": "Parameters specifications file name. Specifications of all the parameters needed for the playbook."
				},
				"min_nodes": {
					"type": "integer",
					"format": "int64",
					"title": "Minimum number of nodes that need to be specifed for this playbook. If 0, UI will not enforce node selection"
				},
				"max_nodes": {
					"type": "integer",
					"format": "int64",
					"title": "Maximum number of nodes that can be be specified for this playbook. If 0, UI will not enforce any upper bound"
				},
				"parsed_pb": {
					"$ref": "#/definitions/change_automationPlaybookPhases",
					"title": "A detailed task level breakdown of the playbook. This field is populated if the parse boolean flag is set to TRUE in the incoming request"
				},
				"is_custom": {
					"type": "boolean",
					"format": "boolean",
					"description": "Flag indicating if this is a custom/user-defined MoP or not."
				},
				"user": {
					"type": "string",
					"description": "User who created this MoP."
				},
				"created_at": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which this custom MoP was created."
				}
			}
		},
		"change_automationMopDeviceCompatibleResp": {
			"type": "object",
			"properties": {
				"result": {
					"$ref": "#/definitions/MopDeviceCompatibleRespResult",
					"title": "Result field indicating if the selected playbook can be executed on the selected device(s) or device group"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MopDeviceCompatibleRespError"
					},
					"title": "List of errors. Each entry will describe a device which is incompatible and the reason for incompatibility"
				}
			}
		},
		"change_automationMopExecutionPolicy": {
			"type": "object",
			"properties": {
				"execution_strategy": {
					"$ref": "#/definitions/MopExecutionPolicyExecStrategyType",
					"title": "Type of execution of playbook"
				},
				"pause_on_tasks": {
					"type": "array",
					"items": {
						"type": "integer",
						"format": "int64"
					},
					"title": "ID's of the tasks on which the execution should pause when in single stepping mode"
				},
				"on_failure": {
					"$ref": "#/definitions/MopExecutionPolicyOnFailureActionType",
					"title": "Action that the user wishes to take on task failure"
				},
				"collect_syslog": {
					"type": "boolean",
					"format": "boolean",
					"title": "Denotes whether to collect device syslogs or not"
				}
			}
		},
		"change_automationMopJob": {
			"type": "object",
			"properties": {
				"execution_id": {
					"type": "string",
					"title": "A unique ID to track the execution of MOP"
				},
				"mop_id": {
					"type": "string",
					"title": "ID of the mop to be executed"
				},
				"check_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which pre-checks should start for the job. Default is now, i.e. as soon as possible."
				},
				"exec_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which the actual execution, i.e. maintenance tasks should begin. Default is now, i.e. as soon as possible."
				},
				"execution_params": {
					"type": "string",
					"description": "JSON object specifying the execution parameters for the MoP job."
				},
				"execution_policy": {
					"$ref": "#/definitions/change_automationMopExecutionPolicy",
					"title": "JSON object specifying the execution policy in key-value format"
				},
				"devices": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "List of devices on which the mop is executed."
				},
				"status": {
					"type": "string",
					"title": "Current Status of the mop execution"
				},
				"exec_end_time": {
					"type": "string",
					"format": "uint64",
					"description": "Denotes the time at which mop execution was completed. This field will be populated only after the execition is complete."
				},
				"created_at": {
					"type": "string",
					"format": "uint64",
					"title": "Time at which mop got scheduled for execution with infra"
				},
				"update_time": {
					"type": "string",
					"format": "uint64",
					"title": "Update time is a rolling field which stores the time of the latest update to the mopjob instance. If can be a reflection of any of the time fields"
				},
				"update_desc": {
					"type": "string",
					"title": "Update desc contains the description of the rolling update_time field. Example, when update_time reflects created_at, update_desc can contain something like, \"Time at which mopjob was created\""
				},
				"submitter": {
					"type": "string",
					"description": "The user who submitted the request."
				},
				"last_updated_task": {
					"type": "integer",
					"format": "int64",
					"title": "ID of the last task that was executed. If the MOP is in running state, this field will contain the ID of the task that is being executed currently"
				},
				"parsed_pb": {
					"$ref": "#/definitions/change_automationPlaybookPhases",
					"title": "A detailed task level breakdown of the playbook. This field is populated if the parse boolean flag is set to TRUE in the incoming request"
				},
				"set_id": {
					"type": "string",
					"description": "An identifier for a job set to which this job belongs."
				}
			}
		},
		"change_automationMopJobCloneReq": {
			"type": "object",
			"properties": {
				"src_execution_id": {
					"type": "string",
					"description": "Execution ID of the MoP job from which a new job will be created."
				},
				"src_set_id": {
					"type": "string",
					"description": "Job set ID of MoP job(s) from which a new job set will be created."
				},
				"check_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which pre-checks should start for the job. Default is now, i.e. as soon as possible."
				},
				"exec_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which the actual execution, i.e. maintenance tasks should begin. Default is now, i.e. as soon as possible."
				},
				"submitter": {
					"type": "string",
					"description": "The user who submitted the request."
				}
			}
		},
		"change_automationMopJobCreateReq": {
			"type": "object",
			"properties": {
				"mop_id": {
					"type": "string",
					"title": "ID of the mop to be executed"
				},
				"check_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which pre-checks should start for the job. Default is now, i.e. as soon as possible."
				},
				"exec_start_time": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which the actual execution, i.e. maintenance tasks should begin. Default is now, i.e. as soon as possible."
				},
				"execution_params": {
					"type": "string",
					"description": "JSON object specifying the execution parameters for the MoP job."
				},
				"execution_policy": {
					"$ref": "#/definitions/change_automationMopExecutionPolicy",
					"title": "JSON formatted string of playbook execution policy"
				},
				"device_group": {
					"type": "string",
					"description": "Device group name (DLM tag). One job will be executed in parallel for each device in this group.\nCan only be used with playbooks targetting one device at a time.\nEither device group or devices must be specified."
				},
				"devices": {
					"$ref": "#/definitions/change_automationDevicesIds"
				},
				"submitter": {
					"type": "string",
					"description": "The user who submitted the request."
				},
				"name": {
					"type": "string",
					"description": "Name for the job set."
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Tags for the job set."
				}
			}
		},
		"change_automationMopJobCreateResp": {
			"type": "object",
			"properties": {
				"execution_id": {
					"type": "string",
					"description": "A unique ID to track the MoP job created. If a device group and or series was requested, this will empty."
				},
				"set_id": {
					"type": "string",
					"description": "A unique ID to track the set of MoP job(s) created."
				},
				"created_at": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which job got scheduled for execution."
				},
				"submitter": {
					"type": "string",
					"description": "The user who submitted the request."
				}
			}
		},
		"change_automationMopJobEventsReadResp": {
			"type": "object",
			"properties": {
				"events": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "Array of JSON formatted events which match all the input criteria"
				}
			}
		},
		"change_automationMopJobSet": {
			"type": "object",
			"properties": {
				"set_id": {
					"type": "string",
					"description": "A unique ID to identify a set of MoP job(s)."
				},
				"status": {
					"type": "string",
					"description": "Status of the job set."
				},
				"created_at": {
					"type": "string",
					"format": "uint64",
					"title": "Time at which this job set was created"
				},
				"last_updated_at": {
					"type": "string",
					"format": "uint64",
					"description": "Time at which there was an update to the job set, w.r.t jobs in this set."
				},
				"last_update": {
					"type": "string",
					"description": "Last update description for this job set."
				},
				"name": {
					"type": "string",
					"description": "Name for the job set."
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Tags for the job set."
				},
				"label": {
					"type": "string",
					"description": "Label for the job set, derived from the user provided name."
				},
				"mop_id": {
					"type": "string",
					"description": "A unique identifier for a playbook which is the name of the playbook file without the extension."
				},
				"execution_params": {
					"type": "string",
					"description": "JSON object specifying the execution parameters for the MoP job."
				},
				"execution_policy": {
					"$ref": "#/definitions/change_automationMopExecutionPolicy",
					"title": "JSON formatted string of playbook execution policy"
				}
			},
			"description": "MopJobSet represents an aggregate of related MoP jobs with common inputs, target devices and schedule.\nJobs could be related by a device group."
		},
		"change_automationMopJobSetReadResp": {
			"type": "object",
			"properties": {
				"job_set": {
					"$ref": "#/definitions/change_automationMopJobSet",
					"description": "Job set requested for."
				},
				"jobs": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MopJobSetReadRespMopJobExisting"
					},
					"description": "All the MoP jobs belonging to this job set."
				}
			}
		},
		"change_automationMopJobSetsReadResp": {
			"type": "object",
			"properties": {
				"sets": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationMopJobSet"
					},
					"description": "List of MoP job sets."
				}
			}
		},
		"change_automationMopJobTaskReadResp": {
			"type": "object",
			"properties": {
				"execution_id": {
					"type": "string",
					"description": "Execution ID for which the tasks were requested."
				},
				"tasks": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationMopTask"
					},
					"description": "An array of all the mop tasks returned for user query."
				}
			}
		},
		"change_automationMopJobUpdateReq": {
			"type": "object",
			"properties": {
				"execution_id": {
					"type": "string",
					"description": "Execution ID of the mopjob being patched."
				},
				"task_id": {
					"type": "integer",
					"format": "int64",
					"description": "Task ID with of the task within the execution instance which is being patched."
				},
				"op": {
					"$ref": "#/definitions/MopJobUpdateReqOpType",
					"title": "Type of patch operation"
				},
				"rollback_to_task": {
					"type": "integer",
					"format": "int64",
					"title": "Parameter for rollback operation"
				},
				"run_params": {
					"type": "string",
					"title": "Parameter for run operation"
				},
				"submitter": {
					"type": "string",
					"description": "The user who submitted the request."
				}
			}
		},
		"change_automationMopJobUpdateResp": {
			"type": "object",
			"properties": {
				"status": {
					"$ref": "#/definitions/change_automationRequestStatus",
					"title": "Status of the patch request. The status only reflects whether the request was accepted or rejected\nbased on the input params"
				},
				"message": {
					"type": "string",
					"title": "In case of request getting rejected, message field provides more details"
				}
			}
		},
		"change_automationMopJobsAbortReq": {
			"type": "object",
			"properties": {
				"stabilize": {
					"type": "boolean",
					"format": "boolean",
					"title": "Denotes if orchestrator is supposed to wait for the system to reach a stable state before ending execution. This flag will denote if the mopjobs are terminated with STOP signal or KILL signal. Currently the abort operation waits until the end of current operation"
				},
				"execution_ids": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "A list of execution IDs that the user wishes to abort."
				},
				"set_ids": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "A list of job set IDs that the user wishes to abort."
				},
				"submitter": {
					"type": "string",
					"description": "The user who submitted the request."
				}
			}
		},
		"change_automationMopJobsAbortResp": {
			"type": "object",
			"properties": {
				"results": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationAbortResp"
					},
					"description": "List of results corresponding to all the jobs requested for abortion."
				}
			}
		},
		"change_automationMopJobsReadResp": {
			"type": "object",
			"properties": {
				"result": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationMopJob"
					},
					"title": "List of mopjobs that were retrieved as a result of the query"
				}
			}
		},
		"change_automationMopSpecsReadResp": {
			"type": "object",
			"properties": {
				"mop_id": {
					"type": "string",
					"title": "ID of the playbook"
				},
				"pb_exec_policy_specs": {
					"type": "string",
					"description": "Playbook execution policy spec file content."
				},
				"pb_params_specs": {
					"type": "string",
					"description": "Playbook params/vars spec file content."
				}
			}
		},
		"change_automationMopTask": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64",
					"title": "Task ID if the task"
				},
				"name": {
					"type": "string",
					"title": "Name of the task"
				},
				"version": {
					"type": "string",
					"title": "Version of the task"
				},
				"verb": {
					"type": "string",
					"title": "Name of the verb which the task invokes"
				},
				"phases": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "List of the playbook phases in which the task is executed"
				},
				"args": {
					"type": "string",
					"title": "Arguments passed to the task"
				},
				"vars": {
					"type": "string",
					"title": "Ansible hostvars for the verb associated to the task"
				},
				"results": {
					"type": "string",
					"title": "Result of the task execution as returned by ansible"
				},
				"status": {
					"$ref": "#/definitions/change_automationMopTaskStatus",
					"title": "Status of the task execution"
				}
			}
		},
		"change_automationMopTaskStatus": {
			"type": "string",
			"enum": [
				"NONE",
				"RUNNING",
				"SUCCEEDED",
				"FAILED",
				"PAUSED",
				"ROLLEDBACK"
			],
			"default": "NONE",
			"description": "- RUNNING: The tasks is currently running\n - SUCCEEDED: Task was successfully completed\n - FAILED: Task execution failed\n - PAUSED: Task is currently paused due to on failure or execution policy\n - ROLLEDBACK: Task failed and was Rolledback"
		},
		"change_automationMopsDeleteResp": {
			"type": "object",
			"properties": {
				"mops": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationModifiedMop"
					},
					"description": "List of modified MoPs."
				}
			}
		},
		"change_automationMopsExportReq": {
			"type": "object",
			"properties": {
				"user": {
					"type": "string",
					"description": "Name of the user who requested the export."
				},
				"mop_ids": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "List of MoP IDs that need to be exported."
				}
			}
		},
		"change_automationMopsExportResp": {
			"type": "object",
			"properties": {
				"mops": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationPortableMoP"
					},
					"description": "List of portable MoPs which has the information on MoP files nedded for exporting to UI."
				}
			},
			"description": "MopsExportResp contains the tar file with all the files needed to define the MoPs requested."
		},
		"change_automationMopsImportReq": {
			"type": "object",
			"properties": {
				"user": {
					"type": "string",
					"description": "Name of the user who requested the import."
				},
				"import_dir": {
					"type": "string",
					"description": "Temporary directory where MoP files imported from UI have been placed."
				}
			}
		},
		"change_automationMopsImportResp": {
			"type": "object",
			"properties": {
				"mops": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationModifiedMop"
					},
					"description": "List of modified MoPs."
				}
			}
		},
		"change_automationMopsReadResp": {
			"type": "object",
			"properties": {
				"count": {
					"type": "integer",
					"format": "int64",
					"title": "Count of total number of mops returned"
				},
				"mops": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationMop"
					},
					"title": "Array containing all the mops that were returned based on the input parameters"
				}
			}
		},
		"change_automationMopsSortBy": {
			"type": "string",
			"enum": [
				"mop_name",
				"description",
				"platform",
				"user",
				"version",
				"modified_time"
			],
			"default": "mop_name",
			"description": "- mop_name: Sort by mop name. Results will be sorted on name by default\n - description: Sort by mop description\n - platform: Sort by software platform\n - user: Sort by user\n - version: Sort by mop version\n - modified_time: Sort by last modified time"
		},
		"change_automationNCAEventType": {
			"type": "string",
			"enum": [
				"UNKNOWN",
				"CONSOLE",
				"GENERIC",
				"MOP_TASK",
				"NODE_STATUS_UPDATE",
				"WAE_RESULT",
				"MOP_STATUS",
				"MOP_PAUSED",
				"MOP_CONFIG",
				"CONT_CHECK_RESULT",
				"SYSLOG_STATUS"
			],
			"default": "UNKNOWN"
		},
		"change_automationOrder": {
			"type": "string",
			"enum": [
				"asc",
				"desc"
			],
			"default": "asc",
			"description": "- asc: Sort in ascending order by default\n - desc: Sort in decending order"
		},
		"change_automationPlaybookPhases": {
			"type": "object",
			"properties": {
				"continuous": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationPlaybookTask"
					},
					"title": "List of all continuous tasks in the playbook"
				},
				"pre_maintenance": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationPlaybookTask"
					},
					"title": "List of all pre-maintenance tasks in the playbook"
				},
				"maintenance": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationPlaybookTask"
					},
					"title": "List of all maintenance tasks in the playbook"
				},
				"post_maintenance": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/change_automationPlaybookTask"
					},
					"title": "List of all post-maintenance tasks in the playbook"
				}
			}
		},
		"change_automationPlaybookTask": {
			"type": "object",
			"properties": {
				"idx": {
					"type": "integer",
					"format": "int64",
					"title": "ID of the task"
				},
				"name": {
					"type": "string",
					"title": "Name of the task"
				}
			}
		},
		"change_automationPortableMoP": {
			"type": "object",
			"properties": {
				"mop_id": {
					"type": "string",
					"description": "Unique identifier for a MoP."
				},
				"pb_file_path": {
					"type": "string",
					"description": "Playbook file path. Each MoP corresponds to one Ansible playbook file."
				},
				"pb_params_sample_file_path": {
					"type": "string",
					"description": "Parameters sample file path. Sample of how the UI params look like."
				},
				"pb_params_spec_file_path": {
					"type": "string",
					"description": "Parameters specifications file path. Specifications of all the parameters needed for the playbook."
				}
			}
		},
		"change_automationRequestStatus": {
			"type": "string",
			"enum": [
				"STATUS_UNKNOWN",
				"STATUS_ACCEPTED",
				"STATUS_DECLINED"
			],
			"default": "STATUS_UNKNOWN"
		},
		"change_automationServiceStatusReadResp": {
			"type": "object",
			"properties": {
				"state": {
					"$ref": "#/definitions/ServiceStatusReadRespState",
					"title": "Current service state of NCA"
				},
				"unreachable": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "List of components that are unreachable"
				}
			}
		},
		"change_automationError500": {
			"type": "object",
			"required": [
				"code",
				"severity",
				"message"
			],
			"properties": {
				"code": {
					"type": "string",
					"description": "HTTP return code",
					"example": "500"
				},
				"severity": {
					"type": "string",
					"description": "Error severity level",
					"enum": [
						"Critical",
						"Warning",
						"Fatal"
					]
				},
				"message": {
					"type": "string",
					"description": "Error message",
					"example": "top level error string"
				},
				"data": {
					"type": "string",
					"description": "Details of the error",
					"example": "detailed description of the error"
				}
			}
		},
		"change_automationError400": {
			"type": "object",
			"required": [
				"code",
				"severity",
				"message"
			],
			"properties": {
				"code": {
					"type": "string",
					"description": "HTTP return code",
					"example": "400"
				},
				"severity": {
					"type": "string",
					"description": "Error severity level",
					"enum": [
						"Critical",
						"Warning",
						"Fatal"
					]
				},
				"message": {
					"type": "string",
					"description": "Error message",
					"example": "top level error string"
				},
				"data": {
					"type": "string",
					"description": "Details of the error",
					"example": "detailed description of the error"
				}
			}
		}
	}
}
