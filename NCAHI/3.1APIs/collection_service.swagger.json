{
  "swagger": "2.0",
  "info": {
    "title": "proto/collection_service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/crosswork/collection/v1/collectionjob": {
      "delete": {
        "summary": "DeleteCollectionJob API\nDeleteCollectionJob is used to mark an collection job for deletion within collection based on Application Context.\nCollection Service will clean up associated sensor configs on collectors or devices in asynchronously.\nGetCollectionJobSummary can be used to track the progress and phase of the deletion. An Collection Job marked for deletion\nwill move from ACTIVE phase to TERMINATING phase , on successful termination , AppContext will be deleted from the\nCollection service, if not CollectionJob will enter TERMINATION_FAILED phase ;Deletion can be tried again from\nTERMINATION_FAILED phase where in it will move to TERMINATING phase.",
        "operationId": "DeleteCollectionJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceDeleteCollectionJobResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_context.application_id",
            "description": "Unique ID to identify your application. Crosswork Applications need to prefix application id with cw prefix.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "application_context.context_id",
            "description": "Unique ID to identify your application subscription across all collection jobs. Recommended to use UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/collectionjob/config/query": {
      "post": {
        "summary": "GetCollectionJobConfig API\nGetConfiguration\nGetCollectionJobConfig can be used track the configuration request within Collection Service API. It will\nreturn all sensor configuration and device set with their destinations.\n Application context is optional",
        "operationId": "GetCollectionJobConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetCollectionJobConfigResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/collectionjob/controlstatus/query": {
      "post": {
        "summary": "GetCollectionControlStatusPerDevice API\nDetailed Granular view of each device within a job for control status\nGetCollectionControlStatusPerDevice can be used track a control status within Collection Service API over list of devices a job spans\nover. It indicates control path state on per device per sensor has been successfully setup within helios or not.\nApplication context or device id is must  for this API",
        "operationId": "GetCollectionControlStatusPerDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetCollectionControlStatusResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/collectionjob/count/query": {
      "post": {
        "summary": "Get job count in system,along with list of input count,output count,error count per collection job if\ncollection job application context is passed. If application context is not passed , it will return\nover all count of input,output,error in system across all collection jobs.",
        "operationId": "GetCollectionJobCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetCollectionJobCountResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/collectionjob/datametrics/query": {
      "post": {
        "summary": "GetCollectionDataMetricsPerDevice API\nDetailed Granular view of each device within a job for data metrics\nReturns the data metrics from per device per sensor basis . Only last reported values is retained.\nThe metrics is driven is pushed on a cadence basis in the backend. Its on per device per sensor basis with input metrics from device to collector,\noutput metrics from collector to  destinations.If the collector does not any status , it might be an empty response.\n Application context or device id is must  for this API",
        "operationId": "GetCollectionDataMetricsPerDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetCollectionDataMetricsResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/collectionjob/datastatus/query": {
      "post": {
        "summary": "GetCollectionDataStatusPerDevice API\nDetailed Granular view of each device within a job for data status\nReturns the data status from per device per sensor basis .  Only last reported values is retained.\nThe status is driven by on change notification in the backend. Its on per device per sensor basis whether collection took place from device to collector,\nwhether write took place from collector to  destinations. If anything failed in input or output, you would see\nerror describing the failure and state.If the collector does not any status , it might be an empty response.\n Application context or device id is must  for this API",
        "operationId": "GetCollectionDataStatusPerDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetCollectionDataStatusResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/collectionjob/summary/query": {
      "post": {
        "summary": "GetCollectionJobSummary API\nGetCollectionJobSummary can be used track a operational state request within Collection Service API. It indicates current status\ni.e, READY , NOT_READY,FAILED .\nIf the Phase indicates\nTERMINATING or TERMINATION_FAILED no create/update operations can be performed on app context. If phase is\nTERMINATION_FAILED an app could retry to delete an Collection Job again. Once CollectionJob enters  TERMINATING or\nTERMINATION_FAILED phase , status of the Job is no longer relevant.\n Application context is optional",
        "operationId": "GetCollectionJobSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetCollectionJobSummaryResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/helios/collectionjob": {
      "put": {
        "summary": "CreateCollectionJob API\nThis API allows you to a create an collection job for a devcice set. An application sends a request for list of sensor paths\nwhere path identified by a YANG model i.e, it could be native YANG path for the device such as\n\"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/latest/data-rate\" where the path identifies the\ndevice OS type and YANG model on the device or  SNMP YANG path such as \"SNMPv2-MIB:SNMPv2-MIB/system/sysName\" or\nOID:1.2.3.4 or CLI command such as \"show clock\" or Trap yang path \"snmp-trap-raw-oper:traps/data\"\nin addition to cadence for push or poll .\nThe cadence that is specified in this request\ncan be over written by another application and is open to optimization, if other applications also request the same\npath. CreateCollectionJob does a set of sensor paths configs within collection service based on application context\non a bunch of devices or a single device group. ApplicationContext is expected to be globally unique.\nAn application context could only be associated with one CollectType at a time. Recreation of application context\nin NOT_READY state or TERMINATING or TERMINATION_FAILED phase will result in failure.Collection service tries its\nbest meet the lowest common denominator for cadence on a requested path across all services. A collection job's\ncollect type and device set is immutable once it is accepted into the system, on successive create calls, which results.\nin update unless DeleteCollectionJob is done. User is responsible for specifying for proper paths associated with\ncollect type.\n- DeviceId: Uuid of Device as specified in DLM\n- DeviceGroup : Device tags as specified in DLM",
        "operationId": "CreateCollectionJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceCreateCollectionJobResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/collection_serviceCreateCollectionJobRequest"
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/crosswork/collection/v1/resource/inuse/query": {
      "post": {
        "summary": "Returns whether a Resource is in use . Currently supported resource is Destination id. Internal use only",
        "operationId": "GetIsResourceInUse",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/collection_serviceGetIsResourceInUseResponse"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    }
  },
  "definitions": {
    "collection_serviceApplicationContext": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "description": "Unique ID to identify your application. Crosswork Applications need to prefix application id with cw prefix."
        },
        "context_id": {
          "type": "string",
          "description": "Unique ID to identify your application subscription across all collection jobs. Recommended to use UUID."
        }
      },
      "title": "ApplicationContext Unique handle to identify your application's subscription . Combination of Application id and context_id\nshould be globally unique"
    },
    "collection_serviceCollectionControlStatus": {
      "type": "object",
      "properties": {
        "application_context": {
          "$ref": "#/definitions/collection_serviceApplicationContext",
          "description": "Unique handle to identify your application's collection job , serves as Key to Object on which CRUD ops are done."
        },
        "device_data": {
          "$ref": "#/definitions/collection_serviceDeviceData",
          "title": "Device Set on which operation was carried out. ** NOT A SET, might want to put id **\nDevice data"
        },
        "status": {
          "$ref": "#/definitions/collection_serviceStatus",
          "title": "Current Status of the overall job i.e, READY,NOT_READY,FAILED"
        },
        "phase": {
          "$ref": "#/definitions/collection_servicePhase",
          "title": "Current Phase of overall job, ACTIVE or TERMINATING"
        },
        "sensor_config_committed": {
          "$ref": "#/definitions/collection_serviceSensorConfigCommitted",
          "title": "Sensor config committed based on optimization"
        },
        "commit_state": {
          "$ref": "#/definitions/collection_serviceConfigurationCommitState",
          "title": "Indicates whether target state vs requested was converged on the device successfully across all jobs"
        },
        "device_error": {
          "$ref": "#/definitions/collection_serviceError",
          "title": "Any processing error encountered during commit"
        }
      },
      "title": "CollectionControlStatus  indicating success or failure on a per device basis for a given job\nContextId : robot.collector.helios.collection.device.control.status"
    },
    "collection_serviceCollectionDataMetrics": {
      "type": "object",
      "properties": {
        "input_metrics_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceInputMetrics"
          },
          "title": "Metrics per device per sensor on the input collection side"
        },
        "output_metrics_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceOutputMetrics"
          },
          "title": "Metrics per device per destination on the output collection side"
        }
      },
      "title": "Collection Data Metrics"
    },
    "collection_serviceCollectionDataStatus": {
      "type": "object",
      "properties": {
        "input_status_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceInputStatus"
          },
          "title": "Status per device per sensor on the input collection side"
        },
        "output_status_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceOutputStatus"
          },
          "title": "Status per device per destination on the output collection side"
        }
      },
      "title": "CollectionJob Data Status from CDG Instances\nContextId : robot.collector.helios.collection.datastatus"
    },
    "collection_serviceCollectionJobConfiguration": {
      "type": "object",
      "properties": {
        "application_context": {
          "$ref": "#/definitions/collection_serviceApplicationContext",
          "description": "Unique handle to identify your application's collection job , serves as Key to Object on which CRUD ops are done."
        },
        "collection_mode": {
          "$ref": "#/definitions/collection_serviceCollectionMode",
          "title": "Style of collection persistent or non-persistent\nNote Recurrent , Transient jobs are not applicable to any collection that involves device config change"
        },
        "job_device_set": {
          "$ref": "#/definitions/collection_serviceJobDeviceSet",
          "title": "Job DeviceSet reflects a collection of devices or device group"
        },
        "sensor_input_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceSensorInputConfig"
          },
          "description": "SensorInputConfig reflects a group of sensors and their cadences."
        },
        "sensor_output_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceSensorOutputConfig"
          },
          "title": "SensorOutputConfig reflects a group of sensors and their destinations"
        }
      },
      "title": "CollectionJobConfiguration that encapsulates bunch of sensor configs across devices or one device group with an application\ncontext"
    },
    "collection_serviceCollectionJobStatus": {
      "type": "object",
      "properties": {
        "application_context": {
          "$ref": "#/definitions/collection_serviceApplicationContext",
          "description": "Unique handle to identify your application's collection job , serves as Key to Object on which CRUD ops are done."
        },
        "creation_time": {
          "type": "string",
          "format": "uint64",
          "title": "UTC Creation Time of the job as epoch time in milliseconds when request was created"
        },
        "deletion_time": {
          "type": "string",
          "format": "uint64",
          "title": "UTC Deletion Time of job as epoch time in milliseconds when request for deletion was initiated"
        },
        "progress": {
          "type": "number",
          "format": "float",
          "title": "Current Progress as percentage"
        },
        "status": {
          "$ref": "#/definitions/collection_serviceStatus",
          "title": "Current Status of the job i.e, READY,NOT_READY,FAILED"
        },
        "phase": {
          "$ref": "#/definitions/collection_servicePhase",
          "title": "Current Phase of Request itself, ACTIVE or TERMINATING OR TERMINATION_FAILED OR DELETED"
        },
        "collector_type": {
          "$ref": "#/definitions/common_collection_dataCollectionType",
          "title": "CollectType"
        },
        "job_error": {
          "$ref": "#/definitions/collection_serviceError",
          "description": "If the job is FAILED or TERMINATION_FAILED state, descriptive error indicating failure reason\nError if any. Its a summary ."
        }
      },
      "title": "CollectionJobStatus represents current status of the job\nContextId : robot.collector.helios.collectionjob.summary"
    },
    "collection_serviceCollectionMode": {
      "type": "object",
      "properties": {
        "lifetime_type": {
          "$ref": "#/definitions/collection_serviceJobLifetimeType",
          "title": "lifetime of job"
        },
        "collector_type": {
          "$ref": "#/definitions/common_collection_dataCollectionType",
          "title": "Collection Type"
        },
        "schedule_id": {
          "type": "string",
          "description": "Calendar-ID: Calendar schedule to follow for CALENDAR_DRIVEN jobs . NOT Supported as of now."
        },
        "n_collections": {
          "type": "integer",
          "format": "int64",
          "description": "Number of collections to run before auto-deletion.\nUsed only when lifetime_type is AUTO_DELETE_AFTER_N_SAMPLES.\nNumber of collections represents cadence cycle irrespective of out come of each collection which may be SUCCESS\nor FAILED.\nOnly supported for collections where collector intiates the connection to device i,e, SNMP and CLI."
        }
      }
    },
    "collection_serviceCollectionState": {
      "type": "string",
      "enum": [
        "UNKNOWN_COLLECTION_STATE",
        "ACTIVE_STATE",
        "INACTIVE_STATE",
        "ACCEPTED_STATE"
      ],
      "default": "UNKNOWN_COLLECTION_STATE",
      "description": "- ACTIVE_STATE: Object is behaving as expected\n - INACTIVE_STATE: Object is in a bad state.\n - ACCEPTED_STATE: Object is under evaluation",
      "title": "Collection Operation states of an object"
    },
    "collection_serviceCollectionStatus": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/collection_serviceCollectionState",
          "title": "Object state"
        },
        "error": {
          "$ref": "#/definitions/collection_serviceError",
          "title": "Error if any"
        },
        "reported_time": {
          "type": "string",
          "format": "uint64",
          "title": "Event time"
        }
      },
      "title": "Operational status of collection"
    },
    "collection_serviceConfigurationCommitState": {
      "type": "string",
      "enum": [
        "UNKNOWN_CONFIG_COMMIT_STATE",
        "COMMITTED",
        "NOT_COMMITTED"
      ],
      "default": "UNKNOWN_CONFIG_COMMIT_STATE",
      "description": "- COMMITTED: Control config for device was successfully converged based on target state\n - NOT_COMMITTED: Control config for device was not successfully converged based on target state",
      "title": "Collection Configuration state"
    },
    "collection_serviceCreateCollectionJobRequest": {
      "type": "object",
      "properties": {
        "collection_job": {
          "$ref": "#/definitions/collection_serviceCollectionJobConfiguration",
          "title": "CollectionJobConfiguration describing collection job with application context as key"
        }
      },
      "title": "CreateCollectionJobRequest"
    },
    "collection_serviceCreateCollectionJobResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Sync Request reply , indicating whether request has accepted or rejected"
        }
      }
    },
    "collection_serviceDeleteCollectionJobResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Sync Request reply , indicating whether request has accepted or rejected"
        }
      }
    },
    "collection_serviceDestination": {
      "type": "object",
      "properties": {
        "destination_id": {
          "type": "string",
          "title": "Unique identifier for Destination Provider in Inventory"
        },
        "context_id": {
          "type": "string",
          "description": "Destination context identifier.\nIt could be topic name if destination is message bus.\nThe combination of destination_id and context_id needs to be unique for Destination. What context id\nmeans depends on the Destination type of Destination provider.\nIf GRPC is destination type, context_id is not used and will be ignored."
        },
        "destination_name": {
          "type": "string",
          "title": "Not used during Write, Optionally filled during Get API's.\nMaps to destination provider name in DLM"
        }
      },
      "description": "Destination identifier to uniquely identify a destination\nOutput encoding format for destination is derived from Inventory destination_id."
    },
    "collection_serviceDeviceData": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "string",
          "title": "UUID of device in CW inventory"
        },
        "host_name": {
          "type": "string",
          "title": "Host name  of device in CW inventory.Optional to populate"
        }
      },
      "title": "Device Data"
    },
    "collection_serviceDeviceSet": {
      "type": "object",
      "properties": {
        "devices": {
          "$ref": "#/definitions/collection_serviceDevices",
          "description": "Devices or Routers identified as UUID's in Inventory in Crosswork."
        },
        "device_group": {
          "type": "string",
          "description": "Device group id identified by device ‘tags’ in Crosswork."
        }
      },
      "description": "Device Grouping Object , for a given request set one of either one of device grouping\ni.e, list of devices or a device group not both. OneOf construct is enforced at runtime."
    },
    "collection_serviceDevices": {
      "type": "object",
      "properties": {
        "device_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of device_ids, refers to uuid in Crosswork Inventory"
        }
      }
    },
    "collection_serviceError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "title": "Message is a textual description of reason for rejection, and can be safely passed on to operator through logs\nor UI"
        }
      },
      "title": "Error  associated with an Object"
    },
    "collection_serviceFilter": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/collection_serviceFilterOperator",
          "title": "the filter logical or conditional operator ex. AND, OR, \u003e, \u003c"
        },
        "field_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceFilterField"
          },
          "title": "the filter criteria list"
        }
      },
      "title": "Filter"
    },
    "collection_serviceFilterField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "title": "field to filter on"
        },
        "value": {
          "type": "string",
          "description": "field value to filter on.  Note for non string backend will convert to honor actual db type."
        }
      }
    },
    "collection_serviceFilterOperator": {
      "type": "string",
      "enum": [
        "UNKNOWN_OPERATOR",
        "OPERATOR_OR",
        "OPERATOR_AND",
        "OPERATOR_EQ",
        "OPERATOR_REGEX"
      ],
      "default": "UNKNOWN_OPERATOR"
    },
    "collection_serviceGetCollectionControlStatusResponse": {
      "type": "object",
      "properties": {
        "collection_control_status_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceCollectionControlStatus"
          },
          "description": "Status of job over a list of devices."
        },
        "query_options": {
          "$ref": "#/definitions/collection_serviceQueryOptions",
          "title": "Pagination and other query options"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Request reply , indicating whether request has accepted or rejected"
        }
      },
      "description": "CollectionControlStatusDeviceResponse indicates the list of devices for which the job is successfully processed."
    },
    "collection_serviceGetCollectionDataMetricsResponse": {
      "type": "object",
      "properties": {
        "collection_data_metrics_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceCollectionDataMetrics"
          },
          "title": "CollectionJobStatus represents current status of the job"
        },
        "query_options": {
          "$ref": "#/definitions/collection_serviceQueryOptions",
          "title": "Pagination and other query options"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Sync Request reply , indicating whether request has accepted or rejected"
        }
      },
      "title": "GetCollectionDataMetricsResponse"
    },
    "collection_serviceGetCollectionDataStatusResponse": {
      "type": "object",
      "properties": {
        "collection_data_status_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceCollectionDataStatus"
          },
          "title": "The input and output collection"
        },
        "query_options": {
          "$ref": "#/definitions/collection_serviceQueryOptions",
          "title": "Pagination and other query options"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Result reply"
        }
      },
      "description": "CollectionJobDeviceSetStatus indicates the list of devices for which the job is successfully processed."
    },
    "collection_serviceGetCollectionJobConfigResponse": {
      "type": "object",
      "properties": {
        "collection_job_configuration_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceCollectionJobConfiguration"
          },
          "title": "CollectionJobConfiguration contains configuration for device and sensors"
        },
        "query_options": {
          "$ref": "#/definitions/collection_serviceQueryOptions",
          "title": "Pagination and other query options"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Sync Request reply , indicating whether request has accepted or rejected"
        }
      },
      "title": "Returns a list of Collection Job Config"
    },
    "collection_serviceGetCollectionJobCountResponse": {
      "type": "object",
      "properties": {
        "job_count": {
          "type": "string",
          "format": "uint64",
          "title": "job count"
        },
        "input_collection_count": {
          "type": "string",
          "format": "uint64",
          "title": "the number of input sensor collection endpoints for given collection job(s)"
        },
        "output_collection_count": {
          "type": "string",
          "format": "uint64",
          "title": "the number of output collection endpoints for given collection job(s)"
        },
        "input_error_collection_count": {
          "type": "string",
          "format": "uint64",
          "title": "the number of input sensor collection endpoints for given collection job(s)"
        },
        "output_error_collection_count": {
          "type": "string",
          "format": "uint64",
          "title": "the number of output collection endpoints for given collection job(s)"
        },
        "control_error_count": {
          "type": "string",
          "format": "uint64",
          "title": "the number of output collection endpoints for given collection job(s)"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Result"
        }
      },
      "title": "Return a total count of collect jobs and total collection endpoints and errors in the system if no application context\nis provided.  If application context is provided counts are for that collection job"
    },
    "collection_serviceGetCollectionJobSummaryResponse": {
      "type": "object",
      "properties": {
        "collection_job_status_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceCollectionJobStatus"
          },
          "title": "CollectionJobStatus represents current status of the job"
        },
        "query_options": {
          "$ref": "#/definitions/collection_serviceQueryOptions",
          "title": "Pagination and other query options"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Sync Request reply , indicating whether request has accepted or rejected"
        }
      }
    },
    "collection_serviceGetIsResourceInUseResponse": {
      "type": "object",
      "properties": {
        "is_in_use": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether a resource is in used or not"
        },
        "result": {
          "$ref": "#/definitions/collection_serviceResult",
          "title": "Sync Request reply , indicating whether request has accepted or rejected"
        }
      },
      "title": "Response to check whether a resource is in use"
    },
    "collection_serviceInputMetrics": {
      "type": "object",
      "properties": {
        "device_data": {
          "$ref": "#/definitions/collection_serviceDeviceData",
          "title": "Device data"
        },
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor"
        },
        "metrics": {
          "$ref": "#/definitions/collection_serviceMetrics",
          "title": "Input side metrics"
        }
      }
    },
    "collection_serviceInputStatus": {
      "type": "object",
      "properties": {
        "device_data": {
          "$ref": "#/definitions/collection_serviceDeviceData",
          "title": "Device data"
        },
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor"
        },
        "collection_status": {
          "$ref": "#/definitions/collection_serviceCollectionStatus",
          "title": "Input side collection state"
        }
      },
      "title": "Collection input status"
    },
    "collection_serviceJobDeviceSet": {
      "type": "object",
      "properties": {
        "device_set": {
          "$ref": "#/definitions/collection_serviceDeviceSet"
        }
      },
      "title": "JobDeviceSet represents a list of devices or device group"
    },
    "collection_serviceJobLifetimeType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TEMPORAL_TYPE",
        "APPLICATION_MANAGED",
        "CALENDAR_MANAGED",
        "AUTO_DELETE_AFTER_N_SAMPLES"
      ],
      "default": "UNKNOWN_TEMPORAL_TYPE",
      "description": "- UNKNOWN_TEMPORAL_TYPE: Invalid Lifetime\n - APPLICATION_MANAGED: Create and Delete of Collection job is managed by Application\n - CALENDAR_MANAGED: Create and Delete of Collection job is managed by Calendaring service tied to a calendar schedule.\nNot Supported as of now.\n - AUTO_DELETE_AFTER_N_SAMPLES: Auto Delete of Collection job after N Collections.",
      "title": "Types of job life times supported"
    },
    "collection_serviceKeyValueMetric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Key Value metric"
    },
    "collection_serviceMetrics": {
      "type": "object",
      "properties": {
        "key_value_metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceKeyValueMetric"
          }
        }
      },
      "title": "Message containing various collection metrics\nFollowing metrics need to be collected\n last_collection_time_msec = 1;\n last_polling_cadence_msec = 2;\n total_collected_bytes_count = 3;\n total_collected_errors_count = 4;\n total_write_errors_count = 5;\n total_collected_msgs_count = 6;\n total_dropped_msgs_count = 7;\n last_device_latency_msec = 8;"
    },
    "collection_serviceOutputMetrics": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/collection_serviceDestination",
          "title": "Destination"
        },
        "device_data": {
          "$ref": "#/definitions/collection_serviceDeviceData",
          "title": "Device data"
        },
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor"
        },
        "metrics": {
          "$ref": "#/definitions/collection_serviceMetrics",
          "title": "Input side metrics"
        }
      }
    },
    "collection_serviceOutputStatus": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/collection_serviceDestination",
          "title": "Destination"
        },
        "device_data": {
          "$ref": "#/definitions/collection_serviceDeviceData",
          "title": "Device data"
        },
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor"
        },
        "collection_status": {
          "$ref": "#/definitions/collection_serviceCollectionStatus",
          "title": "Output side  collection status per destination"
        }
      },
      "title": "Collection output status"
    },
    "collection_servicePhase": {
      "type": "string",
      "enum": [
        "UNKNOWN_PHASE",
        "ACTIVE",
        "TERMINATING",
        "TERMINATION_FAILED",
        "DELETED"
      ],
      "default": "UNKNOWN_PHASE",
      "description": "- ACTIVE: Request is active , Collection  Job associated with app Context may be in any one of the above states\n - TERMINATING: Request is marked for deletion , Collection Job associated with app Context is queued for deletion\n - TERMINATION_FAILED: Request is marked for deletion , Collection Job was failed to be deleted, even in one of the devices.\n - DELETED: Request is successfully deleted from the Collection Service on all devices. This phase will only appear in bus\nnotifications, will not appear in GetJobStatus, as the job will be deleted from DB.",
      "title": "Phase indicates whether Request asscociated with AppContext is Alive or marked for deletion within collection service"
    },
    "collection_serviceQueryOptions": {
      "type": "object",
      "properties": {
        "page_token": {
          "type": "string",
          "title": "Page token to echo back to get next page, if collection_job_device_sets is empty or page token is empty ,\nthen there is no more results"
        },
        "page_size": {
          "type": "integer",
          "format": "int64",
          "title": "page_size"
        },
        "filter_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceFilter"
          },
          "title": "filtering options"
        },
        "filter_query": {
          "type": "string",
          "title": "Reserved for future use. Not used as of CW 3.1"
        }
      },
      "title": "Query Options"
    },
    "collection_serviceRequestResult": {
      "type": "string",
      "enum": [
        "UNKNOWN_RESULT",
        "REJECTED",
        "ACCEPTED"
      ],
      "default": "UNKNOWN_RESULT",
      "description": "- REJECTED: Request has been rejected\n - ACCEPTED: Request has been accepted for processing",
      "title": "Request - reply\nresponse"
    },
    "collection_serviceResult": {
      "type": "object",
      "properties": {
        "request_result": {
          "$ref": "#/definitions/collection_serviceRequestResult",
          "description": "ResultValue indicated accept/reject for a request, not the outcome of the work itself."
        },
        "error": {
          "$ref": "#/definitions/collection_serviceError",
          "description": "Message is a textual description of reason for rejection, and can be safely passed on to operator through logs\nor UI."
        }
      },
      "description": "Result is used to convey whether an operation (individual or in a batch)\nhas been accepted or rejected. For sync API's an error or rejection indicates failure of operation.\nA string error message accompanies rejection to support troubleshooting. For notification objects,\nrejection represents failure to do intended operation."
    },
    "collection_serviceSensorConfigCommitted": {
      "type": "object",
      "properties": {
        "sensor_input_config_committed_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceSensorInputConfigCommitted"
          }
        },
        "sensor_output_config_committed_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection_serviceSensorOutputConfigCommitted"
          }
        }
      },
      "description": "SensorConfig describing cadence from input and output side along with destination."
    },
    "collection_serviceSensorInputConfig": {
      "type": "object",
      "properties": {
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Path represents sensor"
        },
        "cadence_in_millisec": {
          "type": "string",
          "format": "uint64",
          "title": "Push or Poll cadence"
        }
      },
      "description": "SensorInputConfig  represents device side collection at some cadence."
    },
    "collection_serviceSensorInputConfigCommitted": {
      "type": "object",
      "properties": {
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor Path"
        },
        "cadence_in_millisec": {
          "type": "string",
          "format": "uint64",
          "description": "This is the cadence at which path is collected from device to collector post optimization across all apps."
        }
      }
    },
    "collection_serviceSensorOutputConfig": {
      "type": "object",
      "properties": {
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor path, Every sensor path on the input side needs to have one mapping on the output side"
        },
        "filter_profile_id": {
          "type": "string",
          "description": "Optional filter_profile_id, forward looking not used."
        },
        "destination": {
          "$ref": "#/definitions/collection_serviceDestination",
          "description": "Destinations a sensor data is written to."
        }
      },
      "description": "Sensor Output represents output of sensor to a destination for given sensor which is a topic on a message broker or\nGRPC server."
    },
    "collection_serviceSensorOutputConfigCommitted": {
      "type": "object",
      "properties": {
        "sensor_data": {
          "$ref": "#/definitions/common_collection_dataSensorData",
          "title": "Sensor Path"
        },
        "cadence_in_millisec": {
          "type": "string",
          "format": "uint64",
          "description": "This is a cadence at which the data is sent out to a given destination post optimization across all apps."
        },
        "destination": {
          "$ref": "#/definitions/collection_serviceDestination",
          "title": "Destination"
        }
      }
    },
    "collection_serviceStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_STATUS",
        "NOTREADY",
        "READY",
        "FAILED"
      ],
      "default": "UNKNOWN_STATUS",
      "description": "- NOTREADY: NOTREADY indicates that initial setup of the object is in progress,\nor being retried.\n - READY: READY indicates that initial setup of the object is complete and\ncollection organised. Status moves to READY only on success across all devices.\n - FAILED: An unrecoverable failure has occurred, associated with the object. Status moves to FAILED , even if one of the\ndevices within request encountered failure.",
      "title": "State of async Object App Context within the collection service with respect operational state on one or more devices"
    },
    "common_collection_dataCliSensor": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "title": "Example show clock"
        },
        "device_package": {
          "$ref": "#/definitions/common_collection_dataDevicePackage",
          "title": "Total size  is limited to 512 characters"
        }
      }
    },
    "common_collection_dataCliYangSensor": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Example cli_xr_show_logging:syslog"
        }
      }
    },
    "common_collection_dataCollectionType": {
      "type": "string",
      "enum": [
        "UNKNOWN_COLLECTOR",
        "MDT_COLLECTOR",
        "SNMP_COLLECTOR",
        "CLI_COLLECTOR",
        "TRAP_COLLECTOR"
      ],
      "default": "UNKNOWN_COLLECTOR",
      "title": "Supported Collect types"
    },
    "common_collection_dataDevicePackage": {
      "type": "object",
      "properties": {
        "device_package_name": {
          "type": "string",
          "title": "XDE device package name"
        },
        "function_name": {
          "type": "string",
          "title": "XDE function name within package"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/common_collection_dataKeyValue"
          },
          "title": "Parameters for custom device packages"
        }
      },
      "title": "XDE Device package"
    },
    "common_collection_dataKeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "bytes_value": {
          "type": "string",
          "format": "byte"
        },
        "string_value": {
          "type": "string"
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean"
        },
        "uint32_value": {
          "type": "integer",
          "format": "int64"
        },
        "uint64_value": {
          "type": "string",
          "format": "uint64"
        },
        "sint32_value": {
          "type": "integer",
          "format": "int32"
        },
        "sint64_value": {
          "type": "string",
          "format": "int64"
        },
        "double_value": {
          "type": "number",
          "format": "double"
        },
        "float_value": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "Generic Key value message"
    },
    "common_collection_dataMDTSensor": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Example Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/latest/generic-counters"
        }
      }
    },
    "common_collection_dataSensorData": {
      "type": "object",
      "properties": {
        "snmp_sensor": {
          "$ref": "#/definitions/common_collection_dataSnmpSensor"
        },
        "snmp_yang_sensor": {
          "$ref": "#/definitions/common_collection_dataSnmpYangSensor"
        },
        "cli_yang_sensor": {
          "$ref": "#/definitions/common_collection_dataCliYangSensor"
        },
        "cli_sensor": {
          "$ref": "#/definitions/common_collection_dataCliSensor"
        },
        "mdt_sensor": {
          "$ref": "#/definitions/common_collection_dataMDTSensor"
        },
        "trap_sensor": {
          "$ref": "#/definitions/common_collection_dataTrapSensor"
        },
        "trap_yang_sensor": {
          "$ref": "#/definitions/common_collection_dataTrapYangSensor"
        }
      },
      "title": "Sensor Data"
    },
    "common_collection_dataSnmpMib": {
      "type": "object",
      "properties": {
        "oid": {
          "type": "string",
          "title": "OID of the path Example 1.3.5.6.1"
        },
        "snmp_operation": {
          "$ref": "#/definitions/common_collection_dataSnmpOperation",
          "title": "SNMP operation type"
        }
      }
    },
    "common_collection_dataSnmpOperation": {
      "type": "string",
      "enum": [
        "UNKNOWN_SNMP_OPERATION",
        "WALK",
        "SCALAR",
        "TABLE"
      ],
      "default": "UNKNOWN_SNMP_OPERATION",
      "title": "SNMP operation types"
    },
    "common_collection_dataSnmpSensor": {
      "type": "object",
      "properties": {
        "snmp_mib": {
          "$ref": "#/definitions/common_collection_dataSnmpMib",
          "title": "Snmp mib"
        },
        "device_package": {
          "$ref": "#/definitions/common_collection_dataDevicePackage",
          "title": "Total size  is limited to 512 characters"
        }
      }
    },
    "common_collection_dataSnmpYangSensor": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Example SNMPv2-MIB:SNMPv2-MIB/system"
        }
      }
    },
    "common_collection_dataTrapSensor": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Example snmp-trap-oper:traps/notifications"
        }
      }
    },
    "common_collection_dataTrapYangSensor": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Example ISIS-MIB:notifications,SNMPv2-MIB:notifications,IF-MIB:notifications"
        }
      }
    }
  }
}
