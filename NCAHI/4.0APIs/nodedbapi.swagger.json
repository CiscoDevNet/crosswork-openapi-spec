{
  "swagger": "2.0",
  "info": {
    "title": "proto/nodedbapi.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/credentials": {
      "delete": {
        "summary": "Delete bulk of credential profiles. Either all profiles would be deleted or none     \nRequest Body: RobotNodeCredentialsList\n   - Mandatory: Profile name to identify credentials to delete\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: \"/v2/dlm/invmgr/credentials/delete\"",
        "operationId": "deleteCredentialProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeCredentialsList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Add/Overwrite the bulk of credential profiles. Either all profiles would be added/overwritten or none.       \nRequest Body: RobotNodeCredentialsList\n  - Mandatory: Profile name to identify credentials to add\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: \"/v2/dlm/invmgr/credentials/post\"",
        "operationId": "setCredentialProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeCredentialsList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Update credentials associated to a Profile name. Adds or updates Credential Profile info by the client set fields, ignoring default values.  Supported info are Snmpv2, Snmpv3, and username/password combinations",
        "description": "```\nInput:\n     RobotNodeCredentials\n         - Mandatory: Profile name to identify credentials to update\n```\n```\nOutput:\n     RobotNodeCredentials\n         - Returns the given updates that were applied\n```\n\nUpdate the bulk of credential profiles. Either all profiles would be updated or none. Ignore default values.         \nRequest Body: RobotNodeCredentialsList\n   - Mandatory: Profile name to identify credentials to update\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: \"/v2/dlm/invmgr/credentials/put\"",
        "operationId": "updateCredentialProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeCredentialsList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/credentials/query": {
      "post": {
        "summary": "Retrieves credentials. This api returns one or all credential data in the database, depending on the fields provided in the request structure. Filter structure (RobotNodeData) would be supplied as a field in the structure RobotNodeGetReq, which is used to call this function.",
        "description": "```\nInput:\n     RobotNodeGetReq\n         - RobotNodeData: provide Uuid or Profile for retrieving a single Credential Profile\n         - RobotNodeData: provide Empty Filter structure for retrieving all Credential Profiles\n```\n```\nOutput:\n     RobotNodeCredGetResp\n         - Contains one or more RobotNodeCredentials, depending on client request\n```\nDEPRECATED URL : post: /v1/dlm/invmgr/credentials/get",
        "operationId": "GetCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeCredGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/csvupload": {
      "delete": {
        "summary": "CSV upload for delete operations. Nodes, Credentials, Tags Csv files can be uploaded using this API.",
        "description": "Request Body: RobotCsvUploadReq\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/csvupload/delete",
        "operationId": "DeleteWithCsvUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotCsvUploadReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "CSV upload for Add/Overwirte operations. Nodes, Credentials, Tags and\nProviders Csv files can be uploaded using this API.\nRequest Body: RobotCsvUploadReq\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/csvupload/post",
        "operationId": "SetWithCsvUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotCsvUploadReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "CSV upload for update operations. Nodes, Credentials, Tags Csv files can be uploaded using this API.",
        "description": "Request Body: RobotCsvUploadReq\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/csvupload/put",
        "operationId": "UpdateWithCsvUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotCsvUploadReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/devicemapping": {
      "put": {
        "operationId": "UpdateDGDeviceMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/hapool": {
      "delete": {
        "summary": "Delete HA pools. A HA pool can be deleted only if no data gateway is\nreferencing this pool. An error is returned otherwise.\nRequest Body: HAPoolList\nResponse Body: RobotNodeJob\nURL : delete: /crosswork/inventory/v1/dg/hapool",
        "operationId": "DeleteHAPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Adds HA pools information in the CrossWork.\nRequest Body: HAPoolList\nResponse Body: RobotNodeJob\nURL : post: /crosswork/inventory/v1/dg/hapool",
        "operationId": "SetHAPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiHAPoolList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Updates HA pools information. Fields not included in RobotDataGateway\nwill remain unchanged.",
        "description": "Request Body: HAPoolList\nResponse Body: RobotNodeJob\nURL : put: /crosswork/inventory/v1/dg/hapool",
        "operationId": "UpdateHAPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiHAPoolList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/hapool/query": {
      "post": {
        "summary": "Retrieves a list of HA pools. This api returns HAPools,\nfilters can be applied to retrieve specific sets of HA pools by\nspecifying one or more fields to match. User can filter on combinations\nof supported fields. The exceptions and details of the filter structure\nare listed below. This api takes HAPoolGetReq as input, in which\nthe user can specifiy the limit(page size), next_from, filters (HAPool).",
        "description": "URL : post: /crosswork/inventory/v1/dg/hapool/query",
        "operationId": "GetHAPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiHAPoolGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiHAPoolGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/pdg": {
      "delete": {
        "summary": "Delete Dg Enrollments. A Dg Enrollment can be deleted only if no device is\nreferencing this Dg Enrollment. An error is returned otherwise.\nRequest Body: RobotDGEnrollmentList\nResponse Body: RobotNodeJob\nURL : delete: /crosswork/inventory/v1/dg/pdg",
        "operationId": "DeleteDgEnrollments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Adds Dg Enrollments information in the CrossWork.\nRequest Body: RobotDGEnrollmentList\nResponse Body: RobotNodeJob\nURL : post: /crosswork/inventory/v1/dg/pdg",
        "operationId": "SetDgEnrollments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotDataGatewayList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Updates Dg Enrollments information. Fields not included in RobotDataGateway\nwill remain unchanged.",
        "description": "Request Body: RobotDGEnrollmentList\nResponse Body: RobotNodeJob\nURL : put: /crosswork/inventory/v1/dg/pdg",
        "operationId": "UpdateDgEnrollments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotDataGatewayList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/pdg/query": {
      "post": {
        "summary": "Retrieves a list of DG enrollments. This api returns RobotDataGateway,\nfilters can be applied to retrieve specific sets of Dg Enrollments by\nspecifying one or more fields to match. User can filter on combinations\nof supported fields. The exceptions and details of the filter structure\nare listed below. This api takes RobotDGEnrollmentGetReq as input, in which\nthe user can specifiy the limit(page size), next_from, filters (RobotDataGateway).",
        "description": "URL : post: /crosswork/inventory/v1/dg/pdg/query",
        "operationId": "GetDgEnrollments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotDataGatewayGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotDataGatewayGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/vdg": {
      "delete": {
        "summary": "Delete virtual data gateways. A virtual data gateway can be deleted only if no device is\nattached to it. An error is returned otherwise.\nRequest Body: HAPoolList\nResponse Body: RobotNodeJob\nURL : delete: /crosswork/inventory/v1/dg/vdg",
        "operationId": "DeleteVirtualDGs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Adds virtual data gateways information in the CrossWork.\nRequest Body: HAPoolList\nResponse Body: RobotNodeJob\nURL : post: /crosswork/inventory/v1/dg/vdg",
        "operationId": "SetVirtualDGs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiVirtualDGList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Updates virtual data gateways information. Fields not included in RobotDataGateway\nwill remain unchanged.",
        "description": "Request Body: HAPoolList\nResponse Body: RobotNodeJob\nURL : put: /crosswork/inventory/v1/dg/vdg",
        "operationId": "UpdateVirtualDGs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiVirtualDGList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/dg/vdg/query": {
      "post": {
        "summary": "Retrieves a list of virtual data gateways. This api returns virtual data gateways,\nfilters can be applied to retrieve specific sets of virtual data gateways by\nspecifying one or more fields to match. User can filter on combinations\nof supported fields. The exceptions and details of the filter structure\nare listed below. This api takes HAPoolGetReq as input, in which\nthe user can specifiy the limit(page size), next_from, filters (HAPool).",
        "description": "URL : post: /crosswork/inventory/v1/dg/vdg/query",
        "operationId": "GetVirtualDGs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiVirtualDGGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiVirtualDGGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/jobs/query": {
      "post": {
        "summary": "Read the Tags information\nRequest Body: RobotNodeJobGetReq\n  -- Mandatory:  RobotNodeJobGetReq, even if it is empty\nResponse Body: RobotNodeJobList\nFilters supported: JobId or State. Output is always sorted using creation time.\nDEPRECATED URL : post: /v2/dlm/invmgr/jobs/get",
        "operationId": "GetJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJobList"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJobGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/locknodes": {
      "post": {
        "summary": "Lock/Unlock all the nodes requested or failes all of them.\nRequest Body:  RobotNodeLockReq\nResponse Body: RobotNodeLockResp\nDEPRECATED URL : post: /v2/dlm/invmgr/locknode/post",
        "operationId": "lockNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeLockResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeLockReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/nodes": {
      "delete": {
        "summary": "Delete the bulk of nodes from CrossWorks, Either all nodes would be deleted or none. \nRequest Body: RobotNodeDataList\n  - Mandatory: Valid \"Inventory Key Type\" and Key, to identify which device to update\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: \"/v2/dlm/invmgr/nodes/delete\"",
        "operationId": "DeleteNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Adds or Overwrites node information in the CrossWork.  Client provides info as list of RobotNodeData. Complete request would fail or succeed. No partial operation.\nRequest Body: RobotNodeDataList\n     - Mandatory: Valid \"Inventory Key Type\" and Key, to identify which device to update. \nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/nodes/post",
        "operationId": "SetNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Updates the bulk of nodes in CrossWork. Complete request would fail or successed. No partial updates.  This function takes the populated fields provided in the input RobotNodeData struct, and either adds or updates those fields in the CrossWork. Default values of the fields are ignored\nRequest Body: RobotNodeDataList\n  - Mandatory: Valid \"Inventory Key Type\" and Key, to identify which device to update\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/nodes/put",
        "operationId": "UpdateNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/nodes/count": {
      "get": {
        "summary": "Retrieves a count of all nodes in the database. Argument needs to be a RobotNodeGetReq structure, but needs no field\n```\n Input:\n    RobotNodeGetReq -for Details, look at the Request Message\nOutput:\n     RobotNodeDataCount - Returns the number of nodes in the database\n```",
        "description": "DEPRECATED URL : post: /v1/dlm/invmgr/nodes/count",
        "operationId": "GetNodeCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataCount"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Number of nodes requested in the response.\nMax Limit and Default Limit are both 100.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sort_by.inv_key_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INVALID_TYPE",
              "UUID",
              "INVENTORY_ID",
              "NODE_IP",
              "SERIAL_NUMBER",
              "MAC",
              "HOST_NAME"
            ],
            "default": "INVALID_TYPE"
          },
          {
            "name": "sort_by.inventory_id",
            "description": "Custom unique device identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.node_ip.inet_af",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_INET_ADDR_TYPE_NONE",
              "ROBOT_INET_ADDR_TYPE_v4",
              "ROBOT_INET_ADDR_TYPE_v6"
            ],
            "default": "ROBOT_INET_ADDR_TYPE_NONE"
          },
          {
            "name": "sort_by.node_ip.inet_addr",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.node_ip.mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.uuid",
            "description": "Uuid is randomly generated by crossworks, readonly.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.mac",
            "description": "Chassis backplane Mac address.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.serial_number",
            "description": "Device Serial Number.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.host_name",
            "description": "Device Host name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.profile",
            "description": "MUST FIELD.\nCredential Profile applicable to this device.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.reachability_state",
            "description": "Reachability state.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CONN_STATE_INVALID",
              "CONN_STATE_UNKNOWN",
              "CONN_STATE_REACHABLE",
              "CONN_STATE_UNREACHABLE",
              "CONN_STATE_MAX",
              "CONN_STATE_DEGRADED"
            ],
            "default": "CONN_STATE_INVALID"
          },
          {
            "name": "sort_by.admin_state",
            "description": "Device Admin state.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_ADMIN_STATE_UNKNOWN",
              "ROBOT_ADMIN_STATE_UNMANAGED",
              "ROBOT_ADMIN_STATE_DOWN",
              "ROBOT_ADMIN_STATE_UP"
            ],
            "default": "ROBOT_ADMIN_STATE_UNKNOWN"
          },
          {
            "name": "sort_by.product_info.software_type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.software_version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.product_type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.product_family",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.product_series",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.manufacturer",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.sys_object_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.hw_change_timestamp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.config_change_timestamp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.capability",
            "description": "Device capability. Enum of TL1, SNMP, YANG, MDT, PDT, etc.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "YANG_MDT",
                "SCHEMA_MDT",
                "SCHEMA_PDT",
                "SNMP",
                "TL1",
                "YANG_CLI",
                "YANG_EPNM",
                "SNMPTRAPS",
                "GNMI"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort_by.product_info.device_type",
            "description": "Node Type. e.g. SWITCH, ROUTER..\n\n - NODE_TYPE_UNKNOWN: Not known\n - NODE_TYPE_ROUTER: Layer 3 router\n - NODE_TYPE_SWITCH: Layer 2 ethernet switch\n - NODE_TYPE_ROADM: Layer 1 optical add/drop device\n - NODE_TYPE_AMPLIFIER: Layer 1 optical repeater/ amplifier\n - NODE_TYPE_CBR: Converged broadband router",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NODE_TYPE_UNKNOWN",
              "NODE_TYPE_ROUTER",
              "NODE_TYPE_SWITCH",
              "NODE_TYPE_ROADM",
              "NODE_TYPE_AMPLIFIER",
              "NODE_TYPE_CBR"
            ],
            "default": "NODE_TYPE_UNKNOWN"
          },
          {
            "name": "sort_by.product_info.snmp_engine_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.product_info.syslog_format",
            "description": "Syslog format on the device.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "RFC_INVALID",
              "RFC_UNKNOWN",
              "RFC_5424",
              "RFC_3164"
            ],
            "default": "RFC_INVALID"
          },
          {
            "name": "sort_by.geo_info.coordinates.longitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort_by.geo_info.coordinates.latitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort_by.geo_info.coordinates.altitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort_by.geo_info.building",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.street",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.city",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.country",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.zip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.geo_info.range_incr.longitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort_by.geo_info.range_incr.latitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort_by.geo_info.range_incr.altitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort_by.routing_info.global_isis_system_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.global_ospf_router_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.router_loopback.inet_af",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_INET_ADDR_TYPE_NONE",
              "ROBOT_INET_ADDR_TYPE_v4",
              "ROBOT_INET_ADDR_TYPE_v6"
            ],
            "default": "ROBOT_INET_ADDR_TYPE_NONE"
          },
          {
            "name": "sort_by.routing_info.router_loopback.inet_addr",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.router_loopback.mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.mgmt_vrf",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.telemetry_intf_src_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.telemetry_intf_src_vrf",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.routing_info.telemetry_transport_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TRANSPORT_TYPE",
              "TCP_DIALOUT"
            ],
            "default": "UNKNOWN_TRANSPORT_TYPE"
          },
          {
            "name": "sort_by.routing_info.telemetry_device_encoding",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ENCODING",
              "GPBKV"
            ],
            "default": "UNKNOWN_ENCODING"
          },
          {
            "name": "sort_by.routing_info.te_router_id",
            "description": "Traffic engineering router id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.contact",
            "description": "Owner contact for this device.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.uptime",
            "description": "Device uptime.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.last_upd_time",
            "description": "Last time this Inventory Entry was Updated in DB.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sort_by.reachability_check",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REACH_CHECK_NONE",
              "REACH_CHECK_DISABLE",
              "REACH_CHECK_ENABLE"
            ],
            "default": "REACH_CHECK_NONE"
          },
          {
            "name": "sort_by.reachability_state_upd_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sort_by.operational_state",
            "description": "Device operational state -readonly.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_OPER_STATE_UNKNOWN",
              "ROBOT_OPER_STATE_UNMANAGED",
              "ROBOT_OPER_STATE_ADMIN_DOWN",
              "ROBOT_OPER_STATE_CHECKING",
              "ROBOT_OPER_STATE_OK",
              "ROBOT_OPER_STATE_ERROR",
              "ROBOT_OPER_STATE_LOCKED",
              "ROBOT_OPER_STATE_DELETING"
            ],
            "default": "ROBOT_OPER_STATE_UNKNOWN"
          },
          {
            "name": "sort_by.lock_status.lock_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.lock_status.state",
            "description": " - ERRORED: Node is in error state. This would happen when LOCK\nowner does not renew or release the state within timeout",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INVALID_STATE",
              "UNLOCKED",
              "LOCKED",
              "ERRORED"
            ],
            "default": "INVALID_STATE"
          },
          {
            "name": "sort_by.lock_status.owner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.lock_status.start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sort_by.lock_status.end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sort_by.errors",
            "description": "List of errors for the node - readonly.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort_by.dg_uuid",
            "description": "RobotDataGateway mapped_dg = 27;.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.direct_access",
            "description": "This attribute is only for internal use by scale testing. Not exposed via API/GUI/Swagger docs.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NOT_ALLOWED",
              "ALLOWED"
            ],
            "default": "NOT_ALLOWED"
          },
          {
            "name": "sort_by.dg_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.nso_state",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INVALID_NSO_OPER_STATE",
              "ASSOCIATED",
              "NOT_ASSOCIATED",
              "MATCH",
              "NO_MATCH",
              "ONBOARD_FAIL",
              "FETCH_SSH_KEYS_SCHEDULED",
              "FETCH_SSH_KEYS_STARTED",
              "FETCH_SSH_KEYS_FAILED",
              "CONNECT_SCHEDULED",
              "CONNECT_STARTED",
              "CONNECT_FAILED",
              "SYNC_FROM_SCHEDULED",
              "SYNC_FROM_STARTED",
              "SYNC_TO_SCHEDULED",
              "SYNC_TO_STARTED",
              "SYNCED",
              "SYNC_FAILED",
              "CHECK_SYNC_SCHEDULED",
              "CHECK_SYNC_STARTED",
              "NOT_SYNCED"
            ],
            "default": "INVALID_NSO_OPER_STATE"
          },
          {
            "name": "sort_by.NsoMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by.encryption",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next_from",
            "description": "Response would contain Data with keys \u003e next_from.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.inv_key_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INVALID_TYPE",
              "UUID",
              "INVENTORY_ID",
              "NODE_IP",
              "SERIAL_NUMBER",
              "MAC",
              "HOST_NAME"
            ],
            "default": "INVALID_TYPE"
          },
          {
            "name": "filter.inventory_id",
            "description": "Custom unique device identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.node_ip.inet_af",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_INET_ADDR_TYPE_NONE",
              "ROBOT_INET_ADDR_TYPE_v4",
              "ROBOT_INET_ADDR_TYPE_v6"
            ],
            "default": "ROBOT_INET_ADDR_TYPE_NONE"
          },
          {
            "name": "filter.node_ip.inet_addr",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.node_ip.mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.uuid",
            "description": "Uuid is randomly generated by crossworks, readonly.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.mac",
            "description": "Chassis backplane Mac address.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.serial_number",
            "description": "Device Serial Number.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.host_name",
            "description": "Device Host name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.profile",
            "description": "MUST FIELD.\nCredential Profile applicable to this device.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.reachability_state",
            "description": "Reachability state.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CONN_STATE_INVALID",
              "CONN_STATE_UNKNOWN",
              "CONN_STATE_REACHABLE",
              "CONN_STATE_UNREACHABLE",
              "CONN_STATE_MAX",
              "CONN_STATE_DEGRADED"
            ],
            "default": "CONN_STATE_INVALID"
          },
          {
            "name": "filter.admin_state",
            "description": "Device Admin state.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_ADMIN_STATE_UNKNOWN",
              "ROBOT_ADMIN_STATE_UNMANAGED",
              "ROBOT_ADMIN_STATE_DOWN",
              "ROBOT_ADMIN_STATE_UP"
            ],
            "default": "ROBOT_ADMIN_STATE_UNKNOWN"
          },
          {
            "name": "filter.product_info.software_type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.software_version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.product_type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.product_family",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.product_series",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.manufacturer",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.sys_object_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.hw_change_timestamp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.config_change_timestamp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.capability",
            "description": "Device capability. Enum of TL1, SNMP, YANG, MDT, PDT, etc.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "YANG_MDT",
                "SCHEMA_MDT",
                "SCHEMA_PDT",
                "SNMP",
                "TL1",
                "YANG_CLI",
                "YANG_EPNM",
                "SNMPTRAPS",
                "GNMI"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.product_info.device_type",
            "description": "Node Type. e.g. SWITCH, ROUTER..\n\n - NODE_TYPE_UNKNOWN: Not known\n - NODE_TYPE_ROUTER: Layer 3 router\n - NODE_TYPE_SWITCH: Layer 2 ethernet switch\n - NODE_TYPE_ROADM: Layer 1 optical add/drop device\n - NODE_TYPE_AMPLIFIER: Layer 1 optical repeater/ amplifier\n - NODE_TYPE_CBR: Converged broadband router",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NODE_TYPE_UNKNOWN",
              "NODE_TYPE_ROUTER",
              "NODE_TYPE_SWITCH",
              "NODE_TYPE_ROADM",
              "NODE_TYPE_AMPLIFIER",
              "NODE_TYPE_CBR"
            ],
            "default": "NODE_TYPE_UNKNOWN"
          },
          {
            "name": "filter.product_info.snmp_engine_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.product_info.syslog_format",
            "description": "Syslog format on the device.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "RFC_INVALID",
              "RFC_UNKNOWN",
              "RFC_5424",
              "RFC_3164"
            ],
            "default": "RFC_INVALID"
          },
          {
            "name": "filter.geo_info.coordinates.longitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.geo_info.coordinates.latitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.geo_info.coordinates.altitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.geo_info.building",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.street",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.city",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.country",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.zip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.geo_info.range_incr.longitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.geo_info.range_incr.latitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.geo_info.range_incr.altitude.value",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.routing_info.global_isis_system_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.global_ospf_router_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.router_loopback.inet_af",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_INET_ADDR_TYPE_NONE",
              "ROBOT_INET_ADDR_TYPE_v4",
              "ROBOT_INET_ADDR_TYPE_v6"
            ],
            "default": "ROBOT_INET_ADDR_TYPE_NONE"
          },
          {
            "name": "filter.routing_info.router_loopback.inet_addr",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.router_loopback.mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.mgmt_vrf",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.telemetry_intf_src_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.telemetry_intf_src_vrf",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.routing_info.telemetry_transport_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TRANSPORT_TYPE",
              "TCP_DIALOUT"
            ],
            "default": "UNKNOWN_TRANSPORT_TYPE"
          },
          {
            "name": "filter.routing_info.telemetry_device_encoding",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ENCODING",
              "GPBKV"
            ],
            "default": "UNKNOWN_ENCODING"
          },
          {
            "name": "filter.routing_info.te_router_id",
            "description": "Traffic engineering router id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.contact",
            "description": "Owner contact for this device.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.uptime",
            "description": "Device uptime.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.last_upd_time",
            "description": "Last time this Inventory Entry was Updated in DB.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "filter.reachability_check",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REACH_CHECK_NONE",
              "REACH_CHECK_DISABLE",
              "REACH_CHECK_ENABLE"
            ],
            "default": "REACH_CHECK_NONE"
          },
          {
            "name": "filter.reachability_state_upd_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "filter.operational_state",
            "description": "Device operational state -readonly.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ROBOT_OPER_STATE_UNKNOWN",
              "ROBOT_OPER_STATE_UNMANAGED",
              "ROBOT_OPER_STATE_ADMIN_DOWN",
              "ROBOT_OPER_STATE_CHECKING",
              "ROBOT_OPER_STATE_OK",
              "ROBOT_OPER_STATE_ERROR",
              "ROBOT_OPER_STATE_LOCKED",
              "ROBOT_OPER_STATE_DELETING"
            ],
            "default": "ROBOT_OPER_STATE_UNKNOWN"
          },
          {
            "name": "filter.lock_status.lock_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.lock_status.state",
            "description": " - ERRORED: Node is in error state. This would happen when LOCK\nowner does not renew or release the state within timeout",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INVALID_STATE",
              "UNLOCKED",
              "LOCKED",
              "ERRORED"
            ],
            "default": "INVALID_STATE"
          },
          {
            "name": "filter.lock_status.owner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.lock_status.start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "filter.lock_status.end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "filter.errors",
            "description": "List of errors for the node - readonly.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.dg_uuid",
            "description": "RobotDataGateway mapped_dg = 27;.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.direct_access",
            "description": "This attribute is only for internal use by scale testing. Not exposed via API/GUI/Swagger docs.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NOT_ALLOWED",
              "ALLOWED"
            ],
            "default": "NOT_ALLOWED"
          },
          {
            "name": "filter.dg_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.nso_state",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INVALID_NSO_OPER_STATE",
              "ASSOCIATED",
              "NOT_ASSOCIATED",
              "MATCH",
              "NO_MATCH",
              "ONBOARD_FAIL",
              "FETCH_SSH_KEYS_SCHEDULED",
              "FETCH_SSH_KEYS_STARTED",
              "FETCH_SSH_KEYS_FAILED",
              "CONNECT_SCHEDULED",
              "CONNECT_STARTED",
              "CONNECT_FAILED",
              "SYNC_FROM_SCHEDULED",
              "SYNC_FROM_STARTED",
              "SYNC_TO_SCHEDULED",
              "SYNC_TO_STARTED",
              "SYNCED",
              "SYNC_FAILED",
              "CHECK_SYNC_SCHEDULED",
              "CHECK_SYNC_STARTED",
              "NOT_SYNCED"
            ],
            "default": "INVALID_NSO_OPER_STATE"
          },
          {
            "name": "filter.NsoMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.encryption",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterData.SortBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterData.PageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filterData.PageNum",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filterData.Descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "filterData.MatchCase",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "filterData.Criteria",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/nodes/query": {
      "post": {
        "summary": "Retrieves a list of nodes. This api returns complete inventory data for each node. Various filters can be applied to retrieve\nspecific sets of nodes by specifying one or more fields to match. User can filter on combinations of supported fields. The exceptions\nand details of the filter structure are listed below. This api takes RobotNodeGetReq as input, in which the user\ncan specifiy the limit(page size), and Filter input.",
        "description": "Input:\n    RobotNodeGetReq -for Details, look at the Request Message\nOutput:\n     RobotNodeDataGetResp\n         - One or more RobotNodeData structs that match the given filter. Complete Node information will be provided\n```\n\nDEPRECATED URL : post: /v1/dlm/invmgr/nodes/get",
        "operationId": "GetNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/nodes/querybrief": {
      "post": {
        "summary": "Retrieves a list of nodes.\nDEPRECATED URL : post: /v1/dlm/invmgr/nodes/list",
        "operationId": "GetNodesList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/nodes/unassigntag": {
      "put": {
        "summary": "Removes one or more tags associations from the list of nodes. No partial un-assignment    \nRequest Body: RobotNodeDataList\n  - Mandatory: tag name \nResponse Body: RobotNodeJob\nDEPRECATED URL : post: \"/v2/dlm/invmgr/unassigntag/put\"",
        "operationId": "unassignTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeDataList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/nodeset": {
      "put": {
        "summary": "Update the data provided as input to the set of devices. Should be used \nto update bunch of nodes with common properties. Update would be \napplied to all the nodes in the list or none.\nRequest Body: RobotUpdateNodeSetReq\nResponse Body: RobotNodeJob or RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/nodeset/put",
        "operationId": "updateNodeSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotUpdateNodeSetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/onboarding": {
      "post": {
        "summary": "For automatic onboarding of Devices from NSO to CW or vice versa\nRequest Body : RobotProviderOnboarding\nResponse : RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/onboarding/post",
        "operationId": "SetWithProviderOnboarding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotProviderOnboarding"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/policies": {
      "delete": {
        "summary": "Delete policies. A policy can be deleted only if no device is\nreferencing this policy. An error is returned otherwise.\nRequest Body: RobotUniquePolicyList\nResponse Body: RobotNodeJob\nURL : delete: /crosswork/inventory/v1/policies",
        "operationId": "DeletePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Adds policy information in the CrossWork.\nRequest Body: RobotUniquePolicyList\nResponse Body: RobotNodeJob\nURL : post: /crosswork/inventory/v1/policies",
        "operationId": "SetPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotUniquePolicyList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Updates policy information. Fields not included in RobotUniquePolicy\nwill remain unchanged.",
        "description": "Request Body: RobotUniquePolicyList\nResponse Body: RobotNodeJob\nURL : put: /crosswork/inventory/v1/policies",
        "operationId": "UpdatePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotUniquePolicyList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/policies/query": {
      "post": {
        "summary": "Retrieves a list of policies. This api returns RobotUniquePolicy,\nfilters can be applied to retrieve specific sets of policies by\nspecifying one or more fields to match. User can filter on combinations\nof supported fields. The exceptions and details of the filter structure\nare listed below. This api takes RobotUniquePolicyGetReq as input, in which\nthe user can specifiy the limit(page size), next_from, filters\n(RobotUniquePolicy) and sort_by (Not supported in this version, default\nsorting is done using uuid in ascending order).",
        "description": "URL : post: /crosswork/inventory/v1/policies/query",
        "operationId": "GetPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotUniquePolicyGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotUniquePolicyGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/providers": {
      "delete": {
        "summary": "Delete providers. A provider can be deleted only if no device is\nreferencing this provider. An error is returned otherwise.\nRequest Body: RobotProviderDataList\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/providers/delete",
        "operationId": "DeleteProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "criteria",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Adds or overwrites providers information in the CrossWork.\nRequest Body: RobotProviderDataList\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/providers/post",
        "operationId": "SetProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotProviderDataList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "put": {
        "summary": "Updates providers information. Fields not included in RobotProviderData\nwill remain unchanged.",
        "description": "Request Body: RobotProviderDataList\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/providers/put",
        "operationId": "UpdateProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotProviderDataList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/providers/query": {
      "post": {
        "summary": "Retrieves a list of providers. This api returns KEY fields,\nhost-name, providertype, lock state, liveness state,\nconnectionprotocollist, ipaddress, port and deviceidformat. Various\nfilters can be applied to retrieve specific sets of providers by\nspecifying one or more fields to match. User can filter on combinations\nof supported fields. The exceptions and details of the filter structure\nare listed below. This api takes RobotProviderGetReq as input, in which\nthe user can specifiy the limit(page size), next_from, filters\n(RobotProviderData) and sort_by (Not supported in this version, default\nsorting is done using uuid in ascending order).",
        "description": "DEPRECATED URL : post: /v1/dlm/invmgr/providers/get",
        "operationId": "GetProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotProviderDataGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotProviderGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/tags": {
      "delete": {
        "summary": "Delete the tags in CrossWroks to be associated with the nodes. Either all tags would be deleted or none.\nRequest Body: RobotNodeTagList\n  -- Mandatory:  Tag Name\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/tags/delete",
        "operationId": "DeleteTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeTagList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      },
      "post": {
        "summary": "Create the tags in CrossWroks to be associated with the nodes. Either all tags would be created or none.\nRequest Body: RobotNodeTagList\n -- Mandatory:  Tag Name, category and created_by\nResponse Body: RobotNodeJob\nDEPRECATED URL : post: /v2/dlm/invmgr/tags/post",
        "operationId": "AddTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeJob"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeTagList"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v1/tags/query": {
      "post": {
        "summary": "Read the Tags information\nRequest Body: RobotNodeTagGetReq\n  -- Mandatory:  Filter, even if it is empty\nFilters supported: Name or Category or Created_by. Output is always sorted using Tags Name       \nResponse Body: RobotNodeTagList\nDEPRECATED URL : post: /v2/dlm/invmgr/tags/get",
        "operationId": "GetTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeTagList"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeTagGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v2/credentials/query": {
      "post": {
        "operationId": "GetCredentials2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeCredGetResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotNodeCredGetReq"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    },
    "/v2/dlm/invmgr/uuidtype/get": {
      "post": {
        "summary": "Check if given uuid is a provider\nRequest Body: RobotTypeUuid\nResponse Body: RobotTypeBool",
        "operationId": "GetUuidType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/robotapiRobotUuid"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/robotapiRobotUuid"
            }
          }
        ],
        "tags": [
          "NodeDb"
        ]
      }
    }
  },
  "definitions": {
    "HAPoolHAStatus": {
      "type": "string",
      "enum": [
        "INVALID_STATE",
        "UNKNOWN",
        "PROTECTED",
        "NOT_PROTECTED",
        "PARTIAL_PROTECTED",
        "NOT_PLANNED"
      ],
      "default": "INVALID_STATE"
    },
    "RobotDataGatewayConfigAdminState": {
      "type": "string",
      "enum": [
        "UNKNOWN_AS",
        "AS_UP",
        "AS_DOWN"
      ],
      "default": "UNKNOWN_AS"
    },
    "RobotDataGatewayConfigCert": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string"
        }
      }
    },
    "RobotDataGatewayConfigInterface": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "ip_addr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotInetAddr"
          }
        }
      }
    },
    "RobotDataGatewayConfigProfile": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "integer",
          "format": "int64"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "nics": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RobotDataGatewayConfigRole": {
      "type": "string",
      "enum": [
        "INVALID_ROLE",
        "ACTIVE",
        "PASSIVE",
        "SPARE",
        "UNASSIGNED",
        "ASSIGNED"
      ],
      "default": "INVALID_ROLE"
    },
    "RobotDataGatewayOperationalComponentState": {
      "type": "string",
      "enum": [
        "CS_UNKNOWN",
        "CS_UP",
        "CS_DOWN",
        "CS_DEGRADED"
      ],
      "default": "CS_UNKNOWN"
    },
    "RobotDataGatewayOperationalOperationStatusDetails": {
      "type": "object",
      "properties": {
        "component_name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/RobotDataGatewayOperationalComponentState"
        },
        "state_reason": {
          "type": "string"
        },
        "image_tag": {
          "type": "string"
        }
      }
    },
    "RobotDataGatewayOperationalOperationalState": {
      "type": "string",
      "enum": [
        "INVALID_OS",
        "OS_UNKNOWN",
        "OS_UP",
        "OS_ERROR",
        "OS_PARTIAL_UP"
      ],
      "default": "INVALID_OS"
    },
    "robotapiCurrentState": {
      "type": "object",
      "properties": {
        "element": {
          "$ref": "#/definitions/robotapiRobotNodeStateElement"
        },
        "value": {
          "$ref": "#/definitions/robotapiState"
        },
        "last_updated_time": {
          "type": "string",
          "format": "int64"
        },
        "next_check_time": {
          "type": "string",
          "format": "int64"
        },
        "info": {
          "type": "string"
        }
      }
    },
    "robotapiDirectAccess": {
      "type": "string",
      "enum": [
        "NOT_ALLOWED",
        "ALLOWED"
      ],
      "default": "NOT_ALLOWED"
    },
    "robotapiDouble": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "robotapiEncodingType": {
      "type": "string",
      "enum": [
        "UNKNOWN_ENCODING_TYPE",
        "ASCII",
        "BYTES",
        "PROTO",
        "JSON",
        "JSON_IETF",
        "XML",
        "YANG"
      ],
      "default": "UNKNOWN_ENCODING_TYPE"
    },
    "robotapiHAPool": {
      "type": "object",
      "properties": {
        "puuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ipaddrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiSouthBoundIP"
          }
        },
        "pdg_uuids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spares": {
          "type": "string",
          "format": "int64"
        },
        "protection_status": {
          "$ref": "#/definitions/HAPoolHAStatus"
        },
        "description": {
          "type": "string"
        },
        "subnet_mask": {
          "type": "string",
          "format": "int64"
        },
        "gateway": {
          "type": "string"
        }
      },
      "title": "HA pool\nwe will derive protected status using business logic"
    },
    "robotapiHAPoolGetReq": {
      "type": "object",
      "properties": {
        "criteria": {
          "type": "string",
          "description": "Request message to retrieve HA Pool information."
        }
      }
    },
    "robotapiHAPoolGetResp": {
      "type": "object",
      "properties": {
        "return": {
          "$ref": "#/definitions/robotapiRobotResponseInfo",
          "description": "Response message for HA Pool information."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiHAPool"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total HA pools available at present"
        }
      }
    },
    "robotapiHAPoolList": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiHAPool"
          }
        },
        "user": {
          "type": "string"
        }
      },
      "title": "List of HA pools, used in the api request/response"
    },
    "robotapiNsoDeviceOperState": {
      "type": "string",
      "enum": [
        "INVALID_NSO_OPER_STATE",
        "ASSOCIATED",
        "NOT_ASSOCIATED",
        "MATCH",
        "NO_MATCH",
        "ONBOARD_FAIL",
        "FETCH_SSH_KEYS_SCHEDULED",
        "FETCH_SSH_KEYS_STARTED",
        "FETCH_SSH_KEYS_FAILED",
        "CONNECT_SCHEDULED",
        "CONNECT_STARTED",
        "CONNECT_FAILED",
        "SYNC_FROM_SCHEDULED",
        "SYNC_FROM_STARTED",
        "SYNC_TO_SCHEDULED",
        "SYNC_TO_STARTED",
        "SYNCED",
        "SYNC_FAILED",
        "CHECK_SYNC_SCHEDULED",
        "CHECK_SYNC_STARTED",
        "NOT_SYNCED"
      ],
      "default": "INVALID_NSO_OPER_STATE"
    },
    "robotapiNsoServiceState": {
      "type": "string",
      "enum": [
        "INVALID_NSO_SERVICE_STATE",
        "REQUIRED",
        "NOT_REQUIRED",
        "SCHEDULED",
        "DEPLOYING",
        "DEPLOYED",
        "DEPLOY_ERROR",
        "CLEANUP_REQUIRED",
        "CLEANUP_SCHEDULED",
        "CLEANING",
        "CLEAN_ERROR"
      ],
      "default": "INVALID_NSO_SERVICE_STATE"
    },
    "robotapiRobotCsvUploadReq": {
      "type": "object",
      "properties": {
        "csv": {
          "type": "string",
          "format": "byte"
        },
        "user": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/robotapiRobotInventoryType"
        },
        "is_dryrun": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "robotapiRobotDGDeviceMapOperation": {
      "type": "string",
      "enum": [
        "UNKNOWN_OPER",
        "ADD_OPER",
        "REMOVE_OPER",
        "UPDATE_OPER"
      ],
      "default": "UNKNOWN_OPER"
    },
    "robotapiRobotDGDeviceMapping": {
      "type": "object",
      "properties": {
        "cdg_duuid": {
          "type": "string",
          "title": "Unique identifier for the mapped CDG\nthis is now virtual Datagateway uuid"
        },
        "mapping_oper": {
          "$ref": "#/definitions/robotapiRobotDGDeviceMapOperation",
          "title": "Operation to be performed on the device list. It can be : ADD,REMOVE,UPDATE"
        },
        "map_filter_expression": {
          "type": "string",
          "title": "Expression based on which we can filter and get the list of devices mapped to this CDG"
        },
        "device_uuid": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of the UUIDs of the devices mapped to this CDG"
        }
      }
    },
    "robotapiRobotDataGateway": {
      "type": "object",
      "properties": {
        "duuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "config_data": {
          "$ref": "#/definitions/robotapiRobotDataGatewayConfig"
        },
        "operational_data": {
          "$ref": "#/definitions/robotapiRobotDataGatewayOperational"
        }
      },
      "title": "Data gateway config and operational data\nWe will continue to keep this for physical Datagateway. And define new virtualDataGateway"
    },
    "robotapiRobotDataGatewayConfig": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotDataGatewayConfigInterface"
          }
        },
        "cert_chain": {
          "$ref": "#/definitions/RobotDataGatewayConfigCert"
        },
        "profile": {
          "$ref": "#/definitions/RobotDataGatewayConfigProfile"
        },
        "role": {
          "$ref": "#/definitions/RobotDataGatewayConfigRole"
        },
        "admin_state": {
          "$ref": "#/definitions/RobotDataGatewayConfigAdminState"
        },
        "pool_id": {
          "type": "string"
        },
        "vdg_uuid": {
          "type": "string"
        }
      }
    },
    "robotapiRobotDataGatewayGetReq": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Number of entries requested in the response."
        },
        "sort_by_field": {
          "type": "string",
          "description": "The field name in RobotDataGateway to use for sorting. If this field\nis omitted, data is sorted by default on name."
        },
        "last_key": {
          "type": "string",
          "description": "Ask for data beyond last_key per the sorted order."
        },
        "filter": {
          "$ref": "#/definitions/robotapiRobotDataGateway"
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        }
      }
    },
    "robotapiRobotDataGatewayGetResp": {
      "type": "object",
      "properties": {
        "return": {
          "$ref": "#/definitions/robotapiRobotResponseInfo"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotDataGateway"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total Data Gateways available at present"
        }
      }
    },
    "robotapiRobotDataGatewayList": {
      "type": "object",
      "properties": {
        "enrollments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotDataGateway"
          }
        },
        "user": {
          "type": "string"
        }
      },
      "title": "List of dataGateway enrollments, used in the api request/response"
    },
    "robotapiRobotDataGatewayOperational": {
      "type": "object",
      "properties": {
        "oper_state": {
          "$ref": "#/definitions/RobotDataGatewayOperationalOperationalState"
        },
        "oper_state_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotDataGatewayOperationalOperationStatusDetails"
          }
        },
        "created_time": {
          "type": "string",
          "format": "int64"
        },
        "last_updated_time": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "robotapiRobotEntityConnectivityState": {
      "type": "string",
      "enum": [
        "CONN_STATE_INVALID",
        "CONN_STATE_UNKNOWN",
        "CONN_STATE_REACHABLE",
        "CONN_STATE_UNREACHABLE",
        "CONN_STATE_MAX",
        "CONN_STATE_DEGRADED"
      ],
      "default": "CONN_STATE_INVALID",
      "title": "Derived reachability state for a device. Cannot be set by user"
    },
    "robotapiRobotEntityLockState": {
      "type": "string",
      "enum": [
        "INVALID_STATE",
        "UNLOCKED",
        "LOCKED",
        "ERRORED"
      ],
      "default": "INVALID_STATE",
      "description": "- ERRORED: Node is in error state. This would happen when LOCK\nowner does not renew or release the state within timeout",
      "title": "Lock state for any entity"
    },
    "robotapiRobotFilterData": {
      "type": "object",
      "properties": {
        "SortBy": {
          "type": "string"
        },
        "PageSize": {
          "type": "integer",
          "format": "int64"
        },
        "PageNum": {
          "type": "integer",
          "format": "int64"
        },
        "Descending": {
          "type": "boolean",
          "format": "boolean"
        },
        "MatchCase": {
          "type": "boolean",
          "format": "boolean"
        },
        "Criteria": {
          "type": "string"
        }
      }
    },
    "robotapiRobotGeoCoordinates": {
      "type": "object",
      "properties": {
        "longitude": {
          "$ref": "#/definitions/robotapiDouble"
        },
        "latitude": {
          "$ref": "#/definitions/robotapiDouble"
        },
        "altitude": {
          "$ref": "#/definitions/robotapiDouble"
        }
      }
    },
    "robotapiRobotInetAddr": {
      "type": "object",
      "properties": {
        "inet_af": {
          "$ref": "#/definitions/robotapiRobotInetAddressFamily"
        },
        "inet_addr": {
          "type": "string"
        },
        "mask": {
          "type": "string"
        }
      },
      "title": "Inet address"
    },
    "robotapiRobotInetAddressFamily": {
      "type": "string",
      "enum": [
        "ROBOT_INET_ADDR_TYPE_NONE",
        "ROBOT_INET_ADDR_TYPE_v4",
        "ROBOT_INET_ADDR_TYPE_v6"
      ],
      "default": "ROBOT_INET_ADDR_TYPE_NONE",
      "title": "Robot Inet Address Family"
    },
    "robotapiRobotInvKeyType": {
      "type": "string",
      "enum": [
        "INVALID_TYPE",
        "UUID",
        "INVENTORY_ID",
        "NODE_IP",
        "SERIAL_NUMBER",
        "MAC",
        "HOST_NAME"
      ],
      "default": "INVALID_TYPE",
      "title": "Supported Inventory Key Types"
    },
    "robotapiRobotInventoryType": {
      "type": "string",
      "enum": [
        "INV_TYPE_UNKNOWN",
        "INV_TYPE_NODE",
        "INV_TYPE_PROVIDER",
        "INV_TYPE_CREDENTIAL",
        "INV_TYPE_TAG"
      ],
      "default": "INV_TYPE_UNKNOWN"
    },
    "robotapiRobotJobState": {
      "type": "string",
      "enum": [
        "JOB_INVALID",
        "JOB_REJECTED",
        "JOB_ACCEPTED",
        "JOB_DB_UPDATED",
        "JOB_NOTIFICATION_PUBLISHED",
        "JOB_COMPLETED",
        "JOB_FAILED",
        "JOB_RUNNING",
        "JOB_PARTIAL",
        "JOB_COMPLETED_WITH_WARNING"
      ],
      "default": "JOB_INVALID",
      "title": "Result Job State"
    },
    "robotapiRobotNodeAdminState": {
      "type": "string",
      "enum": [
        "ROBOT_ADMIN_STATE_UNKNOWN",
        "ROBOT_ADMIN_STATE_UNMANAGED",
        "ROBOT_ADMIN_STATE_DOWN",
        "ROBOT_ADMIN_STATE_UP"
      ],
      "default": "ROBOT_ADMIN_STATE_UNKNOWN",
      "description": "Configured state for a Device. This is set suring onboarding and can be updated as needed."
    },
    "robotapiRobotNodeCapability": {
      "type": "string",
      "enum": [
        "NONE",
        "YANG_MDT",
        "SCHEMA_MDT",
        "SCHEMA_PDT",
        "SNMP",
        "TL1",
        "YANG_CLI",
        "YANG_EPNM",
        "SNMPTRAPS",
        "GNMI"
      ],
      "default": "NONE",
      "title": "Capabilities supported by Device"
    },
    "robotapiRobotNodeCredGetReq": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "filter": {
          "$ref": "#/definitions/robotapiRobotNodeCredentials"
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        }
      },
      "title": "Alternate credentials request as the orig one gets a node instance as filter"
    },
    "robotapiRobotNodeCredGetResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeCredentials"
          },
          "title": "Array of Node Data"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total credentials profile available at present"
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeCredentials": {
      "type": "object",
      "properties": {
        "profile": {
          "type": "string",
          "title": "Node credentials. Idea is to create the credential\nprofiles and associate them with the nodes.\nThis Data is going be stored in a vault or shall be\nencrypted"
        },
        "v2_info": {
          "$ref": "#/definitions/robotapiRobotSnmpV2"
        },
        "v3_info": {
          "$ref": "#/definitions/robotapiRobotSnmpV3"
        },
        "user_pass": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotUserPass"
          }
        }
      }
    },
    "robotapiRobotNodeCredentialsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeCredentials"
          },
          "description": "List of Credential profiles."
        },
        "user": {
          "type": "string"
        },
        "criteria": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeCustomProvider": {
      "type": "object",
      "properties": {
        "provider_name": {
          "type": "string"
        },
        "provider_node_id": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/robotapiRobotProviderData"
        },
        "provider_params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "robotapiRobotNodeData": {
      "type": "object",
      "properties": {
        "inv_key_type": {
          "$ref": "#/definitions/robotapiRobotInvKeyType"
        },
        "inventory_id": {
          "type": "string",
          "title": "Custom unique device identifier"
        },
        "node_ip": {
          "$ref": "#/definitions/robotapiRobotInetAddr"
        },
        "uuid": {
          "type": "string",
          "title": "Uuid is randomly generated by crossworks, readonly"
        },
        "mac": {
          "type": "string",
          "description": "Chassis backplane Mac address."
        },
        "serial_number": {
          "type": "string",
          "description": "Device Serial Number."
        },
        "host_name": {
          "type": "string",
          "description": "Device Host name."
        },
        "profile": {
          "type": "string",
          "description": "MUST FIELD.\nCredential Profile applicable to this device."
        },
        "reachability_state": {
          "$ref": "#/definitions/robotapiRobotEntityConnectivityState",
          "title": "Reachability state"
        },
        "admin_state": {
          "$ref": "#/definitions/robotapiRobotNodeAdminState",
          "title": "Device Admin state"
        },
        "connectivity_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotTransport"
          },
          "title": "List of Node Connections"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeTag"
          },
          "title": "Tags this device belongs to"
        },
        "product_info": {
          "$ref": "#/definitions/robotapiRobotNodeProductInfo",
          "title": "Node Product Info"
        },
        "geo_info": {
          "$ref": "#/definitions/robotapiRobotNodeGeoData",
          "title": "Geographical Info"
        },
        "routing_info": {
          "$ref": "#/definitions/robotapiRobotRoutinginfo",
          "title": "Routing info and Management Ip info"
        },
        "contact": {
          "type": "string",
          "title": "Owner contact for this device"
        },
        "uptime": {
          "type": "string",
          "title": "Device uptime"
        },
        "last_upd_time": {
          "type": "string",
          "format": "int64",
          "title": "Last time this Inventory Entry was Updated in DB"
        },
        "provider": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/robotapiRobotNodeCustomProvider"
          },
          "title": "List of providers - one per type strictly"
        },
        "reachability_check": {
          "$ref": "#/definitions/robotapiRobotReachCheck"
        },
        "reachability_state_upd_time": {
          "type": "string",
          "format": "int64"
        },
        "operational_state": {
          "$ref": "#/definitions/robotapiRobotNodeOperationalState",
          "title": "Device operational state -readonly"
        },
        "lock_status": {
          "$ref": "#/definitions/robotapiRobotNodeLockStatus"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of errors for the node - readonly"
        },
        "state_map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/robotapiCurrentState"
          }
        },
        "Inventory": {
          "$ref": "#/definitions/robotapiRobotNodeInventory"
        },
        "dg_uuid": {
          "type": "string",
          "title": "RobotDataGateway mapped_dg = 27;"
        },
        "providers_family": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/robotapiRobotProviderFamilyGroup"
          }
        },
        "direct_access": {
          "$ref": "#/definitions/robotapiDirectAccess",
          "title": "This attribute is only for internal use by scale testing. Not exposed via API/GUI/Swagger docs"
        },
        "dg_name": {
          "type": "string"
        },
        "nso_state": {
          "$ref": "#/definitions/robotapiNsoDeviceOperState"
        },
        "nso_service_state": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/robotapiNsoServiceState"
          }
        },
        "NsoMsg": {
          "type": "string"
        },
        "encryption": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeDataCount": {
      "type": "object",
      "properties": {
        "number_of_nodes": {
          "type": "integer",
          "format": "int64",
          "title": "Number that specifies number of nodes in DB"
        }
      }
    },
    "robotapiRobotNodeDataGetResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeData"
          },
          "title": "Array of Node Data"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total nodes available at present"
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeDataList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeData"
          },
          "description": "List of Node Data."
        },
        "user": {
          "type": "string"
        },
        "criteria": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeGeoData": {
      "type": "object",
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/robotapiRobotGeoCoordinates"
        },
        "building": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "range_incr": {
          "$ref": "#/definitions/robotapiRobotGeoCoordinates",
          "description": "Applicable only on the Request. Used only for transitional data\nto specify the increments(+/-) on the coordinates above for \nsearching the list of device in the Range."
        }
      }
    },
    "robotapiRobotNodeGetReq": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Number of nodes requested in the response.\nMax Limit and Default Limit are both 100."
        },
        "sort_by": {
          "$ref": "#/definitions/robotapiRobotNodeData",
          "description": "Note: Sort_by would be used only for fetching the RobotNodeData.\n      RobotNodeCredentials have only one Key \"profile\", which\n      will be always used for sorting."
        },
        "next_from": {
          "type": "string",
          "title": "Response would contain Data with keys \u003e next_from"
        },
        "filter": {
          "$ref": "#/definitions/robotapiRobotNodeData",
          "description": "1.  Uuid  : Shall result in fetching the credentials for a particular node.\n\n 2.  Profile:  Shall result in fetching the credentails associcated with specified Profile.\n\n 3.  No Filter: Shall return all the Profile credentials, sorted by Profile name.",
          "title": "Filter for the request.\nFor fetching the credentials only three filters are supported:"
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        }
      }
    },
    "robotapiRobotNodeInterface": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "AdminState": {
          "$ref": "#/definitions/robotapiRobotNodeInterfaceStatus"
        },
        "OperState": {
          "$ref": "#/definitions/robotapiRobotNodeInterfaceStatus"
        },
        "MAC": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeInterfaceStatus": {
      "type": "string",
      "enum": [
        "Unknown",
        "Up",
        "Down"
      ],
      "default": "Unknown"
    },
    "robotapiRobotNodeInventory": {
      "type": "object",
      "properties": {
        "Interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeInterface"
          }
        },
        "tables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/robotapiRobotTable"
          }
        }
      }
    },
    "robotapiRobotNodeJob": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string",
          "title": "Job id"
        },
        "inst_id": {
          "type": "string",
          "title": "Server instance identifier"
        },
        "state": {
          "$ref": "#/definitions/robotapiRobotJobState",
          "title": "Current State of the Job"
        },
        "type": {
          "type": "string",
          "title": "Job type. Debug purpose"
        },
        "error": {
          "type": "string",
          "title": "If any error"
        },
        "completion_time": {
          "type": "string",
          "format": "int64",
          "title": "Remaining time to complete"
        },
        "creation_time": {
          "type": "string",
          "format": "int64",
          "title": "Job creation time in epoch seconds"
        },
        "created_by": {
          "type": "string",
          "title": "User"
        },
        "impacted_count": {
          "type": "integer",
          "format": "int64",
          "title": "Impacted nodes/tags, provider or profiles"
        },
        "impacted": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Impacted elements list"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Every Action related to Inventory will have a Job"
    },
    "robotapiRobotNodeJobGetReq": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string",
          "title": "job_id or State would be supported filter\ncreation_time would be used for offset and sorting"
        },
        "state": {
          "$ref": "#/definitions/robotapiRobotJobState"
        },
        "creation_time": {
          "type": "string",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "Page size. Max limit 100 per req"
        },
        "filter": {
          "$ref": "#/definitions/robotapiRobotNodeJob"
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        },
        "to_filter": {
          "$ref": "#/definitions/robotapiRobotNodeJob"
        }
      }
    },
    "robotapiRobotNodeJobList": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeJob"
          },
          "title": "creation time based sorted list of RobotNodeJob"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total jobs available at present"
        }
      }
    },
    "robotapiRobotNodeLockReq": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/robotapiRobotEntityLockState",
          "title": "State"
        },
        "uuids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Node UUIDs"
        },
        "owner_cookie": {
          "type": "string"
        },
        "lock_id": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Used Internally by Applications like NCA and PULSE to lock Devices when using them"
    },
    "robotapiRobotNodeLockResp": {
      "type": "object",
      "properties": {
        "rc": {
          "$ref": "#/definitions/robotapiRobotNodeReqRc",
          "title": "Request  return code"
        },
        "rc_msg": {
          "type": "string",
          "title": "Return Message"
        },
        "owner_cookie": {
          "type": "string"
        },
        "lock_id": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "int64"
        },
        "end_time": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "robotapiRobotNodeLockStatus": {
      "type": "object",
      "properties": {
        "lock_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/robotapiRobotEntityLockState"
        },
        "owner": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "int64"
        },
        "end_time": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "robotapiRobotNodeOperationalState": {
      "type": "string",
      "enum": [
        "ROBOT_OPER_STATE_UNKNOWN",
        "ROBOT_OPER_STATE_UNMANAGED",
        "ROBOT_OPER_STATE_ADMIN_DOWN",
        "ROBOT_OPER_STATE_CHECKING",
        "ROBOT_OPER_STATE_OK",
        "ROBOT_OPER_STATE_ERROR",
        "ROBOT_OPER_STATE_LOCKED",
        "ROBOT_OPER_STATE_DELETING"
      ],
      "default": "ROBOT_OPER_STATE_UNKNOWN",
      "title": "Derived state for a Device. Cannot be set by user"
    },
    "robotapiRobotNodeProductInfo": {
      "type": "object",
      "properties": {
        "software_type": {
          "type": "string"
        },
        "software_version": {
          "type": "string"
        },
        "product_type": {
          "type": "string"
        },
        "product_family": {
          "type": "string"
        },
        "product_series": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "sys_object_id": {
          "type": "string"
        },
        "hw_change_timestamp": {
          "type": "string"
        },
        "config_change_timestamp": {
          "type": "string"
        },
        "capability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeCapability"
          },
          "description": "Device capability. Enum of TL1, SNMP, YANG, MDT, PDT, etc."
        },
        "device_type": {
          "$ref": "#/definitions/robotapiRobotNodeType",
          "description": "Node Type. e.g. SWITCH, ROUTER.."
        },
        "snmp_engine_id": {
          "type": "string"
        },
        "syslog_format": {
          "$ref": "#/definitions/robotapiRobotSyslogFormat",
          "title": "Syslog format on the device"
        }
      },
      "title": "This section consists of all device data that dlm polls from device"
    },
    "robotapiRobotNodeProvider": {
      "type": "object",
      "properties": {
        "provider_name": {
          "type": "string"
        },
        "provider_node_id": {
          "type": "string"
        },
        "provider_uuid": {
          "type": "string"
        },
        "provider_params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "robotapiRobotNodeReqRc": {
      "type": "string",
      "enum": [
        "NODE_REQ_INVALID",
        "NODE_REQ_SUCCESS",
        "NODE_REQ_FAILURE",
        "NODE_REQ_DEV_NOT_FOUND",
        "NODE_REQ_REJECTED"
      ],
      "default": "NODE_REQ_INVALID",
      "title": "Node Request return code"
    },
    "robotapiRobotNodeStateElement": {
      "type": "string",
      "enum": [
        "UNSUPPORTED",
        "REACHABILITY",
        "DISCOVERY",
        "CLOCK_DRIFT",
        "LOCK",
        "SYNC"
      ],
      "default": "UNSUPPORTED"
    },
    "robotapiRobotNodeTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "creation_time": {
          "type": "string",
          "format": "int64"
        },
        "devices_tagged": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "robotapiRobotNodeTagGetReq": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/robotapiRobotNodeTag"
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "next_from": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeTagList": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotNodeTag"
          },
          "title": "List of Tags"
        },
        "user": {
          "type": "string"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total tags available at present"
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "type": "string"
        },
        "criteria": {
          "type": "string"
        }
      }
    },
    "robotapiRobotNodeType": {
      "type": "string",
      "enum": [
        "NODE_TYPE_UNKNOWN",
        "NODE_TYPE_ROUTER",
        "NODE_TYPE_SWITCH",
        "NODE_TYPE_ROADM",
        "NODE_TYPE_AMPLIFIER",
        "NODE_TYPE_CBR"
      ],
      "default": "NODE_TYPE_UNKNOWN",
      "title": "- NODE_TYPE_UNKNOWN: Not known\n - NODE_TYPE_ROUTER: Layer 3 router\n - NODE_TYPE_SWITCH: Layer 2 ethernet switch\n - NODE_TYPE_ROADM: Layer 1 optical add/drop device\n - NODE_TYPE_AMPLIFIER: Layer 1 optical repeater/ amplifier\n - NODE_TYPE_CBR: Converged broadband router"
    },
    "robotapiRobotOnboardingType": {
      "type": "string",
      "enum": [
        "FROM_PROVIDER",
        "TO_PROVIDER"
      ],
      "default": "FROM_PROVIDER",
      "title": "- FROM_PROVIDER: The Direction to onboard devices. FROM PROVIDER will onboard devices from NSO to CW. and Vice Versa for TO PROVIDER"
    },
    "robotapiRobotProviderData": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "Internal key, mandatory field. Allocated internally on provider\ncreation. UUID is a generated value based on the name"
        },
        "name": {
          "type": "string",
          "description": "User-defined key, mandatory field."
        },
        "type": {
          "$ref": "#/definitions/robotapiRobotProviderType"
        },
        "lock_state": {
          "$ref": "#/definitions/robotapiRobotEntityLockState"
        },
        "reachability_state": {
          "$ref": "#/definitions/robotapiRobotEntityConnectivityState"
        },
        "connectivity_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotTransport"
          },
          "description": "All supported transports allowed to connect to this provider."
        },
        "profile": {
          "type": "string",
          "description": "Credential Profile applicable to this provider. Mandatory field."
        },
        "provider_device_key": {
          "$ref": "#/definitions/robotapiRobotProviderDeviceKey"
        },
        "last_upd_time": {
          "type": "string",
          "format": "int64",
          "description": "Last time this Provider Entry was Updated in DB.\nUnix time in seconds."
        },
        "last_reach_time": {
          "type": "string",
          "format": "int64",
          "description": "Last time this provider was determined to be reachable.\nUnix time in seconds."
        },
        "supported_models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiSupportedModels"
          },
          "title": "provider models"
        },
        "family": {
          "$ref": "#/definitions/robotapiRobotProviderFamily",
          "description": "Provider Family. Not supoorted YET."
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "map to configure provider specific properties as key, value pairs"
        }
      }
    },
    "robotapiRobotProviderDataGetResp": {
      "type": "object",
      "properties": {
        "return": {
          "$ref": "#/definitions/robotapiRobotResponseInfo"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotProviderData"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total providers available at present"
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "type": "string"
        }
      }
    },
    "robotapiRobotProviderDataList": {
      "type": "object",
      "properties": {
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotProviderData"
          },
          "title": "List of providers"
        },
        "user": {
          "type": "string"
        },
        "criteria": {
          "type": "string"
        }
      }
    },
    "robotapiRobotProviderDeviceKey": {
      "type": "string",
      "enum": [
        "ROBOT_PROVDEVKEY_NONE",
        "ROBOT_PROVDEVKEY_HOST_NAME",
        "ROBOT_PROVDEVKEY_NODE_IP",
        "ROBOT_PROVDEVKEY_INVENTORY_ID"
      ],
      "default": "ROBOT_PROVDEVKEY_NONE",
      "title": "Key types used for generating UUID for Provider"
    },
    "robotapiRobotProviderFamily": {
      "type": "string",
      "enum": [
        "ROBOT_PROVIDER_UNKNOWN",
        "ROBOT_PROVIDER_EPNM",
        "ROBOT_PROVIDER_NSO",
        "ROBOT_PROVIDER_WAE",
        "ROBOT_PROVIDER_CSM",
        "ROBOT_PROVIDER_XTC",
        "ROBOT_PROVIDER_SYSLOG_STORAGE",
        "ROBOT_PROVIDER_SR_PCE",
        "ROBOT_PROVIDER_ALERT",
        "ROBOT_PROVIDER_DESTINATION",
        "ROBOT_PROVIDER_OPTIMA",
        "ROBOT_PROVIDER_PROXY"
      ],
      "default": "ROBOT_PROVIDER_UNKNOWN",
      "title": "Provider Family types"
    },
    "robotapiRobotProviderFamilyGroup": {
      "type": "object",
      "properties": {
        "providers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/robotapiRobotNodeProvider"
          }
        }
      }
    },
    "robotapiRobotProviderGetReq": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Number of providers requested in the response."
        },
        "sort_by_field": {
          "type": "string",
          "description": "The field name in RobotProviderData to use for sorting. If this field\nis omitted, data is sorted by default on name."
        },
        "last_key": {
          "type": "string",
          "description": "Ask for data beyond last_key per the sorted order."
        },
        "filter": {
          "$ref": "#/definitions/robotapiRobotProviderData",
          "description": "Filter for the request. uuid, type, name, lock_state,\nreachability_state are supported. Combination of filters are also\nsupported."
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        }
      }
    },
    "robotapiRobotProviderOnboarding": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/robotapiRobotOnboardingType"
        },
        "provider_name": {
          "type": "string"
        },
        "nodes_criteria": {
          "type": "string"
        }
      }
    },
    "robotapiRobotProviderType": {
      "type": "string",
      "enum": [
        "ROBOT_PROVIDER_NONE",
        "ROBOT_PROVIDER_CFG_LOCAL",
        "ROBOT_PROVIDER_CFG_GLOBAL",
        "ROBOT_PROVIDER_INSTALL",
        "ROBOT_PROVIDER_COMPUTE",
        "ROBOT_PROVIDER_CFG_DIRECT",
        "ROBOT_PROVIDER_INSTALL_DIRECT"
      ],
      "default": "ROBOT_PROVIDER_NONE",
      "title": "Provider types\nIf there is no provider for CFG_LOCAL, it drops down to configuring\ndirectly to the device"
    },
    "robotapiRobotReachCheck": {
      "type": "string",
      "enum": [
        "REACH_CHECK_NONE",
        "REACH_CHECK_DISABLE",
        "REACH_CHECK_ENABLE"
      ],
      "default": "REACH_CHECK_NONE"
    },
    "robotapiRobotRecord": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "robotapiRobotResponseInfo": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "format": "int64",
          "description": "Typically from an enum defined by the component."
        },
        "desc": {
          "type": "string",
          "description": "Description of error. May not be filled for success error codes."
        }
      },
      "title": "Generic template for responses"
    },
    "robotapiRobotRoutinginfo": {
      "type": "object",
      "properties": {
        "global_isis_system_id": {
          "type": "string"
        },
        "global_ospf_router_id": {
          "type": "string"
        },
        "router_loopback": {
          "$ref": "#/definitions/robotapiRobotInetAddr"
        },
        "mgmt_intf_ip": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotInetAddr"
          }
        },
        "mgmt_vrf": {
          "type": "string"
        },
        "telemetry_intf_src_name": {
          "type": "string"
        },
        "telemetry_intf_src_vrf": {
          "type": "string"
        },
        "telemetry_transport_type": {
          "$ref": "#/definitions/robotapiTelemetryTransportType"
        },
        "telemetry_device_encoding": {
          "$ref": "#/definitions/robotapiTelemetryDeviceEncoding"
        },
        "te_router_id": {
          "type": "string",
          "title": "Traffic engineering router id"
        }
      }
    },
    "robotapiRobotSnmpV2": {
      "type": "object",
      "properties": {
        "read_community": {
          "type": "string"
        },
        "write_community": {
          "type": "string"
        }
      }
    },
    "robotapiRobotSnmpV3": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string"
        },
        "auth_type": {
          "$ref": "#/definitions/robotapiRobotSnmpV3AuthType",
          "title": "\"HMAC-MD5\" or \"HMAC-SHA\""
        },
        "auth_password": {
          "type": "string"
        },
        "priv_type": {
          "$ref": "#/definitions/robotapiRobotSnmpV3PrivType",
          "title": "\"CFB-AES-128\" or \"CBC-DES-56\" or \"PT_CFB_AES_192\" or PT_CFB_AES_256 or \"PT_CBC_3_DES\""
        },
        "priv_password": {
          "type": "string"
        },
        "security_level": {
          "$ref": "#/definitions/robotapiRobotSnmpV3SecurityLevel"
        }
      }
    },
    "robotapiRobotSnmpV3AuthType": {
      "type": "string",
      "enum": [
        "AT_UNKNOWN",
        "AT_HMAC_MD5",
        "AT_HMAC_SHA"
      ],
      "default": "AT_UNKNOWN"
    },
    "robotapiRobotSnmpV3PrivType": {
      "type": "string",
      "enum": [
        "PT_UNKNOWN",
        "PT_CFB_AES_128",
        "PT_CBC_DES_56",
        "PT_CFB_AES_192",
        "PT_CFB_AES_256",
        "PT_CBC_3_DES"
      ],
      "default": "PT_UNKNOWN"
    },
    "robotapiRobotSnmpV3SecurityLevel": {
      "type": "string",
      "enum": [
        "SL_UNKNOWN",
        "SL_NO_AUTH_NO_PRIV",
        "SL_AUTH_NO_PRIV",
        "SL_AUTH_PRIV"
      ],
      "default": "SL_UNKNOWN"
    },
    "robotapiRobotSyslogFormat": {
      "type": "string",
      "enum": [
        "RFC_INVALID",
        "RFC_UNKNOWN",
        "RFC_5424",
        "RFC_3164"
      ],
      "default": "RFC_INVALID",
      "title": "Syslog Format supported by Device"
    },
    "robotapiRobotTable": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotRecord"
          }
        }
      }
    },
    "robotapiRobotTransport": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/robotapiRobotTransportType",
          "description": "Device connectivity type."
        },
        "ipaddrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotInetAddr"
          },
          "title": "V4/V6 ip address for this connectivity type"
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "title": "Port for this connectivity type"
        },
        "timeout": {
          "type": "string",
          "format": "uint64",
          "title": "Timeout for this connectivity type"
        },
        "reachability_state": {
          "$ref": "#/definitions/robotapiRobotEntityConnectivityState",
          "title": "Reachability Status for Transport Connection"
        },
        "reachability_state_upd_time": {
          "type": "string",
          "format": "int64",
          "description": "Reachability timestamp. Time when the reach state was updated.\nUnix epoch time in seconds."
        },
        "error": {
          "type": "string"
        },
        "encoding_type": {
          "$ref": "#/definitions/robotapiEncodingType"
        }
      }
    },
    "robotapiRobotTransportType": {
      "type": "string",
      "enum": [
        "ROBOT_MSVC_TRANS_NONE",
        "ROBOT_MSVC_TRANS_TCP",
        "ROBOT_MSVC_TRANS_UDP",
        "ROBOT_MSVC_TRANS_HTTP",
        "ROBOT_MSVC_TRANS_HTTPS",
        "ROBOT_MSVC_TRANS_GRPC",
        "ROBOT_MSVC_TRANS_SSH",
        "ROBOT_MSVC_TRANS_NETCONF",
        "ROBOT_MSVC_TRANS_TELNET",
        "ROBOT_MSVC_TRANS_SNMP",
        "ROBOT_MSVC_TRANS_TL1",
        "ROBOT_MSVC_TRANS_TL1_SECURE",
        "ROBOT_MSVC_TRANS_ICMP",
        "ROBOT_MSVC_TRANS_KAFKA",
        "ROBOT_MSVC_TRANS_NATS",
        "ROBOT_MSVC_TRANS_GNMI",
        "ROBOT_MSVC_TRANS_GNMI_SECURE"
      ],
      "default": "ROBOT_MSVC_TRANS_NONE",
      "title": "Transport types for robot micro-services"
    },
    "robotapiRobotUniquePolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique name"
        },
        "invType": {
          "$ref": "#/definitions/robotapiRobotInventoryType",
          "title": "Inventory Type, In 3.1 version, policies are supported only for Nodes"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of field names on which the uniqueness will be maintained"
        },
        "Type": {
          "$ref": "#/definitions/robotapiUniquePolicyType",
          "title": "Combination of all the filed supplied or independent"
        }
      }
    },
    "robotapiRobotUniquePolicyGetReq": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Number of policies requested in the response."
        },
        "sort_by_field": {
          "type": "string",
          "description": "The field name in RobotUniquePolicy to use for sorting. If this field\nis omitted, data is sorted by default on name."
        },
        "last_key": {
          "type": "string",
          "description": "Ask for data beyond last_key per the sorted order."
        },
        "filter": {
          "$ref": "#/definitions/robotapiRobotUniquePolicy"
        },
        "filterData": {
          "$ref": "#/definitions/robotapiRobotFilterData"
        }
      }
    },
    "robotapiRobotUniquePolicyGetResp": {
      "type": "object",
      "properties": {
        "return": {
          "$ref": "#/definitions/robotapiRobotResponseInfo"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotUniquePolicy"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total policies available at present"
        }
      }
    },
    "robotapiRobotUniquePolicyList": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiRobotUniquePolicy"
          }
        },
        "user": {
          "type": "string"
        }
      },
      "title": "List of policies, used in the api request/response"
    },
    "robotapiRobotUpdateNodeSetReq": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/robotapiRobotNodeData",
          "title": "Common data to be updated across the set of nodes"
        },
        "uuids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "string"
        }
      }
    },
    "robotapiRobotUserPass": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/robotapiRobotUserPassType"
        },
        "enable_password": {
          "$ref": "#/definitions/robotapiRobotUserPassEnable"
        },
        "enable_password_data": {
          "type": "string"
        }
      }
    },
    "robotapiRobotUserPassEnable": {
      "type": "string",
      "enum": [
        "ROBOT_USERPASSEN_NONE",
        "ROBOT_USERPASSEN_ENABLE",
        "ROBOT_USERPASSEN_DISABLE"
      ],
      "default": "ROBOT_USERPASSEN_NONE",
      "title": "- ROBOT_USERPASSEN_ENABLE: enables second level authentication in devices where is feature is available. For e.g. Cisco IOS XE devices.\nWhen this option is selected, the password for second level authentication much be given"
    },
    "robotapiRobotUserPassType": {
      "type": "string",
      "enum": [
        "ROBOT_USERPASS_UNKNOWN",
        "ROBOT_USERPASS_TCP",
        "ROBOT_USERPASS_UDP",
        "ROBOT_USERPASS_HTTP",
        "ROBOT_USERPASS_HTTPS",
        "ROBOT_USERPASS_GRPC",
        "ROBOT_USERPASS_SSH",
        "ROBOT_USERPASS_NETCONF",
        "ROBOT_USERPASS_TELNET",
        "ROBOT_USERPASS_SNMP",
        "ROBOT_USERPASS_TL1",
        "ROBOT_USERPASS_TL1_SECURE",
        "ROBOT_USERPASS_ADMIN",
        "ROBOT_USERPASS_ENABLE",
        "ROBOT_USERPASS_MAX",
        "ROBOT_USERPASS_GNMI"
      ],
      "default": "ROBOT_USERPASS_UNKNOWN",
      "title": "Connectivity types for robot micro-services"
    },
    "robotapiRobotUuid": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/robotapiRobotUuidType"
        }
      }
    },
    "robotapiRobotUuidType": {
      "type": "string",
      "enum": [
        "UUID_TYPE_UNKNOWN",
        "UUID_TYPE_NODE",
        "UUID_TYPE_PROVIDER"
      ],
      "default": "UUID_TYPE_UNKNOWN"
    },
    "robotapiSouthBoundIP": {
      "type": "object",
      "properties": {
        "ipaddr": {
          "$ref": "#/definitions/robotapiRobotInetAddr"
        },
        "gateway": {
          "type": "string"
        }
      },
      "title": "Virtual IP address for southbound interface connecting to devices"
    },
    "robotapiState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "UP",
        "DOWN",
        "DEGRADE",
        "ERROR",
        "DISABLE"
      ],
      "default": "UNKNOWN"
    },
    "robotapiSupportedModels": {
      "type": "object",
      "properties": {
        "model_prefix": {
          "type": "string",
          "title": "Yang model prefix e.g. Cisco-IOS-XR, Cisco-NX-OS, Cisco-IOS-XE"
        },
        "model_version": {
          "type": "string",
          "title": "Yang model version"
        }
      }
    },
    "robotapiTelemetryDeviceEncoding": {
      "type": "string",
      "enum": [
        "UNKNOWN_ENCODING",
        "GPBKV"
      ],
      "default": "UNKNOWN_ENCODING"
    },
    "robotapiTelemetryTransportType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TRANSPORT_TYPE",
        "TCP_DIALOUT"
      ],
      "default": "UNKNOWN_TRANSPORT_TYPE"
    },
    "robotapiUniquePolicyType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "INDEPENDENT",
        "COMBINED"
      ],
      "default": "UNKNOWN_TYPE",
      "title": "- INDEPENDENT: fields in policy are Independently unique\n - COMBINED: combination of fields in the policy are unique"
    },
    "robotapiVirtualDGGetReq": {
      "type": "object",
      "properties": {
        "criteria": {
          "type": "string",
          "description": "Request message to retrieve virtual data gateways information."
        }
      }
    },
    "robotapiVirtualDGGetResp": {
      "type": "object",
      "properties": {
        "return": {
          "$ref": "#/definitions/robotapiRobotResponseInfo",
          "description": "Response message for virtual data gateways information."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiVirtualRobotDataGateway"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total virtual Data Gateways available at present"
        }
      }
    },
    "robotapiVirtualDGList": {
      "type": "object",
      "properties": {
        "vdgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/robotapiVirtualRobotDataGateway"
          }
        },
        "user": {
          "type": "string"
        }
      },
      "title": "List of HA pools, used in the api request/response"
    },
    "robotapiVirtualRobotDataGateway": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "vdg_uuid": {
          "type": "string"
        },
        "pdg_uuid": {
          "type": "string"
        },
        "virtualIP": {
          "$ref": "#/definitions/robotapiSouthBoundIP"
        }
      }
    }
  }
}
